
Praktikum 2 pentiometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000218a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  0000218a  0000221e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d7  00802020  00802020  0000223e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000229c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  000022e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fae6  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005207  00000000  00000000  0001219e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000088a6  00000000  00000000  000173a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000da8  00000000  00000000  0001fc4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000340ed  00000000  00000000  000209f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006951  00000000  00000000  00054ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  0005b438  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c689  00000000  00000000  0005b920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_39>
      a0:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_40>
      a4:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__vector_41>
      a8:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4d c7       	rjmp	.+3738   	; 0xfb8 <__vector_71>
     11e:	00 00       	nop
     120:	7d c7       	rjmp	.+3834   	; 0x101c <__vector_72>
     122:	00 00       	nop
     124:	ad c7       	rjmp	.+3930   	; 0x1080 <__vector_73>
     126:	00 00       	nop
     128:	dd c7       	rjmp	.+4026   	; 0x10e4 <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1da9>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6591>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6569>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5591>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d69>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea e8       	ldi	r30, 0x8A	; 138
     4a6:	f1 e2       	ldi	r31, 0x21	; 33
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a0 32       	cpi	r26, 0x20	; 32
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a0 e2       	ldi	r26, 0x20	; 32
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a7 3f       	cpi	r26, 0xF7	; 247
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <main>
     4cc:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	0e 94 a1 0a 	call	0x1542	; 0x1542 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	76 01       	movw	r14, r12
     53e:	00 e4       	ldi	r16, 0x40	; 64
     540:	12 e4       	ldi	r17, 0x42	; 66
     542:	2f e0       	ldi	r18, 0x0F	; 15
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	43 e0       	ldi	r20, 0x03	; 3
     548:	be 01       	movw	r22, r28
     54a:	6f 5f       	subi	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 ea       	ldi	r24, 0xA0	; 160
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     556:	00 e6       	ldi	r16, 0x60	; 96
     558:	16 e0       	ldi	r17, 0x06	; 6
     55a:	ff 24       	eor	r15, r15
     55c:	f3 94       	inc	r15
     55e:	f8 01       	movw	r30, r16
     560:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     562:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <usart_spi_select_device>
     572:	f8 01       	movw	r30, r16
     574:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f9 e0       	ldi	r31, 0x09	; 9
     57a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57c:	85 ff       	sbrs	r24, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     580:	80 ea       	ldi	r24, 0xA0	; 160
     582:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58c:	86 ff       	sbrs	r24, 6
     58e:	fd cf       	rjmp	.-6      	; 0x58a <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f9 e0       	ldi	r31, 0x09	; 9
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     598:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     59a:	be 01       	movw	r22, r28
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	99 e0       	ldi	r25, 0x09	; 9
     5a4:	0e 94 00 0b 	call	0x1600	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <usart_spi_select_device>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5c0:	e0 ea       	ldi	r30, 0xA0	; 160
     5c2:	f9 e0       	ldi	r31, 0x09	; 9
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5e2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	99 e0       	ldi	r25, 0x09	; 9
     5ee:	0e 94 00 0b 	call	0x1600	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	99 e0       	ldi	r25, 0x09	; 9
     600:	e9 d7       	rcall	.+4050   	; 0x15d4 <usart_spi_select_device>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     608:	e0 ea       	ldi	r30, 0xA0	; 160
     60a:	f9 e0       	ldi	r31, 0x09	; 9
     60c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     60e:	85 ff       	sbrs	r24, 5
     610:	fd cf       	rjmp	.-6      	; 0x60c <st7565r_init+0x124>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     612:	88 ec       	ldi	r24, 0xC8	; 200
     614:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     618:	e0 ea       	ldi	r30, 0xA0	; 160
     61a:	f9 e0       	ldi	r31, 0x09	; 9
     61c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     61e:	86 ff       	sbrs	r24, 6
     620:	fd cf       	rjmp	.-6      	; 0x61c <st7565r_init+0x134>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     622:	e0 ea       	ldi	r30, 0xA0	; 160
     624:	f9 e0       	ldi	r31, 0x09	; 9
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     62a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     62c:	be 01       	movw	r22, r28
     62e:	6f 5f       	subi	r22, 0xFF	; 255
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	80 ea       	ldi	r24, 0xA0	; 160
     634:	99 e0       	ldi	r25, 0x09	; 9
     636:	e4 d7       	rcall	.+4040   	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     638:	8b e2       	ldi	r24, 0x2B	; 43
     63a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     63c:	be 01       	movw	r22, r28
     63e:	6f 5f       	subi	r22, 0xFF	; 255
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	80 ea       	ldi	r24, 0xA0	; 160
     644:	99 e0       	ldi	r25, 0x09	; 9
     646:	c6 d7       	rcall	.+3980   	; 0x15d4 <usart_spi_select_device>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     64e:	e0 ea       	ldi	r30, 0xA0	; 160
     650:	f9 e0       	ldi	r31, 0x09	; 9
     652:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     654:	85 ff       	sbrs	r24, 5
     656:	fd cf       	rjmp	.-6      	; 0x652 <st7565r_init+0x16a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     658:	82 ea       	ldi	r24, 0xA2	; 162
     65a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     65e:	e0 ea       	ldi	r30, 0xA0	; 160
     660:	f9 e0       	ldi	r31, 0x09	; 9
     662:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     664:	86 ff       	sbrs	r24, 6
     666:	fd cf       	rjmp	.-6      	; 0x662 <st7565r_init+0x17a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     668:	e0 ea       	ldi	r30, 0xA0	; 160
     66a:	f9 e0       	ldi	r31, 0x09	; 9
     66c:	80 e4       	ldi	r24, 0x40	; 64
     66e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     670:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	80 ea       	ldi	r24, 0xA0	; 160
     67a:	99 e0       	ldi	r25, 0x09	; 9
     67c:	c1 d7       	rcall	.+3970   	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     67e:	8b e2       	ldi	r24, 0x2B	; 43
     680:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     682:	be 01       	movw	r22, r28
     684:	6f 5f       	subi	r22, 0xFF	; 255
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	80 ea       	ldi	r24, 0xA0	; 160
     68a:	99 e0       	ldi	r25, 0x09	; 9
     68c:	a3 d7       	rcall	.+3910   	; 0x15d4 <usart_spi_select_device>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     694:	e0 ea       	ldi	r30, 0xA0	; 160
     696:	f9 e0       	ldi	r31, 0x09	; 9
     698:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     69a:	85 ff       	sbrs	r24, 5
     69c:	fd cf       	rjmp	.-6      	; 0x698 <st7565r_init+0x1b0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     69e:	8f e2       	ldi	r24, 0x2F	; 47
     6a0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6a4:	e0 ea       	ldi	r30, 0xA0	; 160
     6a6:	f9 e0       	ldi	r31, 0x09	; 9
     6a8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6aa:	86 ff       	sbrs	r24, 6
     6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <st7565r_init+0x1c0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	80 e4       	ldi	r24, 0x40	; 64
     6b4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6b6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6b8:	be 01       	movw	r22, r28
     6ba:	6f 5f       	subi	r22, 0xFF	; 255
     6bc:	7f 4f       	sbci	r23, 0xFF	; 255
     6be:	80 ea       	ldi	r24, 0xA0	; 160
     6c0:	99 e0       	ldi	r25, 0x09	; 9
     6c2:	9e d7       	rcall	.+3900   	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6c4:	8b e2       	ldi	r24, 0x2B	; 43
     6c6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6c8:	be 01       	movw	r22, r28
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	80 ea       	ldi	r24, 0xA0	; 160
     6d0:	99 e0       	ldi	r25, 0x09	; 9
     6d2:	80 d7       	rcall	.+3840   	; 0x15d4 <usart_spi_select_device>
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6da:	e0 ea       	ldi	r30, 0xA0	; 160
     6dc:	f9 e0       	ldi	r31, 0x09	; 9
     6de:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6e0:	85 ff       	sbrs	r24, 5
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <st7565r_init+0x1f6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6e4:	88 ef       	ldi	r24, 0xF8	; 248
     6e6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ea:	e0 ea       	ldi	r30, 0xA0	; 160
     6ec:	f9 e0       	ldi	r31, 0x09	; 9
     6ee:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6f0:	86 ff       	sbrs	r24, 6
     6f2:	fd cf       	rjmp	.-6      	; 0x6ee <st7565r_init+0x206>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6f4:	e0 ea       	ldi	r30, 0xA0	; 160
     6f6:	f9 e0       	ldi	r31, 0x09	; 9
     6f8:	80 e4       	ldi	r24, 0x40	; 64
     6fa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6fc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6fe:	be 01       	movw	r22, r28
     700:	6f 5f       	subi	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	80 ea       	ldi	r24, 0xA0	; 160
     706:	99 e0       	ldi	r25, 0x09	; 9
     708:	7b d7       	rcall	.+3830   	; 0x1600 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     70a:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	be 01       	movw	r22, r28
     710:	6f 5f       	subi	r22, 0xFF	; 255
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	80 ea       	ldi	r24, 0xA0	; 160
     716:	99 e0       	ldi	r25, 0x09	; 9
     718:	5d d7       	rcall	.+3770   	; 0x15d4 <usart_spi_select_device>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     720:	e0 ea       	ldi	r30, 0xA0	; 160
     722:	f9 e0       	ldi	r31, 0x09	; 9
     724:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     726:	85 ff       	sbrs	r24, 5
     728:	fd cf       	rjmp	.-6      	; 0x724 <st7565r_init+0x23c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     72a:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     72e:	e0 ea       	ldi	r30, 0xA0	; 160
     730:	f9 e0       	ldi	r31, 0x09	; 9
     732:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     734:	86 ff       	sbrs	r24, 6
     736:	fd cf       	rjmp	.-6      	; 0x732 <st7565r_init+0x24a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     738:	e0 ea       	ldi	r30, 0xA0	; 160
     73a:	f9 e0       	ldi	r31, 0x09	; 9
     73c:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     73e:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     740:	80 81       	ld	r24, Z
     742:	be 01       	movw	r22, r28
     744:	6f 5f       	subi	r22, 0xFF	; 255
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	80 ea       	ldi	r24, 0xA0	; 160
     74a:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     74c:	59 d7       	rcall	.+3762   	; 0x1600 <usart_spi_deselect_device>
     74e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	be 01       	movw	r22, r28
     754:	6f 5f       	subi	r22, 0xFF	; 255
     756:	7f 4f       	sbci	r23, 0xFF	; 255
     758:	80 ea       	ldi	r24, 0xA0	; 160
     75a:	99 e0       	ldi	r25, 0x09	; 9
     75c:	3b d7       	rcall	.+3702   	; 0x15d4 <usart_spi_select_device>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     764:	e0 ea       	ldi	r30, 0xA0	; 160
     766:	f9 e0       	ldi	r31, 0x09	; 9
     768:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     76a:	85 ff       	sbrs	r24, 5
     76c:	fd cf       	rjmp	.-6      	; 0x768 <st7565r_init+0x280>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     76e:	81 e2       	ldi	r24, 0x21	; 33
     770:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     774:	e0 ea       	ldi	r30, 0xA0	; 160
     776:	f9 e0       	ldi	r31, 0x09	; 9
     778:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     77a:	86 ff       	sbrs	r24, 6
     77c:	fd cf       	rjmp	.-6      	; 0x778 <st7565r_init+0x290>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     77e:	e0 ea       	ldi	r30, 0xA0	; 160
     780:	f9 e0       	ldi	r31, 0x09	; 9
     782:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     784:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     786:	80 81       	ld	r24, Z
     788:	be 01       	movw	r22, r28
     78a:	6f 5f       	subi	r22, 0xFF	; 255
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     792:	36 d7       	rcall	.+3692   	; 0x1600 <usart_spi_deselect_device>
     794:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	be 01       	movw	r22, r28
     79a:	6f 5f       	subi	r22, 0xFF	; 255
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	80 ea       	ldi	r24, 0xA0	; 160
     7a0:	99 e0       	ldi	r25, 0x09	; 9
     7a2:	18 d7       	rcall	.+3632   	; 0x15d4 <usart_spi_select_device>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
     7ac:	f9 e0       	ldi	r31, 0x09	; 9
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b0:	85 ff       	sbrs	r24, 5
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <st7565r_init+0x2c6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7b4:	81 e8       	ldi	r24, 0x81	; 129
     7b6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ba:	e0 ea       	ldi	r30, 0xA0	; 160
     7bc:	f9 e0       	ldi	r31, 0x09	; 9
     7be:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c0:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <st7565r_init+0x2d6>
     7c4:	e0 ea       	ldi	r30, 0xA0	; 160
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ca:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7cc:	80 81       	ld	r24, Z
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7d8:	13 d7       	rcall	.+3622   	; 0x1600 <usart_spi_deselect_device>
     7da:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	be 01       	movw	r22, r28
     7e0:	6f 5f       	subi	r22, 0xFF	; 255
     7e2:	7f 4f       	sbci	r23, 0xFF	; 255
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	99 e0       	ldi	r25, 0x09	; 9
     7e8:	f5 d6       	rcall	.+3562   	; 0x15d4 <usart_spi_select_device>
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f0:	e0 ea       	ldi	r30, 0xA0	; 160
     7f2:	f9 e0       	ldi	r31, 0x09	; 9
     7f4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7f6:	85 ff       	sbrs	r24, 5
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <st7565r_init+0x30c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7fa:	81 e2       	ldi	r24, 0x21	; 33
     7fc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     800:	e0 ea       	ldi	r30, 0xA0	; 160
     802:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     804:	81 81       	ldd	r24, Z+1	; 0x01
     806:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     808:	fd cf       	rjmp	.-6      	; 0x804 <st7565r_init+0x31c>
     80a:	e0 ea       	ldi	r30, 0xA0	; 160
     80c:	f9 e0       	ldi	r31, 0x09	; 9
     80e:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     810:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     812:	80 81       	ld	r24, Z
     814:	be 01       	movw	r22, r28
     816:	6f 5f       	subi	r22, 0xFF	; 255
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	80 ea       	ldi	r24, 0xA0	; 160
     81c:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     81e:	f0 d6       	rcall	.+3552   	; 0x1600 <usart_spi_deselect_device>
     820:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	be 01       	movw	r22, r28
     826:	6f 5f       	subi	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	80 ea       	ldi	r24, 0xA0	; 160
     82c:	99 e0       	ldi	r25, 0x09	; 9
     82e:	d2 d6       	rcall	.+3492   	; 0x15d4 <usart_spi_select_device>
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     836:	e0 ea       	ldi	r30, 0xA0	; 160
     838:	f9 e0       	ldi	r31, 0x09	; 9
     83a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     83c:	85 ff       	sbrs	r24, 5
     83e:	fd cf       	rjmp	.-6      	; 0x83a <st7565r_init+0x352>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     840:	8f ea       	ldi	r24, 0xAF	; 175
     842:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     846:	e0 ea       	ldi	r30, 0xA0	; 160
     848:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     84a:	81 81       	ldd	r24, Z+1	; 0x01
     84c:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     84e:	fd cf       	rjmp	.-6      	; 0x84a <st7565r_init+0x362>
     850:	e0 ea       	ldi	r30, 0xA0	; 160
     852:	f9 e0       	ldi	r31, 0x09	; 9
     854:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     856:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     858:	80 81       	ld	r24, Z
     85a:	be 01       	movw	r22, r28
     85c:	6f 5f       	subi	r22, 0xFF	; 255
     85e:	7f 4f       	sbci	r23, 0xFF	; 255
     860:	80 ea       	ldi	r24, 0xA0	; 160
     862:	99 e0       	ldi	r25, 0x09	; 9
     864:	cd d6       	rcall	.+3482   	; 0x1600 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	08 95       	ret

0000087c <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	1f 92       	push	r1
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	08 2f       	mov	r16, r24
     88e:	f6 2e       	mov	r15, r22
     890:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     892:	d1 d6       	rcall	.+3490   	; 0x1636 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     894:	0f 70       	andi	r16, 0x0F	; 15
     896:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     898:	8b e2       	ldi	r24, 0x2B	; 43
     89a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     89c:	be 01       	movw	r22, r28
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	80 ea       	ldi	r24, 0xA0	; 160
     8a4:	99 e0       	ldi	r25, 0x09	; 9
     8a6:	96 d6       	rcall	.+3372   	; 0x15d4 <usart_spi_select_device>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8ae:	e0 ea       	ldi	r30, 0xA0	; 160
     8b0:	f9 e0       	ldi	r31, 0x09	; 9
     8b2:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8b4:	95 ff       	sbrs	r25, 5
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8b8:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8bc:	e0 ea       	ldi	r30, 0xA0	; 160
     8be:	f9 e0       	ldi	r31, 0x09	; 9
     8c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8c2:	86 ff       	sbrs	r24, 6
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8c6:	e0 ea       	ldi	r30, 0xA0	; 160
     8c8:	f9 e0       	ldi	r31, 0x09	; 9
     8ca:	80 e4       	ldi	r24, 0x40	; 64
     8cc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ce:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8d0:	be 01       	movw	r22, r28
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	80 ea       	ldi	r24, 0xA0	; 160
     8d8:	99 e0       	ldi	r25, 0x09	; 9
     8da:	92 d6       	rcall	.+3364   	; 0x1600 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8dc:	0f 2d       	mov	r16, r15
     8de:	0f 77       	andi	r16, 0x7F	; 127
     8e0:	02 95       	swap	r16
     8e2:	0f 70       	andi	r16, 0x0F	; 15
     8e4:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8e6:	8b e2       	ldi	r24, 0x2B	; 43
     8e8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8ea:	be 01       	movw	r22, r28
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	80 ea       	ldi	r24, 0xA0	; 160
     8f2:	99 e0       	ldi	r25, 0x09	; 9
     8f4:	6f d6       	rcall	.+3294   	; 0x15d4 <usart_spi_select_device>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8fc:	e0 ea       	ldi	r30, 0xA0	; 160
     8fe:	f9 e0       	ldi	r31, 0x09	; 9
     900:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     902:	85 ff       	sbrs	r24, 5
     904:	fd cf       	rjmp	.-6      	; 0x900 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     906:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     90a:	e0 ea       	ldi	r30, 0xA0	; 160
     90c:	f9 e0       	ldi	r31, 0x09	; 9
     90e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     910:	86 ff       	sbrs	r24, 6
     912:	fd cf       	rjmp	.-6      	; 0x90e <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     914:	e0 ea       	ldi	r30, 0xA0	; 160
     916:	f9 e0       	ldi	r31, 0x09	; 9
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     91c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     91e:	be 01       	movw	r22, r28
     920:	6f 5f       	subi	r22, 0xFF	; 255
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	80 ea       	ldi	r24, 0xA0	; 160
     926:	99 e0       	ldi	r25, 0x09	; 9
     928:	6b d6       	rcall	.+3286   	; 0x1600 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     92a:	0f 2d       	mov	r16, r15
     92c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     92e:	8b e2       	ldi	r24, 0x2B	; 43
     930:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     932:	be 01       	movw	r22, r28
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	80 ea       	ldi	r24, 0xA0	; 160
     93a:	99 e0       	ldi	r25, 0x09	; 9
     93c:	4b d6       	rcall	.+3222   	; 0x15d4 <usart_spi_select_device>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     944:	e0 ea       	ldi	r30, 0xA0	; 160
     946:	f9 e0       	ldi	r31, 0x09	; 9
     948:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     94a:	85 ff       	sbrs	r24, 5
     94c:	fd cf       	rjmp	.-6      	; 0x948 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     94e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     952:	e0 ea       	ldi	r30, 0xA0	; 160
     954:	f9 e0       	ldi	r31, 0x09	; 9
     956:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     958:	86 ff       	sbrs	r24, 6
     95a:	fd cf       	rjmp	.-6      	; 0x956 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     95c:	e0 ea       	ldi	r30, 0xA0	; 160
     95e:	f9 e0       	ldi	r31, 0x09	; 9
     960:	80 e4       	ldi	r24, 0x40	; 64
     962:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     964:	80 81       	ld	r24, Z
     966:	be 01       	movw	r22, r28
     968:	6f 5f       	subi	r22, 0xFF	; 255
     96a:	7f 4f       	sbci	r23, 0xFF	; 255
     96c:	80 ea       	ldi	r24, 0xA0	; 160
     96e:	99 e0       	ldi	r25, 0x09	; 9
     970:	47 d6       	rcall	.+3214   	; 0x1600 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     972:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	80 ea       	ldi	r24, 0xA0	; 160
     97e:	99 e0       	ldi	r25, 0x09	; 9
     980:	29 d6       	rcall	.+3154   	; 0x15d4 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     988:	e0 ea       	ldi	r30, 0xA0	; 160
     98a:	f9 e0       	ldi	r31, 0x09	; 9
     98c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     98e:	85 ff       	sbrs	r24, 5
     990:	fd cf       	rjmp	.-6      	; 0x98c <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     992:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     996:	e0 ea       	ldi	r30, 0xA0	; 160
     998:	f9 e0       	ldi	r31, 0x09	; 9
     99a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     99c:	86 ff       	sbrs	r24, 6
     99e:	fd cf       	rjmp	.-6      	; 0x99a <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9a0:	e0 ea       	ldi	r30, 0xA0	; 160
     9a2:	f9 e0       	ldi	r31, 0x09	; 9
     9a4:	80 e4       	ldi	r24, 0x40	; 64
     9a6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9a8:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9b0:	be 01       	movw	r22, r28
     9b2:	6f 5f       	subi	r22, 0xFF	; 255
     9b4:	7f 4f       	sbci	r23, 0xFF	; 255
     9b6:	80 ea       	ldi	r24, 0xA0	; 160
     9b8:	99 e0       	ldi	r25, 0x09	; 9
     9ba:	22 d6       	rcall	.+3140   	; 0x1600 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	08 95       	ret

000009ca <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	1f 92       	push	r1
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	90 e2       	ldi	r25, 0x20	; 32
     9dc:	27 d6       	rcall	.+3150   	; 0x162c <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9de:	84 dd       	rcall	.-1272   	; 0x4e8 <st7565r_init>
     9e0:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	f2 d5       	rcall	.+3044   	; 0x15d4 <usart_spi_select_device>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     9f6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9f8:	f9 e0       	ldi	r31, 0x09	; 9
     9fa:	81 81       	ldd	r24, Z+1	; 0x01
     9fc:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9fe:	fd cf       	rjmp	.-6      	; 0x9fa <gfx_mono_st7565r_init+0x30>
     a00:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a02:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a06:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a08:	f9 e0       	ldi	r31, 0x09	; 9
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
     a0c:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <gfx_mono_st7565r_init+0x40>
     a10:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a12:	f9 e0       	ldi	r31, 0x09	; 9
     a14:	80 e4       	ldi	r24, 0x40	; 64
     a16:	81 83       	std	Z+1, r24	; 0x01
     a18:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a1a:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	80 ea       	ldi	r24, 0xA0	; 160
     a22:	99 e0       	ldi	r25, 0x09	; 9
     a24:	ed d5       	rcall	.+3034   	; 0x1600 <usart_spi_deselect_device>
     a26:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a28:	0a c0       	rjmp	.+20     	; 0xa3e <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	61 2f       	mov	r22, r17
     a2e:	80 2f       	mov	r24, r16
     a30:	25 df       	rcall	.-438    	; 0x87c <gfx_mono_st7565r_put_byte>
     a32:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a34:	10 38       	cpi	r17, 0x80	; 128
     a36:	c9 f7       	brne	.-14     	; 0xa2a <gfx_mono_st7565r_init+0x60>
     a38:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a3a:	04 30       	cpi	r16, 0x04	; 4
     a3c:	11 f0       	breq	.+4      	; 0xa42 <gfx_mono_st7565r_init+0x78>
     a3e:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a40:	f4 cf       	rjmp	.-24     	; 0xa2a <gfx_mono_st7565r_init+0x60>
     a42:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <gfx_mono_st7565r_draw_pixel>:
     a4e:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a58:	88 23       	and	r24, r24
     a5a:	4c f1       	brlt	.+82     	; 0xaae <gfx_mono_st7565r_draw_pixel+0x60>
     a5c:	60 32       	cpi	r22, 0x20	; 32
     a5e:	38 f5       	brcc	.+78     	; 0xaae <gfx_mono_st7565r_draw_pixel+0x60>
     a60:	d4 2f       	mov	r29, r20
     a62:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a64:	f6 2e       	mov	r15, r22
     a66:	f6 94       	lsr	r15
     a68:	f6 94       	lsr	r15
     a6a:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	f8 9e       	mul	r15, r24
     a72:	60 19       	sub	r22, r0
     a74:	71 09       	sbc	r23, r1
     a76:	11 24       	eor	r1, r1
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	8c 01       	movw	r16, r24
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <gfx_mono_st7565r_draw_pixel+0x36>
     a80:	00 0f       	add	r16, r16
     a82:	11 1f       	adc	r17, r17
     a84:	6a 95       	dec	r22
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a88:	6c 2f       	mov	r22, r28
     a8a:	8f 2d       	mov	r24, r15
     a8c:	e2 d5       	rcall	.+3012   	; 0x1652 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a8e:	d1 30       	cpi	r29, 0x01	; 1
     a90:	21 f0       	breq	.+8      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x4c>
     a92:	28 f0       	brcs	.+10     	; 0xa9e <gfx_mono_st7565r_draw_pixel+0x50>
     a94:	d2 30       	cpi	r29, 0x02	; 2
     a96:	31 f0       	breq	.+12     	; 0xaa4 <gfx_mono_st7565r_draw_pixel+0x56>
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a9a:	80 2b       	or	r24, r16
		break;
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a9e:	00 95       	com	r16
     aa0:	80 23       	and	r24, r16
		break;
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     aa4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     aa6:	48 2f       	mov	r20, r24
     aa8:	6c 2f       	mov	r22, r28
     aaa:	8f 2d       	mov	r24, r15
     aac:	e7 de       	rcall	.-562    	; 0x87c <gfx_mono_st7565r_put_byte>
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	08 95       	ret

00000aba <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aba:	cb c5       	rjmp	.+2966   	; 0x1652 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     abc:	08 95       	ret

00000abe <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     abe:	81 15       	cp	r24, r1
     ac0:	22 e0       	ldi	r18, 0x02	; 2
     ac2:	92 07       	cpc	r25, r18
     ac4:	61 f4       	brne	.+24     	; 0xade <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     ac6:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <adca_enable_count>
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	98 0f       	add	r25, r24
     ace:	90 93 21 22 	sts	0x2221, r25	; 0x802221 <adca_enable_count>
     ad2:	81 11       	cpse	r24, r1
     ad4:	12 c0       	rjmp	.+36     	; 0xafa <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     ad6:	62 e0       	ldi	r22, 0x02	; 2
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	45 c6       	rjmp	.+3210   	; 0x1766 <sysclk_enable_module>
     adc:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     ade:	80 34       	cpi	r24, 0x40	; 64
     ae0:	92 40       	sbci	r25, 0x02	; 2
     ae2:	59 f4       	brne	.+22     	; 0xafa <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     ae4:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <adcb_enable_count>
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	98 0f       	add	r25, r24
     aec:	90 93 20 22 	sts	0x2220, r25	; 0x802220 <adcb_enable_count>
     af0:	81 11       	cpse	r24, r1
     af2:	03 c0       	rjmp	.+6      	; 0xafa <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     af4:	62 e0       	ldi	r22, 0x02	; 2
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	36 c6       	rjmp	.+3180   	; 0x1766 <sysclk_enable_module>
     afa:	08 95       	ret

00000afc <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     afc:	81 15       	cp	r24, r1
     afe:	22 e0       	ldi	r18, 0x02	; 2
     b00:	92 07       	cpc	r25, r18
     b02:	59 f4       	brne	.+22     	; 0xb1a <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     b04:	80 91 21 22 	lds	r24, 0x2221	; 0x802221 <adca_enable_count>
     b08:	81 50       	subi	r24, 0x01	; 1
     b0a:	80 93 21 22 	sts	0x2221, r24	; 0x802221 <adca_enable_count>
     b0e:	81 11       	cpse	r24, r1
     b10:	11 c0       	rjmp	.+34     	; 0xb34 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	3d c6       	rjmp	.+3194   	; 0x1792 <sysclk_disable_module>
     b18:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     b1a:	80 34       	cpi	r24, 0x40	; 64
     b1c:	92 40       	sbci	r25, 0x02	; 2
     b1e:	51 f4       	brne	.+20     	; 0xb34 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     b20:	80 91 20 22 	lds	r24, 0x2220	; 0x802220 <adcb_enable_count>
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	80 93 20 22 	sts	0x2220, r24	; 0x802220 <adcb_enable_count>
     b2a:	81 11       	cpse	r24, r1
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     b2e:	62 e0       	ldi	r22, 0x02	; 2
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	2f c6       	rjmp	.+3166   	; 0x1792 <sysclk_disable_module>
     b34:	08 95       	ret

00000b36 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	1f 92       	push	r1
     b42:	1f 92       	push	r1
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b4a:	8f b7       	in	r24, 0x3f	; 63
     b4c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b4e:	f8 94       	cli
	return flags;
     b50:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     b52:	c7 01       	movw	r24, r14
     b54:	b4 df       	rcall	.-152    	; 0xabe <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     b56:	f7 01       	movw	r30, r14
     b58:	80 81       	ld	r24, Z
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b5e:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     b60:	80 91 f2 22 	lds	r24, 0x22F2	; 0x8022f2 <sleepmgr_locks+0x1>
     b64:	8f 3f       	cpi	r24, 0xFF	; 255
     b66:	09 f4       	brne	.+2      	; 0xb6a <adc_enable+0x34>
     b68:	ff cf       	rjmp	.-2      	; 0xb68 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b6a:	8f b7       	in	r24, 0x3f	; 63
     b6c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     b6e:	f8 94       	cli
	return flags;
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     b72:	e1 ef       	ldi	r30, 0xF1	; 241
     b74:	f2 e2       	ldi	r31, 0x22	; 34
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b7c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     b8e:	cf 92       	push	r12
     b90:	df 92       	push	r13
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ba0:	d9 01       	movw	r26, r18
     ba2:	c8 01       	movw	r24, r16
     ba4:	b6 95       	lsr	r27
     ba6:	a7 95       	ror	r26
     ba8:	97 95       	ror	r25
     baa:	87 95       	ror	r24
     bac:	48 17       	cp	r20, r24
     bae:	59 07       	cpc	r21, r25
     bb0:	6a 07       	cpc	r22, r26
     bb2:	7b 07       	cpc	r23, r27
     bb4:	70 f4       	brcc	.+28     	; 0xbd2 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     bb6:	6a 01       	movw	r12, r20
     bb8:	7b 01       	movw	r14, r22
     bba:	cc 0c       	add	r12, r12
     bbc:	dd 1c       	adc	r13, r13
     bbe:	ee 1c       	adc	r14, r14
     bc0:	ff 1c       	adc	r15, r15
     bc2:	c9 01       	movw	r24, r18
     bc4:	b8 01       	movw	r22, r16
     bc6:	a7 01       	movw	r20, r14
     bc8:	96 01       	movw	r18, r12
     bca:	de d7       	rcall	.+4028   	; 0x1b88 <__udivmodsi4>
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	31 09       	sbc	r19, r1
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     bd6:	83 2f       	mov	r24, r19
     bd8:	8f 70       	andi	r24, 0x0F	; 15
     bda:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     bdc:	2e 83       	std	Y+6, r18	; 0x06
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	ff 90       	pop	r15
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	08 95       	ret

00000bf0 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	1f 92       	push	r1
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	7c 01       	movw	r14, r24
     c06:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	09 f4       	brne	.+2      	; 0xc0e <usart_init_spi+0x1e>
     c0c:	b2 c1       	rjmp	.+868    	; 0xf72 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     c0e:	80 3c       	cpi	r24, 0xC0	; 192
     c10:	91 05       	cpc	r25, r1
     c12:	21 f4       	brne	.+8      	; 0xc1c <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     c14:	60 e1       	ldi	r22, 0x10	; 16
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	a6 d5       	rcall	.+2892   	; 0x1766 <sysclk_enable_module>
     c1a:	ab c1       	rjmp	.+854    	; 0xf72 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     c1c:	80 e8       	ldi	r24, 0x80	; 128
     c1e:	e8 16       	cp	r14, r24
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	f8 06       	cpc	r15, r24
     c24:	21 f4       	brne	.+8      	; 0xc2e <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	9d d5       	rcall	.+2874   	; 0x1766 <sysclk_enable_module>
     c2c:	a2 c1       	rjmp	.+836    	; 0xf72 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     c2e:	e1 14       	cp	r14, r1
     c30:	e1 e0       	ldi	r30, 0x01	; 1
     c32:	fe 06       	cpc	r15, r30
     c34:	21 f4       	brne	.+8      	; 0xc3e <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	95 d5       	rcall	.+2858   	; 0x1766 <sysclk_enable_module>
     c3c:	9a c1       	rjmp	.+820    	; 0xf72 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     c3e:	f0 e8       	ldi	r31, 0x80	; 128
     c40:	ef 16       	cp	r14, r31
     c42:	f3 e0       	ldi	r31, 0x03	; 3
     c44:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     c46:	21 f4       	brne	.+8      	; 0xc50 <usart_init_spi+0x60>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	8c d5       	rcall	.+2840   	; 0x1766 <sysclk_enable_module>
     c4e:	91 c1       	rjmp	.+802    	; 0xf72 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     c50:	30 e9       	ldi	r19, 0x90	; 144
     c52:	e3 16       	cp	r14, r19
     c54:	33 e0       	ldi	r19, 0x03	; 3
     c56:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     c58:	21 f4       	brne	.+8      	; 0xc62 <usart_init_spi+0x72>
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	83 d5       	rcall	.+2822   	; 0x1766 <sysclk_enable_module>
     c60:	88 c1       	rjmp	.+784    	; 0xf72 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     c62:	e1 14       	cp	r14, r1
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     c68:	21 f4       	brne	.+8      	; 0xc72 <usart_init_spi+0x82>
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	7b d5       	rcall	.+2806   	; 0x1766 <sysclk_enable_module>
     c70:	80 c1       	rjmp	.+768    	; 0xf72 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     c72:	e0 e4       	ldi	r30, 0x40	; 64
     c74:	ee 16       	cp	r14, r30
     c76:	e2 e0       	ldi	r30, 0x02	; 2
     c78:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     c7a:	21 f4       	brne	.+8      	; 0xc84 <usart_init_spi+0x94>
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	72 d5       	rcall	.+2788   	; 0x1766 <sysclk_enable_module>
     c82:	77 c1       	rjmp	.+750    	; 0xf72 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     c84:	f0 e2       	ldi	r31, 0x20	; 32
     c86:	ef 16       	cp	r14, r31
     c88:	f3 e0       	ldi	r31, 0x03	; 3
     c8a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     c8c:	21 f4       	brne	.+8      	; 0xc96 <usart_init_spi+0xa6>
     c8e:	64 e0       	ldi	r22, 0x04	; 4
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	69 d5       	rcall	.+2770   	; 0x1766 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     c94:	6e c1       	rjmp	.+732    	; 0xf72 <usart_init_spi+0x382>
     c96:	e1 14       	cp	r14, r1
     c98:	38 e0       	ldi	r19, 0x08	; 8
     c9a:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     c9c:	21 f4       	brne	.+8      	; 0xca6 <usart_init_spi+0xb6>
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	61 d5       	rcall	.+2754   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     ca4:	66 c1       	rjmp	.+716    	; 0xf72 <usart_init_spi+0x382>
     ca6:	e1 14       	cp	r14, r1
     ca8:	89 e0       	ldi	r24, 0x09	; 9
     caa:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     cac:	21 f4       	brne	.+8      	; 0xcb6 <usart_init_spi+0xc6>
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	59 d5       	rcall	.+2738   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     cb4:	5e c1       	rjmp	.+700    	; 0xf72 <usart_init_spi+0x382>
     cb6:	e1 14       	cp	r14, r1
     cb8:	ea e0       	ldi	r30, 0x0A	; 10
     cba:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     cbc:	21 f4       	brne	.+8      	; 0xcc6 <usart_init_spi+0xd6>
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	51 d5       	rcall	.+2722   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     cc4:	56 c1       	rjmp	.+684    	; 0xf72 <usart_init_spi+0x382>
     cc6:	e1 14       	cp	r14, r1
     cc8:	fb e0       	ldi	r31, 0x0B	; 11
     cca:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <usart_init_spi+0xe6>
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	86 e0       	ldi	r24, 0x06	; 6
     cd2:	49 d5       	rcall	.+2706   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     cd4:	4e c1       	rjmp	.+668    	; 0xf72 <usart_init_spi+0x382>
     cd6:	30 e4       	ldi	r19, 0x40	; 64
     cd8:	e3 16       	cp	r14, r19
     cda:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     cdc:	f3 06       	cpc	r15, r19
     cde:	21 f4       	brne	.+8      	; 0xce8 <usart_init_spi+0xf8>
     ce0:	62 e0       	ldi	r22, 0x02	; 2
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	40 d5       	rcall	.+2688   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     ce6:	45 c1       	rjmp	.+650    	; 0xf72 <usart_init_spi+0x382>
     ce8:	80 e4       	ldi	r24, 0x40	; 64
     cea:	e8 16       	cp	r14, r24
     cec:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     cee:	f8 06       	cpc	r15, r24
     cf0:	21 f4       	brne	.+8      	; 0xcfa <usart_init_spi+0x10a>
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	37 d5       	rcall	.+2670   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     cf8:	3c c1       	rjmp	.+632    	; 0xf72 <usart_init_spi+0x382>
     cfa:	e0 e4       	ldi	r30, 0x40	; 64
     cfc:	ee 16       	cp	r14, r30
     cfe:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     d00:	fe 06       	cpc	r15, r30
     d02:	21 f4       	brne	.+8      	; 0xd0c <usart_init_spi+0x11c>
     d04:	62 e0       	ldi	r22, 0x02	; 2
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	2e d5       	rcall	.+2652   	; 0x1766 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     d0a:	33 c1       	rjmp	.+614    	; 0xf72 <usart_init_spi+0x382>
     d0c:	f0 e9       	ldi	r31, 0x90	; 144
     d0e:	ef 16       	cp	r14, r31
     d10:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     d12:	ff 06       	cpc	r15, r31
     d14:	21 f4       	brne	.+8      	; 0xd1e <usart_init_spi+0x12e>
     d16:	64 e0       	ldi	r22, 0x04	; 4
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	25 d5       	rcall	.+2634   	; 0x1766 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     d1c:	2a c1       	rjmp	.+596    	; 0xf72 <usart_init_spi+0x382>
     d1e:	30 e9       	ldi	r19, 0x90	; 144
     d20:	e3 16       	cp	r14, r19
     d22:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     d24:	f3 06       	cpc	r15, r19
     d26:	21 f4       	brne	.+8      	; 0xd30 <usart_init_spi+0x140>
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     d2c:	1c d5       	rcall	.+2616   	; 0x1766 <sysclk_enable_module>
     d2e:	21 c1       	rjmp	.+578    	; 0xf72 <usart_init_spi+0x382>
     d30:	80 e9       	ldi	r24, 0x90	; 144
     d32:	e8 16       	cp	r14, r24
     d34:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     d36:	f8 06       	cpc	r15, r24
     d38:	21 f4       	brne	.+8      	; 0xd42 <usart_init_spi+0x152>
     d3a:	64 e0       	ldi	r22, 0x04	; 4
     d3c:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     d3e:	13 d5       	rcall	.+2598   	; 0x1766 <sysclk_enable_module>
     d40:	18 c1       	rjmp	.+560    	; 0xf72 <usart_init_spi+0x382>
     d42:	e0 e9       	ldi	r30, 0x90	; 144
     d44:	ee 16       	cp	r14, r30
     d46:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     d48:	fe 06       	cpc	r15, r30
     d4a:	21 f4       	brne	.+8      	; 0xd54 <usart_init_spi+0x164>
     d4c:	64 e0       	ldi	r22, 0x04	; 4
     d4e:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     d50:	0a d5       	rcall	.+2580   	; 0x1766 <sysclk_enable_module>
     d52:	0f c1       	rjmp	.+542    	; 0xf72 <usart_init_spi+0x382>
     d54:	f0 ec       	ldi	r31, 0xC0	; 192
     d56:	ef 16       	cp	r14, r31
     d58:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     d5a:	ff 06       	cpc	r15, r31
     d5c:	21 f4       	brne	.+8      	; 0xd66 <usart_init_spi+0x176>
     d5e:	68 e0       	ldi	r22, 0x08	; 8
     d60:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     d62:	01 d5       	rcall	.+2562   	; 0x1766 <sysclk_enable_module>
     d64:	06 c1       	rjmp	.+524    	; 0xf72 <usart_init_spi+0x382>
     d66:	30 ec       	ldi	r19, 0xC0	; 192
     d68:	e3 16       	cp	r14, r19
     d6a:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     d6c:	f3 06       	cpc	r15, r19
     d6e:	21 f4       	brne	.+8      	; 0xd78 <usart_init_spi+0x188>
     d70:	68 e0       	ldi	r22, 0x08	; 8
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	f8 d4       	rcall	.+2544   	; 0x1766 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     d76:	fd c0       	rjmp	.+506    	; 0xf72 <usart_init_spi+0x382>
     d78:	80 ea       	ldi	r24, 0xA0	; 160
     d7a:	e8 16       	cp	r14, r24
     d7c:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     d7e:	f8 06       	cpc	r15, r24
     d80:	61 f4       	brne	.+24     	; 0xd9a <usart_init_spi+0x1aa>
     d82:	60 e1       	ldi	r22, 0x10	; 16
     d84:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     d86:	ef d4       	rcall	.+2526   	; 0x1766 <sysclk_enable_module>
     d88:	e0 ea       	ldi	r30, 0xA0	; 160
     d8a:	f8 e0       	ldi	r31, 0x08	; 8
     d8c:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     d8e:	8f 7e       	andi	r24, 0xEF	; 239
     d90:	84 83       	std	Z+4, r24	; 0x04
     d92:	f8 01       	movw	r30, r16
     d94:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     d96:	22 50       	subi	r18, 0x02	; 2
     d98:	4c c0       	rjmp	.+152    	; 0xe32 <usart_init_spi+0x242>
     d9a:	f0 ea       	ldi	r31, 0xA0	; 160
     d9c:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     d9e:	f9 e0       	ldi	r31, 0x09	; 9
     da0:	ff 06       	cpc	r15, r31
     da2:	21 f4       	brne	.+8      	; 0xdac <usart_init_spi+0x1bc>
     da4:	60 e1       	ldi	r22, 0x10	; 16
     da6:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     da8:	de d4       	rcall	.+2492   	; 0x1766 <sysclk_enable_module>
     daa:	e3 c0       	rjmp	.+454    	; 0xf72 <usart_init_spi+0x382>
     dac:	30 ea       	ldi	r19, 0xA0	; 160
     dae:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     db0:	3a e0       	ldi	r19, 0x0A	; 10
     db2:	f3 06       	cpc	r15, r19
     db4:	21 f4       	brne	.+8      	; 0xdbe <usart_init_spi+0x1ce>
     db6:	60 e1       	ldi	r22, 0x10	; 16
     db8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     dba:	d5 d4       	rcall	.+2474   	; 0x1766 <sysclk_enable_module>
     dbc:	da c0       	rjmp	.+436    	; 0xf72 <usart_init_spi+0x382>
     dbe:	80 ea       	ldi	r24, 0xA0	; 160
     dc0:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     dc2:	8b e0       	ldi	r24, 0x0B	; 11
     dc4:	f8 06       	cpc	r15, r24
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <usart_init_spi+0x1e0>
     dc8:	60 e1       	ldi	r22, 0x10	; 16
     dca:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     dcc:	cc d4       	rcall	.+2456   	; 0x1766 <sysclk_enable_module>
     dce:	d1 c0       	rjmp	.+418    	; 0xf72 <usart_init_spi+0x382>
     dd0:	e0 eb       	ldi	r30, 0xB0	; 176
     dd2:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     dd4:	e8 e0       	ldi	r30, 0x08	; 8
     dd6:	fe 06       	cpc	r15, r30
     dd8:	21 f4       	brne	.+8      	; 0xde2 <usart_init_spi+0x1f2>
     dda:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	c3 d4       	rcall	.+2438   	; 0x1766 <sysclk_enable_module>
     de0:	c8 c0       	rjmp	.+400    	; 0xf72 <usart_init_spi+0x382>
     de2:	f0 eb       	ldi	r31, 0xB0	; 176
     de4:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     de6:	f9 e0       	ldi	r31, 0x09	; 9
     de8:	ff 06       	cpc	r15, r31
     dea:	21 f4       	brne	.+8      	; 0xdf4 <usart_init_spi+0x204>
     dec:	60 e2       	ldi	r22, 0x20	; 32
     dee:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     df0:	ba d4       	rcall	.+2420   	; 0x1766 <sysclk_enable_module>
     df2:	bf c0       	rjmp	.+382    	; 0xf72 <usart_init_spi+0x382>
     df4:	30 e8       	ldi	r19, 0x80	; 128
     df6:	e3 16       	cp	r14, r19
     df8:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     dfa:	f3 06       	cpc	r15, r19
     dfc:	21 f4       	brne	.+8      	; 0xe06 <usart_init_spi+0x216>
     dfe:	60 e4       	ldi	r22, 0x40	; 64
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	b1 d4       	rcall	.+2402   	; 0x1766 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     e04:	b6 c0       	rjmp	.+364    	; 0xf72 <usart_init_spi+0x382>
     e06:	80 ea       	ldi	r24, 0xA0	; 160
     e08:	e8 16       	cp	r14, r24
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     e0e:	21 f4       	brne	.+8      	; 0xe18 <usart_init_spi+0x228>
     e10:	60 e4       	ldi	r22, 0x40	; 64
     e12:	85 e0       	ldi	r24, 0x05	; 5
     e14:	a8 d4       	rcall	.+2384   	; 0x1766 <sysclk_enable_module>
     e16:	ad c0       	rjmp	.+346    	; 0xf72 <usart_init_spi+0x382>
     e18:	f7 01       	movw	r30, r14
     e1a:	84 81       	ldd	r24, Z+4	; 0x04
     e1c:	8f 7e       	andi	r24, 0xEF	; 239
     e1e:	84 83       	std	Z+4, r24	; 0x04
     e20:	fb 01       	movw	r30, r22
     e22:	24 81       	ldd	r18, Z+4	; 0x04
     e24:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     e26:	c7 01       	movw	r24, r14
     e28:	f0 ea       	ldi	r31, 0xA0	; 160
     e2a:	ef 16       	cp	r14, r31
     e2c:	f8 e0       	ldi	r31, 0x08	; 8
     e2e:	ff 06       	cpc	r15, r31
     e30:	49 f4       	brne	.+18     	; 0xe44 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     e32:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     e36:	84 fd       	sbrc	r24, 4
     e38:	a5 c0       	rjmp	.+330    	; 0xf84 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     e3a:	0f 2e       	mov	r0, r31
     e3c:	f1 e1       	ldi	r31, 0x11	; 17
     e3e:	df 2e       	mov	r13, r31
     e40:	f0 2d       	mov	r31, r0
     e42:	a4 c0       	rjmp	.+328    	; 0xf8c <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     e44:	80 3b       	cpi	r24, 0xB0	; 176
     e46:	38 e0       	ldi	r19, 0x08	; 8
     e48:	93 07       	cpc	r25, r19
     e4a:	91 f0       	breq	.+36     	; 0xe70 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     e4c:	80 3a       	cpi	r24, 0xA0	; 160
     e4e:	e9 e0       	ldi	r30, 0x09	; 9
     e50:	9e 07       	cpc	r25, r30
     e52:	49 f4       	brne	.+18     	; 0xe66 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     e54:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     e58:	34 fd       	sbrc	r19, 4
     e5a:	9b c0       	rjmp	.+310    	; 0xf92 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     e5c:	0f 2e       	mov	r0, r31
     e5e:	f9 e1       	ldi	r31, 0x19	; 25
     e60:	df 2e       	mov	r13, r31
     e62:	f0 2d       	mov	r31, r0
     e64:	16 c0       	rjmp	.+44     	; 0xe92 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     e66:	80 3b       	cpi	r24, 0xB0	; 176
     e68:	f9 e0       	ldi	r31, 0x09	; 9
     e6a:	9f 07       	cpc	r25, r31
     e6c:	f1 f0       	breq	.+60     	; 0xeaa <usart_init_spi+0x2ba>
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     e70:	0f 2e       	mov	r0, r31
     e72:	f5 e1       	ldi	r31, 0x15	; 21
     e74:	df 2e       	mov	r13, r31
     e76:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     e78:	80 3a       	cpi	r24, 0xA0	; 160
     e7a:	3a e0       	ldi	r19, 0x0A	; 10
     e7c:	93 07       	cpc	r25, r19
     e7e:	49 f4       	brne	.+18     	; 0xe92 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     e80:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     e84:	84 fd       	sbrc	r24, 4
     e86:	8a c0       	rjmp	.+276    	; 0xf9c <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     e88:	0f 2e       	mov	r0, r31
     e8a:	f1 e2       	ldi	r31, 0x21	; 33
     e8c:	df 2e       	mov	r13, r31
     e8e:	f0 2d       	mov	r31, r0
     e90:	15 c0       	rjmp	.+42     	; 0xebc <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     e92:	80 3a       	cpi	r24, 0xA0	; 160
     e94:	9b 40       	sbci	r25, 0x0B	; 11
     e96:	91 f4       	brne	.+36     	; 0xebc <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     e98:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     e9c:	84 fd       	sbrc	r24, 4
     e9e:	0a c0       	rjmp	.+20     	; 0xeb4 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     ea0:	0f 2e       	mov	r0, r31
     ea2:	f9 e2       	ldi	r31, 0x29	; 41
     ea4:	df 2e       	mov	r13, r31
     ea6:	f0 2d       	mov	r31, r0
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     eaa:	0f 2e       	mov	r0, r31
     eac:	fd e1       	ldi	r31, 0x1D	; 29
     eae:	df 2e       	mov	r13, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     eb4:	0f 2e       	mov	r0, r31
     eb6:	fd e2       	ldi	r31, 0x2D	; 45
     eb8:	df 2e       	mov	r13, r31
     eba:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     ebc:	ed 2d       	mov	r30, r13
     ebe:	e6 95       	lsr	r30
     ec0:	e6 95       	lsr	r30
     ec2:	e6 95       	lsr	r30
     ec4:	30 e2       	ldi	r19, 0x20	; 32
     ec6:	e3 9f       	mul	r30, r19
     ec8:	f0 01       	movw	r30, r0
     eca:	11 24       	eor	r1, r1
     ecc:	fa 5f       	subi	r31, 0xFA	; 250
     ece:	3d 2d       	mov	r19, r13
     ed0:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	03 2e       	mov	r0, r19
     ed8:	02 c0       	rjmp	.+4      	; 0xede <usart_init_spi+0x2ee>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     ee2:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	10 f0       	brcs	.+4      	; 0xeec <usart_init_spi+0x2fc>
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	01 c0       	rjmp	.+2      	; 0xeee <usart_init_spi+0x2fe>
     eec:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     eee:	df 01       	movw	r26, r30
     ef0:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     ef2:	a3 0f       	add	r26, r19
     ef4:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ef6:	9f b7       	in	r25, 0x3f	; 63
     ef8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     efa:	f8 94       	cli
	return flags;
     efc:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     efe:	2c 91       	ld	r18, X
     f00:	27 70       	andi	r18, 0x07	; 7
     f02:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     f04:	9c 91       	ld	r25, X
     f06:	94 2b       	or	r25, r20
     f08:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f0a:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     f0c:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     f0e:	f7 01       	movw	r30, r14
     f10:	85 81       	ldd	r24, Z+5	; 0x05
     f12:	80 6c       	ori	r24, 0xC0	; 192
     f14:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     f16:	f8 01       	movw	r30, r16
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	8d 7f       	andi	r24, 0xFD	; 253
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	29 f4       	brne	.+10     	; 0xf2a <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     f20:	f7 01       	movw	r30, r14
     f22:	85 81       	ldd	r24, Z+5	; 0x05
     f24:	82 60       	ori	r24, 0x02	; 2
     f26:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <usart_init_spi+0x342>
     f2a:	f7 01       	movw	r30, r14
     f2c:	85 81       	ldd	r24, Z+5	; 0x05
     f2e:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     f30:	85 83       	std	Z+5, r24	; 0x05
     f32:	f8 01       	movw	r30, r16
     f34:	85 81       	ldd	r24, Z+5	; 0x05
     f36:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     f38:	29 f0       	breq	.+10     	; 0xf44 <usart_init_spi+0x354>
     f3a:	f7 01       	movw	r30, r14
     f3c:	85 81       	ldd	r24, Z+5	; 0x05
     f3e:	84 60       	ori	r24, 0x04	; 4
     f40:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <usart_init_spi+0x35c>
     f44:	f7 01       	movw	r30, r14
     f46:	85 81       	ldd	r24, Z+5	; 0x05
     f48:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     f4a:	85 83       	std	Z+5, r24	; 0x05
     f4c:	f8 01       	movw	r30, r16
     f4e:	40 81       	ld	r20, Z
     f50:	51 81       	ldd	r21, Z+1	; 0x01
     f52:	62 81       	ldd	r22, Z+2	; 0x02
     f54:	73 81       	ldd	r23, Z+3	; 0x03
     f56:	00 e8       	ldi	r16, 0x80	; 128
     f58:	14 e8       	ldi	r17, 0x84	; 132
     f5a:	2e e1       	ldi	r18, 0x1E	; 30
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c7 01       	movw	r24, r14
     f60:	16 de       	rcall	.-980    	; 0xb8e <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     f62:	f7 01       	movw	r30, r14
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	88 60       	ori	r24, 0x08	; 8
     f68:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	80 61       	ori	r24, 0x10	; 16
     f6e:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     f70:	1a c0       	rjmp	.+52     	; 0xfa6 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     f72:	f7 01       	movw	r30, r14
     f74:	84 81       	ldd	r24, Z+4	; 0x04
     f76:	8f 7e       	andi	r24, 0xEF	; 239
     f78:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     f7a:	f8 01       	movw	r30, r16
     f7c:	24 81       	ldd	r18, Z+4	; 0x04
     f7e:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     f80:	c7 01       	movw	r24, r14
     f82:	60 cf       	rjmp	.-320    	; 0xe44 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     f84:	0f 2e       	mov	r0, r31
     f86:	f5 e1       	ldi	r31, 0x15	; 21
     f88:	df 2e       	mov	r13, r31
     f8a:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f8c:	80 ea       	ldi	r24, 0xA0	; 160
     f8e:	98 e0       	ldi	r25, 0x08	; 8
     f90:	6a cf       	rjmp	.-300    	; 0xe66 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     f92:	0f 2e       	mov	r0, r31
     f94:	fd e1       	ldi	r31, 0x1D	; 29
     f96:	df 2e       	mov	r13, r31
     f98:	f0 2d       	mov	r31, r0
     f9a:	7b cf       	rjmp	.-266    	; 0xe92 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     f9c:	0f 2e       	mov	r0, r31
     f9e:	f5 e2       	ldi	r31, 0x25	; 37
     fa0:	df 2e       	mov	r13, r31
     fa2:	f0 2d       	mov	r31, r0
     fa4:	8b cf       	rjmp	.-234    	; 0xebc <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     fa6:	0f 90       	pop	r0
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	08 95       	ret

00000fb8 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     fde:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
     fe2:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
     fe6:	e0 91 ef 22 	lds	r30, 0x22EF	; 0x8022ef <adca_callback>
     fea:	f0 91 f0 22 	lds	r31, 0x22F0	; 0x8022f0 <adca_callback+0x1>
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	19 95       	eicall
}
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0b be       	out	0x3b, r0	; 59
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	0b b6       	in	r0, 0x3b	; 59
    1028:	0f 92       	push	r0
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1042:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7be22c>
    1046:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7be22d>
    104a:	e0 91 ef 22 	lds	r30, 0x22EF	; 0x8022ef <adca_callback>
    104e:	f0 91 f0 22 	lds	r31, 0x22F0	; 0x8022f0 <adca_callback+0x1>
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	19 95       	eicall
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0b be       	out	0x3b, r0	; 59
    1076:	0f 90       	pop	r0
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	0f 90       	pop	r0
    107c:	1f 90       	pop	r1
    107e:	18 95       	reti

00001080 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1080:	1f 92       	push	r1
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	0f 92       	push	r0
    1088:	11 24       	eor	r1, r1
    108a:	0b b6       	in	r0, 0x3b	; 59
    108c:	0f 92       	push	r0
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	ef 93       	push	r30
    10a4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    10a6:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7be234>
    10aa:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7be235>
    10ae:	e0 91 ef 22 	lds	r30, 0x22EF	; 0x8022ef <adca_callback>
    10b2:	f0 91 f0 22 	lds	r31, 0x22F0	; 0x8022f0 <adca_callback+0x1>
    10b6:	64 e0       	ldi	r22, 0x04	; 4
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	19 95       	eicall
}
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	0b b6       	in	r0, 0x3b	; 59
    10f0:	0f 92       	push	r0
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    110a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7be23c>
    110e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7be23d>
    1112:	e0 91 ef 22 	lds	r30, 0x22EF	; 0x8022ef <adca_callback>
    1116:	f0 91 f0 22 	lds	r31, 0x22F0	; 0x8022f0 <adca_callback+0x1>
    111a:	68 e0       	ldi	r22, 0x08	; 8
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	19 95       	eicall
}
    1122:	ff 91       	pop	r31
    1124:	ef 91       	pop	r30
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	0b b6       	in	r0, 0x3b	; 59
    1154:	0f 92       	push	r0
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    116e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7be264>
    1172:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7be265>
    1176:	e0 91 ed 22 	lds	r30, 0x22ED	; 0x8022ed <adcb_callback>
    117a:	f0 91 ee 22 	lds	r31, 0x22EE	; 0x8022ee <adcb_callback+0x1>
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	92 e0       	ldi	r25, 0x02	; 2
    1184:	19 95       	eicall
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0b b6       	in	r0, 0x3b	; 59
    11b8:	0f 92       	push	r0
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    11d2:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7be26c>
    11d6:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7be26d>
    11da:	e0 91 ed 22 	lds	r30, 0x22ED	; 0x8022ed <adcb_callback>
    11de:	f0 91 ee 22 	lds	r31, 0x22EE	; 0x8022ee <adcb_callback+0x1>
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	80 e4       	ldi	r24, 0x40	; 64
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	19 95       	eicall
}
    11ea:	ff 91       	pop	r31
    11ec:	ef 91       	pop	r30
    11ee:	bf 91       	pop	r27
    11f0:	af 91       	pop	r26
    11f2:	9f 91       	pop	r25
    11f4:	8f 91       	pop	r24
    11f6:	7f 91       	pop	r23
    11f8:	6f 91       	pop	r22
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0b be       	out	0x3b, r0	; 59
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	0b b6       	in	r0, 0x3b	; 59
    121c:	0f 92       	push	r0
    121e:	2f 93       	push	r18
    1220:	3f 93       	push	r19
    1222:	4f 93       	push	r20
    1224:	5f 93       	push	r21
    1226:	6f 93       	push	r22
    1228:	7f 93       	push	r23
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	af 93       	push	r26
    1230:	bf 93       	push	r27
    1232:	ef 93       	push	r30
    1234:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1236:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7be274>
    123a:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7be275>
    123e:	e0 91 ed 22 	lds	r30, 0x22ED	; 0x8022ed <adcb_callback>
    1242:	f0 91 ee 22 	lds	r31, 0x22EE	; 0x8022ee <adcb_callback+0x1>
    1246:	64 e0       	ldi	r22, 0x04	; 4
    1248:	80 e4       	ldi	r24, 0x40	; 64
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	19 95       	eicall
}
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	0f 90       	pop	r0
    1268:	0b be       	out	0x3b, r0	; 59
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	0b b6       	in	r0, 0x3b	; 59
    1280:	0f 92       	push	r0
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    129a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7be27c>
    129e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7be27d>
    12a2:	e0 91 ed 22 	lds	r30, 0x22ED	; 0x8022ed <adcb_callback>
    12a6:	f0 91 ee 22 	lds	r31, 0x22EE	; 0x8022ee <adcb_callback+0x1>
    12aa:	68 e0       	ldi	r22, 0x08	; 8
    12ac:	80 e4       	ldi	r24, 0x40	; 64
    12ae:	92 e0       	ldi	r25, 0x02	; 2
    12b0:	19 95       	eicall
}
    12b2:	ff 91       	pop	r31
    12b4:	ef 91       	pop	r30
    12b6:	bf 91       	pop	r27
    12b8:	af 91       	pop	r26
    12ba:	9f 91       	pop	r25
    12bc:	8f 91       	pop	r24
    12be:	7f 91       	pop	r23
    12c0:	6f 91       	pop	r22
    12c2:	5f 91       	pop	r21
    12c4:	4f 91       	pop	r20
    12c6:	3f 91       	pop	r19
    12c8:	2f 91       	pop	r18
    12ca:	0f 90       	pop	r0
    12cc:	0b be       	out	0x3b, r0	; 59
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	1f 92       	push	r1
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8c 01       	movw	r16, r24
    12f2:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    12f4:	81 15       	cp	r24, r1
    12f6:	22 e0       	ldi	r18, 0x02	; 2
    12f8:	92 07       	cpc	r25, r18
    12fa:	71 f4       	brne	.+28     	; 0x1318 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    12fc:	61 e2       	ldi	r22, 0x21	; 33
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	5c d2       	rcall	.+1208   	; 0x17bc <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1304:	c8 2e       	mov	r12, r24
    1306:	d1 2c       	mov	r13, r1
    1308:	60 e2       	ldi	r22, 0x20	; 32
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	82 e0       	ldi	r24, 0x02	; 2
    130e:	56 d2       	rcall	.+1196   	; 0x17bc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    1310:	dc 2c       	mov	r13, r12
    1312:	cc 24       	eor	r12, r12
    1314:	c8 2a       	or	r12, r24
    1316:	10 c0       	rjmp	.+32     	; 0x1338 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1318:	80 34       	cpi	r24, 0x40	; 64
    131a:	92 40       	sbci	r25, 0x02	; 2
    131c:	c1 f5       	brne	.+112    	; 0x138e <adc_write_configuration+0xb6>
    131e:	65 e2       	ldi	r22, 0x25	; 37
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	4b d2       	rcall	.+1174   	; 0x17bc <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1326:	c8 2e       	mov	r12, r24
    1328:	d1 2c       	mov	r13, r1
    132a:	64 e2       	ldi	r22, 0x24	; 36
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	45 d2       	rcall	.+1162   	; 0x17bc <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1332:	dc 2c       	mov	r13, r12
    1334:	cc 24       	eor	r12, r12
    1336:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1338:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    133a:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    133c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    133e:	b9 80       	ldd	r11, Y+1	; 0x01
    1340:	c8 01       	movw	r24, r16
    1342:	bd db       	rcall	.-2182   	; 0xabe <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1344:	f8 01       	movw	r30, r16
    1346:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	90 83       	st	Z, r25
	adc->CAL = cal;
    134c:	c4 86       	std	Z+12, r12	; 0x0c
    134e:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    1350:	f7 01       	movw	r30, r14
    1352:	25 81       	ldd	r18, Z+5	; 0x05
    1354:	36 81       	ldd	r19, Z+6	; 0x06
    1356:	f8 01       	movw	r30, r16
    1358:	20 8f       	std	Z+24, r18	; 0x18
    135a:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    135c:	f7 01       	movw	r30, r14
    135e:	92 81       	ldd	r25, Z+2	; 0x02
    1360:	f8 01       	movw	r30, r16
    1362:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1364:	f7 01       	movw	r30, r14
    1366:	94 81       	ldd	r25, Z+4	; 0x04
    1368:	f8 01       	movw	r30, r16
    136a:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    136c:	f7 01       	movw	r30, r14
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	f8 01       	movw	r30, r16
    1372:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1374:	f7 01       	movw	r30, r14
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	f7 01       	movw	r30, r14
    1380:	90 81       	ld	r25, Z
    1382:	89 2b       	or	r24, r25
    1384:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1386:	80 83       	st	Z, r24
    1388:	c8 01       	movw	r24, r16
    138a:	b8 db       	rcall	.-2192   	; 0xafc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    138c:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    138e:	0f 90       	pop	r0
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	08 95       	ret

000013a4 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	1f 92       	push	r1
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	8c 01       	movw	r16, r24
    13ba:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    13bc:	8f b7       	in	r24, 0x3f	; 63
    13be:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    13c0:	f8 94       	cli
	return flags;
    13c2:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    13c4:	c8 01       	movw	r24, r16
    13c6:	7b db       	rcall	.-2314   	; 0xabe <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    13c8:	f8 01       	movw	r30, r16
    13ca:	80 81       	ld	r24, Z
    13cc:	80 7c       	andi	r24, 0xC0	; 192
    13ce:	f7 01       	movw	r30, r14
    13d0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    13d2:	f8 01       	movw	r30, r16
    13d4:	80 8d       	ldd	r24, Z+24	; 0x18
    13d6:	91 8d       	ldd	r25, Z+25	; 0x19
    13d8:	f7 01       	movw	r30, r14
    13da:	85 83       	std	Z+5, r24	; 0x05
    13dc:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    13de:	f8 01       	movw	r30, r16
    13e0:	82 81       	ldd	r24, Z+2	; 0x02
    13e2:	f7 01       	movw	r30, r14
    13e4:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    13e6:	f8 01       	movw	r30, r16
    13e8:	84 81       	ldd	r24, Z+4	; 0x04
    13ea:	f7 01       	movw	r30, r14
    13ec:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    13ee:	f8 01       	movw	r30, r16
    13f0:	83 81       	ldd	r24, Z+3	; 0x03
    13f2:	f7 01       	movw	r30, r14
    13f4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    13f6:	f8 01       	movw	r30, r16
    13f8:	81 81       	ldd	r24, Z+1	; 0x01
    13fa:	f7 01       	movw	r30, r14
    13fc:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    13fe:	c8 01       	movw	r24, r16
    1400:	7d db       	rcall	.-2310   	; 0xafc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1402:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1404:	0f 90       	pop	r0
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	08 95       	ret

00001416 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	1f 92       	push	r1
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	6c 01       	movw	r12, r24
    1432:	b6 2e       	mov	r11, r22
    1434:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1436:	86 2f       	mov	r24, r22
    1438:	83 70       	andi	r24, 0x03	; 3
    143a:	29 f4       	brne	.+10     	; 0x1446 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    143c:	96 2f       	mov	r25, r22
    143e:	96 95       	lsr	r25
    1440:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	02 c0       	rjmp	.+4      	; 0x144a <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1446:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1448:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    144a:	90 ff       	sbrs	r25, 0
		index++;
    144c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    144e:	86 01       	movw	r16, r12
    1450:	00 5e       	subi	r16, 0xE0	; 224
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	98 e0       	ldi	r25, 0x08	; 8
    1456:	89 9f       	mul	r24, r25
    1458:	00 0d       	add	r16, r0
    145a:	11 1d       	adc	r17, r1
    145c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    145e:	8f b7       	in	r24, 0x3f	; 63
    1460:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1462:	f8 94       	cli
	return flags;
    1464:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1466:	c6 01       	movw	r24, r12
    1468:	2a db       	rcall	.-2476   	; 0xabe <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    146a:	f7 01       	movw	r30, r14
    146c:	80 81       	ld	r24, Z
    146e:	f8 01       	movw	r30, r16
    1470:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1472:	f7 01       	movw	r30, r14
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	f8 01       	movw	r30, r16
    1478:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    147a:	f7 01       	movw	r30, r14
    147c:	81 81       	ldd	r24, Z+1	; 0x01
    147e:	f8 01       	movw	r30, r16
    1480:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1482:	b0 fe       	sbrs	r11, 0
    1484:	04 c0       	rjmp	.+8      	; 0x148e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1486:	f7 01       	movw	r30, r14
    1488:	83 81       	ldd	r24, Z+3	; 0x03
    148a:	f8 01       	movw	r30, r16
    148c:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    148e:	c6 01       	movw	r24, r12
    1490:	35 db       	rcall	.-2454   	; 0xafc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1492:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1494:	0f 90       	pop	r0
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	08 95       	ret

000014ac <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    14ac:	af 92       	push	r10
    14ae:	bf 92       	push	r11
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	1f 92       	push	r1
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	6c 01       	movw	r12, r24
    14c8:	b6 2e       	mov	r11, r22
    14ca:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14cc:	86 2f       	mov	r24, r22
    14ce:	83 70       	andi	r24, 0x03	; 3
    14d0:	29 f4       	brne	.+10     	; 0x14dc <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    14d2:	96 2f       	mov	r25, r22
    14d4:	96 95       	lsr	r25
    14d6:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    14dc:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    14de:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    14e0:	90 ff       	sbrs	r25, 0
		index++;
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    14e4:	86 01       	movw	r16, r12
    14e6:	00 5e       	subi	r16, 0xE0	; 224
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	98 e0       	ldi	r25, 0x08	; 8
    14ec:	89 9f       	mul	r24, r25
    14ee:	00 0d       	add	r16, r0
    14f0:	11 1d       	adc	r17, r1
    14f2:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    14f4:	8f b7       	in	r24, 0x3f	; 63
    14f6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    14f8:	f8 94       	cli
	return flags;
    14fa:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    14fc:	c6 01       	movw	r24, r12
    14fe:	df da       	rcall	.-2626   	; 0xabe <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1500:	f8 01       	movw	r30, r16
    1502:	80 81       	ld	r24, Z
    1504:	f7 01       	movw	r30, r14
    1506:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1508:	f8 01       	movw	r30, r16
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	f7 01       	movw	r30, r14
    150e:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1510:	f8 01       	movw	r30, r16
    1512:	81 81       	ldd	r24, Z+1	; 0x01
    1514:	f7 01       	movw	r30, r14
    1516:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1518:	b0 fe       	sbrs	r11, 0
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    151c:	f8 01       	movw	r30, r16
    151e:	86 81       	ldd	r24, Z+6	; 0x06
    1520:	f7 01       	movw	r30, r14
    1522:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1524:	c6 01       	movw	r24, r12
    1526:	ea da       	rcall	.-2604   	; 0xafc <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1528:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    152a:	0f 90       	pop	r0
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	bf 90       	pop	r11
    153e:	af 90       	pop	r10
    1540:	08 95       	ret

00001542 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1542:	80 3a       	cpi	r24, 0xA0	; 160
    1544:	28 e0       	ldi	r18, 0x08	; 8
    1546:	92 07       	cpc	r25, r18
    1548:	21 f4       	brne	.+8      	; 0x1552 <usart_spi_init+0x10>
    154a:	60 e1       	ldi	r22, 0x10	; 16
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	0b c1       	rjmp	.+534    	; 0x1766 <sysclk_enable_module>
    1550:	08 95       	ret
    1552:	80 3b       	cpi	r24, 0xB0	; 176
    1554:	28 e0       	ldi	r18, 0x08	; 8
    1556:	92 07       	cpc	r25, r18
    1558:	21 f4       	brne	.+8      	; 0x1562 <usart_spi_init+0x20>
    155a:	60 e2       	ldi	r22, 0x20	; 32
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	03 c1       	rjmp	.+518    	; 0x1766 <sysclk_enable_module>
    1560:	08 95       	ret
    1562:	80 3a       	cpi	r24, 0xA0	; 160
    1564:	29 e0       	ldi	r18, 0x09	; 9
    1566:	92 07       	cpc	r25, r18
    1568:	21 f4       	brne	.+8      	; 0x1572 <usart_spi_init+0x30>
    156a:	60 e1       	ldi	r22, 0x10	; 16
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	fb c0       	rjmp	.+502    	; 0x1766 <sysclk_enable_module>
    1570:	08 95       	ret
    1572:	80 3b       	cpi	r24, 0xB0	; 176
    1574:	29 e0       	ldi	r18, 0x09	; 9
    1576:	92 07       	cpc	r25, r18
    1578:	21 f4       	brne	.+8      	; 0x1582 <usart_spi_init+0x40>
    157a:	60 e2       	ldi	r22, 0x20	; 32
    157c:	84 e0       	ldi	r24, 0x04	; 4
    157e:	f3 c0       	rjmp	.+486    	; 0x1766 <sysclk_enable_module>
    1580:	08 95       	ret
    1582:	80 3a       	cpi	r24, 0xA0	; 160
    1584:	2a e0       	ldi	r18, 0x0A	; 10
    1586:	92 07       	cpc	r25, r18
    1588:	21 f4       	brne	.+8      	; 0x1592 <usart_spi_init+0x50>
    158a:	60 e1       	ldi	r22, 0x10	; 16
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	eb c0       	rjmp	.+470    	; 0x1766 <sysclk_enable_module>
    1590:	08 95       	ret
    1592:	80 3a       	cpi	r24, 0xA0	; 160
    1594:	9b 40       	sbci	r25, 0x0B	; 11
    1596:	19 f4       	brne	.+6      	; 0x159e <usart_spi_init+0x5c>
    1598:	60 e1       	ldi	r22, 0x10	; 16
    159a:	86 e0       	ldi	r24, 0x06	; 6
    159c:	e4 c0       	rjmp	.+456    	; 0x1766 <sysclk_enable_module>
    159e:	08 95       	ret

000015a0 <usart_spi_setup_device>:
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <usart_spi_setup_device+0xa>
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <usart_spi_setup_device+0xc>
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	1a 83       	std	Y+2, r17	; 0x02
    15b4:	2b 83       	std	Y+3, r18	; 0x03
    15b6:	3c 83       	std	Y+4, r19	; 0x04
    15b8:	4d 83       	std	Y+5, r20	; 0x05
    15ba:	1e 82       	std	Y+6, r1	; 0x06
    15bc:	be 01       	movw	r22, r28
    15be:	6f 5f       	subi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	16 db       	rcall	.-2516   	; 0xbf0 <usart_init_spi>
    15c4:	26 96       	adiw	r28, 0x06	; 6
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    15d4:	fb 01       	movw	r30, r22
    15d6:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    15d8:	e8 2f       	mov	r30, r24
    15da:	e6 95       	lsr	r30
    15dc:	e6 95       	lsr	r30
    15de:	e6 95       	lsr	r30
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	e4 9f       	mul	r30, r20
    15e4:	f0 01       	movw	r30, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	a9 01       	movw	r20, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <usart_spi_select_device+0x24>
    15f4:	44 0f       	add	r20, r20
    15f6:	55 1f       	adc	r21, r21
    15f8:	8a 95       	dec	r24
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    15fc:	46 83       	std	Z+6, r20	; 0x06
    15fe:	08 95       	ret

00001600 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1600:	fb 01       	movw	r30, r22
    1602:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1604:	e8 2f       	mov	r30, r24
    1606:	e6 95       	lsr	r30
    1608:	e6 95       	lsr	r30
    160a:	e6 95       	lsr	r30
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	e4 9f       	mul	r30, r20
    1610:	f0 01       	movw	r30, r0
    1612:	11 24       	eor	r1, r1
    1614:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1616:	87 70       	andi	r24, 0x07	; 7
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <usart_spi_deselect_device+0x24>
    1620:	44 0f       	add	r20, r20
    1622:	55 1f       	adc	r21, r21
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1628:	45 83       	std	Z+5, r20	; 0x05
    162a:	08 95       	ret

0000162c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    162c:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <fbpointer>
    1630:	90 93 23 22 	sts	0x2223, r25	; 0x802223 <fbpointer+0x1>
    1634:	08 95       	ret

00001636 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1636:	20 91 22 22 	lds	r18, 0x2222	; 0x802222 <fbpointer>
    163a:	30 91 23 22 	lds	r19, 0x2223	; 0x802223 <fbpointer+0x1>
    163e:	90 e8       	ldi	r25, 0x80	; 128
    1640:	89 9f       	mul	r24, r25
    1642:	20 0d       	add	r18, r0
    1644:	31 1d       	adc	r19, r1
    1646:	11 24       	eor	r1, r1
    1648:	f9 01       	movw	r30, r18
    164a:	e6 0f       	add	r30, r22
    164c:	f1 1d       	adc	r31, r1
    164e:	40 83       	st	Z, r20
    1650:	08 95       	ret

00001652 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1652:	20 91 22 22 	lds	r18, 0x2222	; 0x802222 <fbpointer>
    1656:	30 91 23 22 	lds	r19, 0x2223	; 0x802223 <fbpointer+0x1>
    165a:	90 e8       	ldi	r25, 0x80	; 128
    165c:	89 9f       	mul	r24, r25
    165e:	20 0d       	add	r18, r0
    1660:	31 1d       	adc	r19, r1
    1662:	11 24       	eor	r1, r1
    1664:	f9 01       	movw	r30, r18
    1666:	e6 0f       	add	r30, r22
    1668:	f1 1d       	adc	r31, r1
}
    166a:	80 81       	ld	r24, Z
    166c:	08 95       	ret

0000166e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	e4 2f       	mov	r30, r20
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	e8 0f       	add	r30, r24
    167e:	f1 1d       	adc	r31, r1
    1680:	e1 38       	cpi	r30, 0x81	; 129
    1682:	f1 05       	cpc	r31, r1
    1684:	1c f0       	brlt	.+6      	; 0x168c <gfx_mono_generic_draw_horizontal_line+0x1e>
    1686:	c0 e8       	ldi	r28, 0x80	; 128
    1688:	4c 2f       	mov	r20, r28
    168a:	48 1b       	sub	r20, r24
    168c:	44 23       	and	r20, r20
    168e:	09 f4       	brne	.+2      	; 0x1692 <gfx_mono_generic_draw_horizontal_line+0x24>
    1690:	4a c0       	rjmp	.+148    	; 0x1726 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1692:	d6 2f       	mov	r29, r22
    1694:	d6 95       	lsr	r29
    1696:	d6 95       	lsr	r29
    1698:	d6 95       	lsr	r29
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	98 e0       	ldi	r25, 0x08	; 8
    169e:	d9 9f       	mul	r29, r25
    16a0:	60 19       	sub	r22, r0
    16a2:	71 09       	sbc	r23, r1
    16a4:	11 24       	eor	r1, r1
    16a6:	e1 e0       	ldi	r30, 0x01	; 1
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	df 01       	movw	r26, r30
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <gfx_mono_generic_draw_horizontal_line+0x44>
    16ae:	aa 0f       	add	r26, r26
    16b0:	bb 1f       	adc	r27, r27
    16b2:	6a 95       	dec	r22
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <gfx_mono_generic_draw_horizontal_line+0x40>
    16b6:	fa 2e       	mov	r15, r26
    16b8:	21 30       	cpi	r18, 0x01	; 1
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <gfx_mono_generic_draw_horizontal_line+0x56>
    16bc:	98 f0       	brcs	.+38     	; 0x16e4 <gfx_mono_generic_draw_horizontal_line+0x76>
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	19 f1       	breq	.+70     	; 0x1708 <gfx_mono_generic_draw_horizontal_line+0x9a>
    16c2:	31 c0       	rjmp	.+98     	; 0x1726 <gfx_mono_generic_draw_horizontal_line+0xb8>
    16c4:	c4 2f       	mov	r28, r20
    16c6:	1f ef       	ldi	r17, 0xFF	; 255
    16c8:	18 0f       	add	r17, r24
    16ca:	01 2f       	mov	r16, r17
    16cc:	0c 0f       	add	r16, r28
    16ce:	60 2f       	mov	r22, r16
    16d0:	8d 2f       	mov	r24, r29
    16d2:	f3 d9       	rcall	.-3098   	; 0xaba <gfx_mono_st7565r_get_byte>
    16d4:	4f 2d       	mov	r20, r15
    16d6:	48 2b       	or	r20, r24
    16d8:	60 2f       	mov	r22, r16
    16da:	8d 2f       	mov	r24, r29
    16dc:	cf d8       	rcall	.-3682   	; 0x87c <gfx_mono_st7565r_put_byte>
    16de:	c1 50       	subi	r28, 0x01	; 1
    16e0:	a1 f7       	brne	.-24     	; 0x16ca <gfx_mono_generic_draw_horizontal_line+0x5c>
    16e2:	21 c0       	rjmp	.+66     	; 0x1726 <gfx_mono_generic_draw_horizontal_line+0xb8>
    16e4:	c4 2f       	mov	r28, r20
    16e6:	1f ef       	ldi	r17, 0xFF	; 255
    16e8:	18 0f       	add	r17, r24
    16ea:	fa 2e       	mov	r15, r26
    16ec:	f0 94       	com	r15
    16ee:	01 2f       	mov	r16, r17
    16f0:	0c 0f       	add	r16, r28
    16f2:	60 2f       	mov	r22, r16
    16f4:	8d 2f       	mov	r24, r29
    16f6:	e1 d9       	rcall	.-3134   	; 0xaba <gfx_mono_st7565r_get_byte>
    16f8:	4f 2d       	mov	r20, r15
    16fa:	48 23       	and	r20, r24
    16fc:	60 2f       	mov	r22, r16
    16fe:	8d 2f       	mov	r24, r29
    1700:	bd d8       	rcall	.-3718   	; 0x87c <gfx_mono_st7565r_put_byte>
    1702:	c1 50       	subi	r28, 0x01	; 1
    1704:	a1 f7       	brne	.-24     	; 0x16ee <gfx_mono_generic_draw_horizontal_line+0x80>
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1708:	c4 2f       	mov	r28, r20
    170a:	1f ef       	ldi	r17, 0xFF	; 255
    170c:	18 0f       	add	r17, r24
    170e:	01 2f       	mov	r16, r17
    1710:	0c 0f       	add	r16, r28
    1712:	60 2f       	mov	r22, r16
    1714:	8d 2f       	mov	r24, r29
    1716:	d1 d9       	rcall	.-3166   	; 0xaba <gfx_mono_st7565r_get_byte>
    1718:	4f 2d       	mov	r20, r15
    171a:	48 27       	eor	r20, r24
    171c:	60 2f       	mov	r22, r16
    171e:	8d 2f       	mov	r24, r29
    1720:	ad d8       	rcall	.-3750   	; 0x87c <gfx_mono_st7565r_put_byte>
    1722:	c1 50       	subi	r28, 0x01	; 1
    1724:	a1 f7       	brne	.-24     	; 0x170e <gfx_mono_generic_draw_horizontal_line+0xa0>
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	08 95       	ret

00001732 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
	if (height == 0) {
    173c:	22 23       	and	r18, r18
    173e:	69 f0       	breq	.+26     	; 0x175a <gfx_mono_generic_draw_filled_rect+0x28>
    1740:	f4 2e       	mov	r15, r20
    1742:	18 2f       	mov	r17, r24
    1744:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1746:	df ef       	ldi	r29, 0xFF	; 255
    1748:	d6 0f       	add	r29, r22
    174a:	6d 2f       	mov	r22, r29
    174c:	6c 0f       	add	r22, r28
    174e:	20 2f       	mov	r18, r16
    1750:	4f 2d       	mov	r20, r15
    1752:	81 2f       	mov	r24, r17
    1754:	8c df       	rcall	.-232    	; 0x166e <gfx_mono_generic_draw_horizontal_line>
    1756:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1758:	c1 f7       	brne	.-16     	; 0x174a <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	08 95       	ret

00001766 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	1f 92       	push	r1
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1770:	9f b7       	in	r25, 0x3f	; 63
    1772:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1774:	f8 94       	cli
	return flags;
    1776:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1778:	e8 2f       	mov	r30, r24
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	e0 59       	subi	r30, 0x90	; 144
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 95       	com	r22
    1782:	80 81       	ld	r24, Z
    1784:	68 23       	and	r22, r24
    1786:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1788:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    178a:	0f 90       	pop	r0
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	1f 92       	push	r1
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    179c:	9f b7       	in	r25, 0x3f	; 63
    179e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    17a0:	f8 94       	cli
	return flags;
    17a2:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    17a4:	e8 2f       	mov	r30, r24
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	e0 59       	subi	r30, 0x90	; 144
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	68 2b       	or	r22, r24
    17b0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17b2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    17b4:	0f 90       	pop	r0
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    17bc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    17c0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    17c2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    17c4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    17c8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    17ca:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    17ce:	08 95       	ret

000017d0 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	c8 2f       	mov	r28, r24
    17e6:	e6 2e       	mov	r14, r22
    17e8:	b4 2e       	mov	r11, r20
    17ea:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    17ec:	00 e0       	ldi	r16, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	24 81       	ldd	r18, Z+4	; 0x04
    17f2:	43 81       	ldd	r20, Z+3	; 0x03
    17f4:	6b 2d       	mov	r22, r11
    17f6:	8e 2d       	mov	r24, r14
    17f8:	9c df       	rcall	.-200    	; 0x1732 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    17fa:	f6 01       	movw	r30, r12
    17fc:	80 81       	ld	r24, Z
    17fe:	81 11       	cpse	r24, r1
    1800:	39 c0       	rjmp	.+114    	; 0x1874 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1802:	83 81       	ldd	r24, Z+3	; 0x03
    1804:	28 2f       	mov	r18, r24
    1806:	26 95       	lsr	r18
    1808:	26 95       	lsr	r18
    180a:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    180c:	87 70       	andi	r24, 0x07	; 7
    180e:	09 f0       	breq	.+2      	; 0x1812 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1810:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1812:	f6 01       	movw	r30, r12
    1814:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1816:	8c 2f       	mov	r24, r28
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	35 81       	ldd	r19, Z+5	; 0x05
    181c:	83 1b       	sub	r24, r19
    181e:	91 09       	sbc	r25, r1
    1820:	2a 9d       	mul	r18, r10
    1822:	90 01       	movw	r18, r0
    1824:	11 24       	eor	r1, r1
    1826:	82 9f       	mul	r24, r18
    1828:	a0 01       	movw	r20, r0
    182a:	83 9f       	mul	r24, r19
    182c:	50 0d       	add	r21, r0
    182e:	92 9f       	mul	r25, r18
    1830:	50 0d       	add	r21, r0
    1832:	11 24       	eor	r1, r1
    1834:	01 81       	ldd	r16, Z+1	; 0x01
    1836:	12 81       	ldd	r17, Z+2	; 0x02
    1838:	04 0f       	add	r16, r20
    183a:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    183c:	f6 01       	movw	r30, r12
    183e:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1840:	ff 20       	and	r15, r15
    1842:	a1 f0       	breq	.+40     	; 0x186c <gfx_mono_draw_char+0x9c>
    1844:	d0 e0       	ldi	r29, 0x00	; 0
    1846:	c0 e0       	ldi	r28, 0x00	; 0
    1848:	8e 2d       	mov	r24, r14
    184a:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    184c:	9c 2f       	mov	r25, r28
    184e:	97 70       	andi	r25, 0x07	; 7
    1850:	21 f4       	brne	.+8      	; 0x185a <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1852:	f8 01       	movw	r30, r16
    1854:	d4 91       	lpm	r29, Z
				glyph_data++;
    1856:	0f 5f       	subi	r16, 0xFF	; 255
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    185a:	dd 23       	and	r29, r29
    185c:	1c f4       	brge	.+6      	; 0x1864 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	6b 2d       	mov	r22, r11
    1862:	f5 d8       	rcall	.-3606   	; 0xa4e <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1864:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1866:	cf 5f       	subi	r28, 0xFF	; 255
    1868:	fc 12       	cpse	r15, r28
    186a:	ee cf       	rjmp	.-36     	; 0x1848 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    186c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    186e:	aa 94       	dec	r10
	} while (rows_left > 0);
    1870:	a1 10       	cpse	r10, r1
    1872:	e4 cf       	rjmp	.-56     	; 0x183c <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	df 90       	pop	r13
    1882:	cf 90       	pop	r12
    1884:	bf 90       	pop	r11
    1886:	af 90       	pop	r10
    1888:	08 95       	ret

0000188a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	d6 2e       	mov	r13, r22
    189a:	04 2f       	mov	r16, r20
    189c:	79 01       	movw	r14, r18
    189e:	ec 01       	movw	r28, r24
    18a0:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    18a2:	89 91       	ld	r24, Y+
    18a4:	8a 30       	cpi	r24, 0x0A	; 10
    18a6:	31 f4       	brne	.+12     	; 0x18b4 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    18a8:	f7 01       	movw	r30, r14
    18aa:	84 81       	ldd	r24, Z+4	; 0x04
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    18b0:	1d 2d       	mov	r17, r13
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    18b4:	8d 30       	cpi	r24, 0x0D	; 13
    18b6:	39 f0       	breq	.+14     	; 0x18c6 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    18b8:	97 01       	movw	r18, r14
    18ba:	40 2f       	mov	r20, r16
    18bc:	61 2f       	mov	r22, r17
    18be:	88 df       	rcall	.-240    	; 0x17d0 <gfx_mono_draw_char>
			x += font->width;
    18c0:	f7 01       	movw	r30, r14
    18c2:	83 81       	ldd	r24, Z+3	; 0x03
    18c4:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    18c6:	88 81       	ld	r24, Y
    18c8:	81 11       	cpse	r24, r1
    18ca:	eb cf       	rjmp	.-42     	; 0x18a2 <gfx_mono_draw_string+0x18>
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	08 95       	ret

000018dc <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    18e6:	c6 2f       	mov	r28, r22
    18e8:	d0 e0       	ldi	r29, 0x00	; 0
    18ea:	de 01       	movw	r26, r28
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <ioport_configure_port_pin+0x18>
    18f0:	b5 95       	asr	r27
    18f2:	a7 95       	ror	r26
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <ioport_configure_port_pin+0x14>
    18f8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    18fa:	50 8b       	std	Z+16, r21	; 0x10
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1902:	28 30       	cpi	r18, 0x08	; 8
    1904:	31 05       	cpc	r19, r1
    1906:	89 f7       	brne	.-30     	; 0x18ea <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1908:	40 ff       	sbrs	r20, 0
    190a:	0a c0       	rjmp	.+20     	; 0x1920 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    190c:	41 ff       	sbrs	r20, 1
    190e:	03 c0       	rjmp	.+6      	; 0x1916 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1910:	fc 01       	movw	r30, r24
    1912:	65 83       	std	Z+5, r22	; 0x05
    1914:	02 c0       	rjmp	.+4      	; 0x191a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1916:	fc 01       	movw	r30, r24
    1918:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    191a:	fc 01       	movw	r30, r24
    191c:	61 83       	std	Z+1, r22	; 0x01
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1920:	fc 01       	movw	r30, r24
    1922:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    192a:	43 e0       	ldi	r20, 0x03	; 3
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	80 ee       	ldi	r24, 0xE0	; 224
    1932:	97 e0       	ldi	r25, 0x07	; 7
    1934:	d3 df       	rcall	.-90     	; 0x18dc <ioport_configure_port_pin>
    1936:	43 e0       	ldi	r20, 0x03	; 3
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	80 ee       	ldi	r24, 0xE0	; 224
    193e:	97 e0       	ldi	r25, 0x07	; 7
    1940:	cd df       	rcall	.-102    	; 0x18dc <ioport_configure_port_pin>
    1942:	43 e0       	ldi	r20, 0x03	; 3
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	60 e1       	ldi	r22, 0x10	; 16
    1948:	80 e6       	ldi	r24, 0x60	; 96
    194a:	96 e0       	ldi	r25, 0x06	; 6
    194c:	c7 df       	rcall	.-114    	; 0x18dc <ioport_configure_port_pin>
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	50 e4       	ldi	r21, 0x40	; 64
    1952:	60 e2       	ldi	r22, 0x20	; 32
    1954:	80 e6       	ldi	r24, 0x60	; 96
    1956:	96 e0       	ldi	r25, 0x06	; 6
    1958:	c1 df       	rcall	.-126    	; 0x18dc <ioport_configure_port_pin>
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	5b e1       	ldi	r21, 0x1B	; 27
    195e:	60 e2       	ldi	r22, 0x20	; 32
    1960:	80 e8       	ldi	r24, 0x80	; 128
    1962:	96 e0       	ldi	r25, 0x06	; 6
    1964:	bb df       	rcall	.-138    	; 0x18dc <ioport_configure_port_pin>
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	5b e1       	ldi	r21, 0x1B	; 27
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	80 ea       	ldi	r24, 0xA0	; 160
    196e:	96 e0       	ldi	r25, 0x06	; 6
    1970:	b5 df       	rcall	.-150    	; 0x18dc <ioport_configure_port_pin>
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	5b e1       	ldi	r21, 0x1B	; 27
    1976:	64 e0       	ldi	r22, 0x04	; 4
    1978:	80 ea       	ldi	r24, 0xA0	; 160
    197a:	96 e0       	ldi	r25, 0x06	; 6
    197c:	af df       	rcall	.-162    	; 0x18dc <ioport_configure_port_pin>
    197e:	43 e0       	ldi	r20, 0x03	; 3
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	62 e0       	ldi	r22, 0x02	; 2
    1984:	80 e6       	ldi	r24, 0x60	; 96
    1986:	96 e0       	ldi	r25, 0x06	; 6
    1988:	a9 df       	rcall	.-174    	; 0x18dc <ioport_configure_port_pin>
    198a:	43 e0       	ldi	r20, 0x03	; 3
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	68 e0       	ldi	r22, 0x08	; 8
    1990:	80 e6       	ldi	r24, 0x60	; 96
    1992:	96 e0       	ldi	r25, 0x06	; 6
    1994:	a3 df       	rcall	.-186    	; 0x18dc <ioport_configure_port_pin>
    1996:	43 e0       	ldi	r20, 0x03	; 3
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	68 e0       	ldi	r22, 0x08	; 8
    199c:	80 ea       	ldi	r24, 0xA0	; 160
    199e:	96 e0       	ldi	r25, 0x06	; 6
    19a0:	9d df       	rcall	.-198    	; 0x18dc <ioport_configure_port_pin>
    19a2:	43 e0       	ldi	r20, 0x03	; 3
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	80 e6       	ldi	r24, 0x60	; 96
    19aa:	96 e0       	ldi	r25, 0x06	; 6
    19ac:	97 df       	rcall	.-210    	; 0x18dc <ioport_configure_port_pin>
    19ae:	43 e0       	ldi	r20, 0x03	; 3
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	68 e0       	ldi	r22, 0x08	; 8
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	96 e0       	ldi	r25, 0x06	; 6
    19b8:	91 df       	rcall	.-222    	; 0x18dc <ioport_configure_port_pin>
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	60 e1       	ldi	r22, 0x10	; 16
    19c0:	80 e8       	ldi	r24, 0x80	; 128
    19c2:	96 e0       	ldi	r25, 0x06	; 6
    19c4:	8b df       	rcall	.-234    	; 0x18dc <ioport_configure_port_pin>
    19c6:	43 e0       	ldi	r20, 0x03	; 3
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	62 e0       	ldi	r22, 0x02	; 2
    19cc:	80 e6       	ldi	r24, 0x60	; 96
    19ce:	96 e0       	ldi	r25, 0x06	; 6
    19d0:	85 df       	rcall	.-246    	; 0x18dc <ioport_configure_port_pin>
    19d2:	43 e0       	ldi	r20, 0x03	; 3
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	68 e0       	ldi	r22, 0x08	; 8
    19d8:	80 e6       	ldi	r24, 0x60	; 96
    19da:	96 e0       	ldi	r25, 0x06	; 6
    19dc:	7f df       	rcall	.-258    	; 0x18dc <ioport_configure_port_pin>
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	64 e0       	ldi	r22, 0x04	; 4
    19e4:	80 e6       	ldi	r24, 0x60	; 96
    19e6:	96 e0       	ldi	r25, 0x06	; 6
    19e8:	79 df       	rcall	.-270    	; 0x18dc <ioport_configure_port_pin>
    19ea:	43 e0       	ldi	r20, 0x03	; 3
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	60 e1       	ldi	r22, 0x10	; 16
    19f0:	80 ea       	ldi	r24, 0xA0	; 160
    19f2:	96 e0       	ldi	r25, 0x06	; 6
    19f4:	73 df       	rcall	.-282    	; 0x18dc <ioport_configure_port_pin>
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	96 e0       	ldi	r25, 0x06	; 6
    1a00:	6d df       	rcall	.-294    	; 0x18dc <ioport_configure_port_pin>
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	50 e0       	ldi	r21, 0x00	; 0
    1a06:	64 e0       	ldi	r22, 0x04	; 4
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	96 e0       	ldi	r25, 0x06	; 6
    1a0c:	67 df       	rcall	.-306    	; 0x18dc <ioport_configure_port_pin>
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	62 e0       	ldi	r22, 0x02	; 2
    1a14:	80 e2       	ldi	r24, 0x20	; 32
    1a16:	96 e0       	ldi	r25, 0x06	; 6
    1a18:	61 df       	rcall	.-318    	; 0x18dc <ioport_configure_port_pin>
    1a1a:	43 e0       	ldi	r20, 0x03	; 3
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	68 e0       	ldi	r22, 0x08	; 8
    1a20:	80 e4       	ldi	r24, 0x40	; 64
    1a22:	96 e0       	ldi	r25, 0x06	; 6
    1a24:	5b df       	rcall	.-330    	; 0x18dc <ioport_configure_port_pin>
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
    1a2c:	80 e4       	ldi	r24, 0x40	; 64
    1a2e:	96 e0       	ldi	r25, 0x06	; 6
    1a30:	55 df       	rcall	.-342    	; 0x18dc <ioport_configure_port_pin>
    1a32:	43 e0       	ldi	r20, 0x03	; 3
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	68 e0       	ldi	r22, 0x08	; 8
    1a38:	80 e6       	ldi	r24, 0x60	; 96
    1a3a:	96 e0       	ldi	r25, 0x06	; 6
    1a3c:	4f df       	rcall	.-354    	; 0x18dc <ioport_configure_port_pin>
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	64 e0       	ldi	r22, 0x04	; 4
    1a44:	80 e6       	ldi	r24, 0x60	; 96
    1a46:	96 e0       	ldi	r25, 0x06	; 6
    1a48:	49 df       	rcall	.-366    	; 0x18dc <ioport_configure_port_pin>
    1a4a:	43 e0       	ldi	r20, 0x03	; 3
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	68 e0       	ldi	r22, 0x08	; 8
    1a50:	80 e8       	ldi	r24, 0x80	; 128
    1a52:	96 e0       	ldi	r25, 0x06	; 6
    1a54:	43 df       	rcall	.-378    	; 0x18dc <ioport_configure_port_pin>
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	64 e0       	ldi	r22, 0x04	; 4
    1a5c:	80 e8       	ldi	r24, 0x80	; 128
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	3d cf       	rjmp	.-390    	; 0x18dc <ioport_configure_port_pin>
    1a62:	08 95       	ret

00001a64 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1a66:	61 50       	subi	r22, 0x01	; 1
    1a68:	71 09       	sbc	r23, r1
    1a6a:	81 09       	sbc	r24, r1
    1a6c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1a6e:	61 15       	cp	r22, r1
    1a70:	71 05       	cpc	r23, r1
    1a72:	81 05       	cpc	r24, r1
    1a74:	91 05       	cpc	r25, r1
    1a76:	b9 f7       	brne	.-18     	; 0x1a66 <__portable_avr_delay_cycles+0x2>
    1a78:	08 95       	ret

00001a7a <main>:
	result = adc_get_result(&MY_ADC, MY_ADC_CH);
	return result;
}

int main (void)
{
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2b 97       	sbiw	r28, 0x0b	; 11
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	de bf       	out	0x3e, r29	; 62
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    1a88:	50 df       	rcall	.-352    	; 0x192a <board_init>
	
	gfx_mono_init();
    1a8a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <gfx_mono_st7565r_init>
static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;

	adc_read_configuration(&MY_ADC, &adc_conf);
    1a8e:	be 01       	movw	r22, r28
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	85 dc       	rcall	.-1782   	; 0x13a4 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1a9a:	ae 01       	movw	r20, r28
    1a9c:	48 5f       	subi	r20, 0xF8	; 248
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	02 dd       	rcall	.-1532   	; 0x14ac <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
	conf->refctrl |= ref;
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	8f 78       	andi	r24, 0x8F	; 143
    1aae:	80 61       	ori	r24, 0x10	; 16
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	81 7e       	andi	r24, 0xE1	; 225
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
    1ab8:	1c 82       	std	Y+4, r1	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	8d 83       	std	Y+5, r24	; 0x05
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	88 87       	std	Y+8, r24	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1ac2:	80 e4       	ldi	r24, 0x40	; 64
    1ac4:	89 87       	std	Y+9, r24	; 0x09
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 200000UL);

	adcch_set_input(&adcch_conf, J2_PIN0, ADCCH_NEG_NONE, 1);

	adc_write_configuration(&MY_ADC, &adc_conf);
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	03 dc       	rcall	.-2042   	; 0x12d8 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1ad2:	ae 01       	movw	r20, r28
    1ad4:	48 5f       	subi	r20, 0xF8	; 248
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	92 e0       	ldi	r25, 0x02	; 2
    1ade:	9b dc       	rcall	.-1738   	; 0x1416 <adcch_write_configuration>
    1ae0:	80 e1       	ldi	r24, 0x10	; 16
    1ae2:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
}

static uint16_t adc_read(){
	uint16_t result;
	adc_enable(&MY_ADC);
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	12 e0       	ldi	r17, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1aea:	88 24       	eor	r8, r8
    1aec:	83 94       	inc	r8
	
	while(1){
		
		result = adc_read();
		
		snprintf(strbuf, sizeof(strbuf), "Read ADC : %3d",result);
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f7 e0       	ldi	r31, 0x07	; 7
    1af2:	af 2e       	mov	r10, r31
    1af4:	f0 e2       	ldi	r31, 0x20	; 32
    1af6:	bf 2e       	mov	r11, r31
    1af8:	f0 2d       	mov	r31, r0
    1afa:	0f 2e       	mov	r0, r31
    1afc:	f9 ec       	ldi	r31, 0xC9	; 201
    1afe:	9f 2e       	mov	r9, r31
    1b00:	f0 2d       	mov	r31, r0
    1b02:	0f 2e       	mov	r0, r31
    1b04:	f4 e2       	ldi	r31, 0x24	; 36
    1b06:	cf 2e       	mov	r12, r31
    1b08:	f2 e2       	ldi	r31, 0x22	; 34
    1b0a:	df 2e       	mov	r13, r31
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

static uint16_t adc_read(){
	uint16_t result;
	adc_enable(&MY_ADC);
    1b0c:	f0 2d       	mov	r31, r0
    1b0e:	c8 01       	movw	r24, r16
    1b10:	12 d8       	rcall	.-4060   	; 0xb36 <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b12:	8f b7       	in	r24, 0x3f	; 63
    1b14:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1b16:	f8 94       	cli
	return flags;
    1b18:	99 81       	ldd	r25, Y+1	; 0x01
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	80 81       	ld	r24, Z
    1b1e:	84 60       	ori	r24, 0x04	; 4
    1b20:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b22:	9f bf       	out	0x3f, r25	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
    1b24:	f8 01       	movw	r30, r16
    1b26:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
    1b28:	80 ff       	sbrs	r24, 0
    1b2a:	fc cf       	rjmp	.-8      	; 0x1b24 <main+0xaa>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
    1b2c:	86 82       	std	Z+6, r8	; 0x06
	adc_start_conversion(&MY_ADC, MY_ADC_CH);
	adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
	result = adc_get_result(&MY_ADC, MY_ADC_CH);
    1b2e:	e4 a0       	ldd	r14, Z+36	; 0x24
    1b30:	f5 a0       	ldd	r15, Z+37	; 0x25
	
	while(1){
		
		result = adc_read();
		
		snprintf(strbuf, sizeof(strbuf), "Read ADC : %3d",result);
    1b32:	ff 92       	push	r15
    1b34:	ef 92       	push	r14
    1b36:	bf 92       	push	r11
    1b38:	af 92       	push	r10
    1b3a:	1f 92       	push	r1
    1b3c:	9f 92       	push	r9
    1b3e:	df 92       	push	r13
    1b40:	cf 92       	push	r12
    1b42:	44 d0       	rcall	.+136    	; 0x1bcc <snprintf>
		gfx_mono_draw_string(strbuf,0, 0, &sysfont);		
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e2       	ldi	r19, 0x20	; 32
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	c6 01       	movw	r24, r12
    1b4e:	9d de       	rcall	.-710    	; 0x188a <gfx_mono_draw_string>
    1b50:	cd bf       	out	0x3d, r28	; 61
		
		if (result > 3000) {
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	99 eb       	ldi	r25, 0xB9	; 185
    1b56:	e9 16       	cp	r14, r25
    1b58:	9b e0       	ldi	r25, 0x0B	; 11
    1b5a:	f9 06       	cpc	r15, r25
    1b5c:	40 f0       	brcs	.+16     	; 0x1b6e <main+0xf4>
			gfx_mono_draw_string("Halo",0, 8, &sysfont);
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e2       	ldi	r19, 0x20	; 32
    1b62:	48 e0       	ldi	r20, 0x08	; 8
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	86 e1       	ldi	r24, 0x16	; 22
    1b68:	90 e2       	ldi	r25, 0x20	; 32
    1b6a:	8f de       	rcall	.-738    	; 0x188a <gfx_mono_draw_string>
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <main+0x102>
		}
		else {
			gfx_mono_draw_string("Hmmm",0, 8, &sysfont);
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e2       	ldi	r19, 0x20	; 32
    1b72:	48 e0       	ldi	r20, 0x08	; 8
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	8b e1       	ldi	r24, 0x1B	; 27
    1b78:	90 e2       	ldi	r25, 0x20	; 32
    1b7a:	87 de       	rcall	.-754    	; 0x188a <gfx_mono_draw_string>
		}
		
		delay_ms(50);
    1b7c:	6b e1       	ldi	r22, 0x1B	; 27
    1b7e:	71 e4       	ldi	r23, 0x41	; 65
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	6f df       	rcall	.-290    	; 0x1a64 <__portable_avr_delay_cycles>
    1b86:	c3 cf       	rjmp	.-122    	; 0x1b0e <main+0x94>

00001b88 <__udivmodsi4>:
	}
    1b88:	a1 e2       	ldi	r26, 0x21	; 33
    1b8a:	1a 2e       	mov	r1, r26
    1b8c:	aa 1b       	sub	r26, r26
    1b8e:	bb 1b       	sub	r27, r27
    1b90:	fd 01       	movw	r30, r26
    1b92:	0d c0       	rjmp	.+26     	; 0x1bae <__udivmodsi4_ep>

00001b94 <__udivmodsi4_loop>:
    1b94:	aa 1f       	adc	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	ee 1f       	adc	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	a2 17       	cp	r26, r18
    1b9e:	b3 07       	cpc	r27, r19
    1ba0:	e4 07       	cpc	r30, r20
    1ba2:	f5 07       	cpc	r31, r21
    1ba4:	20 f0       	brcs	.+8      	; 0x1bae <__udivmodsi4_ep>
    1ba6:	a2 1b       	sub	r26, r18
    1ba8:	b3 0b       	sbc	r27, r19
    1baa:	e4 0b       	sbc	r30, r20
    1bac:	f5 0b       	sbc	r31, r21

00001bae <__udivmodsi4_ep>:
    1bae:	66 1f       	adc	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	1a 94       	dec	r1
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <__udivmodsi4_loop>
    1bba:	60 95       	com	r22
    1bbc:	70 95       	com	r23
    1bbe:	80 95       	com	r24
    1bc0:	90 95       	com	r25
    1bc2:	9b 01       	movw	r18, r22
    1bc4:	ac 01       	movw	r20, r24
    1bc6:	bd 01       	movw	r22, r26
    1bc8:	cf 01       	movw	r24, r30
    1bca:	08 95       	ret

00001bcc <snprintf>:
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	2e 97       	sbiw	r28, 0x0e	; 14
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0e 89       	ldd	r16, Y+22	; 0x16
    1be0:	1f 89       	ldd	r17, Y+23	; 0x17
    1be2:	88 8d       	ldd	r24, Y+24	; 0x18
    1be4:	99 8d       	ldd	r25, Y+25	; 0x19
    1be6:	26 e0       	ldi	r18, 0x06	; 6
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	09 83       	std	Y+1, r16	; 0x01
    1bec:	1a 83       	std	Y+2, r17	; 0x02
    1bee:	97 ff       	sbrs	r25, 7
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <snprintf+0x2a>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e8       	ldi	r25, 0x80	; 128
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	ae 01       	movw	r20, r28
    1bfe:	44 5e       	subi	r20, 0xE4	; 228
    1c00:	5f 4f       	sbci	r21, 0xFF	; 255
    1c02:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c04:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c06:	ce 01       	movw	r24, r28
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	16 d0       	rcall	.+44     	; 0x1c38 <vfprintf>
    1c0c:	4d 81       	ldd	r20, Y+5	; 0x05
    1c0e:	5e 81       	ldd	r21, Y+6	; 0x06
    1c10:	57 fd       	sbrc	r21, 7
    1c12:	0a c0       	rjmp	.+20     	; 0x1c28 <snprintf+0x5c>
    1c14:	2f 81       	ldd	r18, Y+7	; 0x07
    1c16:	38 85       	ldd	r19, Y+8	; 0x08
    1c18:	42 17       	cp	r20, r18
    1c1a:	53 07       	cpc	r21, r19
    1c1c:	0c f4       	brge	.+2      	; 0x1c20 <snprintf+0x54>
    1c1e:	9a 01       	movw	r18, r20
    1c20:	f8 01       	movw	r30, r16
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	10 82       	st	Z, r1
    1c28:	2e 96       	adiw	r28, 0x0e	; 14
    1c2a:	cd bf       	out	0x3d, r28	; 61
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	08 95       	ret

00001c38 <vfprintf>:
    1c38:	2f 92       	push	r2
    1c3a:	3f 92       	push	r3
    1c3c:	4f 92       	push	r4
    1c3e:	5f 92       	push	r5
    1c40:	6f 92       	push	r6
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	2b 97       	sbiw	r28, 0x0b	; 11
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	6c 01       	movw	r12, r24
    1c68:	7b 01       	movw	r14, r22
    1c6a:	8a 01       	movw	r16, r20
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	16 82       	std	Z+6, r1	; 0x06
    1c70:	17 82       	std	Z+7, r1	; 0x07
    1c72:	83 81       	ldd	r24, Z+3	; 0x03
    1c74:	81 ff       	sbrs	r24, 1
    1c76:	bf c1       	rjmp	.+894    	; 0x1ff6 <vfprintf+0x3be>
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	3c 01       	movw	r6, r24
    1c7e:	f6 01       	movw	r30, r12
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	f7 01       	movw	r30, r14
    1c84:	93 fd       	sbrc	r25, 3
    1c86:	85 91       	lpm	r24, Z+
    1c88:	93 ff       	sbrs	r25, 3
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	7f 01       	movw	r14, r30
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <vfprintf+0x5c>
    1c92:	ad c1       	rjmp	.+858    	; 0x1fee <vfprintf+0x3b6>
    1c94:	85 32       	cpi	r24, 0x25	; 37
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <vfprintf+0x6e>
    1c98:	93 fd       	sbrc	r25, 3
    1c9a:	85 91       	lpm	r24, Z+
    1c9c:	93 ff       	sbrs	r25, 3
    1c9e:	81 91       	ld	r24, Z+
    1ca0:	7f 01       	movw	r14, r30
    1ca2:	85 32       	cpi	r24, 0x25	; 37
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <vfprintf+0x76>
    1ca6:	b6 01       	movw	r22, r12
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	d3 d1       	rcall	.+934    	; 0x2052 <fputc>
    1cac:	e8 cf       	rjmp	.-48     	; 0x1c7e <vfprintf+0x46>
    1cae:	91 2c       	mov	r9, r1
    1cb0:	21 2c       	mov	r2, r1
    1cb2:	31 2c       	mov	r3, r1
    1cb4:	ff e1       	ldi	r31, 0x1F	; 31
    1cb6:	f3 15       	cp	r31, r3
    1cb8:	d8 f0       	brcs	.+54     	; 0x1cf0 <vfprintf+0xb8>
    1cba:	8b 32       	cpi	r24, 0x2B	; 43
    1cbc:	79 f0       	breq	.+30     	; 0x1cdc <vfprintf+0xa4>
    1cbe:	38 f4       	brcc	.+14     	; 0x1cce <vfprintf+0x96>
    1cc0:	80 32       	cpi	r24, 0x20	; 32
    1cc2:	79 f0       	breq	.+30     	; 0x1ce2 <vfprintf+0xaa>
    1cc4:	83 32       	cpi	r24, 0x23	; 35
    1cc6:	a1 f4       	brne	.+40     	; 0x1cf0 <vfprintf+0xb8>
    1cc8:	23 2d       	mov	r18, r3
    1cca:	20 61       	ori	r18, 0x10	; 16
    1ccc:	1d c0       	rjmp	.+58     	; 0x1d08 <vfprintf+0xd0>
    1cce:	8d 32       	cpi	r24, 0x2D	; 45
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <vfprintf+0xb2>
    1cd2:	80 33       	cpi	r24, 0x30	; 48
    1cd4:	69 f4       	brne	.+26     	; 0x1cf0 <vfprintf+0xb8>
    1cd6:	23 2d       	mov	r18, r3
    1cd8:	21 60       	ori	r18, 0x01	; 1
    1cda:	16 c0       	rjmp	.+44     	; 0x1d08 <vfprintf+0xd0>
    1cdc:	83 2d       	mov	r24, r3
    1cde:	82 60       	ori	r24, 0x02	; 2
    1ce0:	38 2e       	mov	r3, r24
    1ce2:	e3 2d       	mov	r30, r3
    1ce4:	e4 60       	ori	r30, 0x04	; 4
    1ce6:	3e 2e       	mov	r3, r30
    1ce8:	2a c0       	rjmp	.+84     	; 0x1d3e <vfprintf+0x106>
    1cea:	f3 2d       	mov	r31, r3
    1cec:	f8 60       	ori	r31, 0x08	; 8
    1cee:	1d c0       	rjmp	.+58     	; 0x1d2a <vfprintf+0xf2>
    1cf0:	37 fc       	sbrc	r3, 7
    1cf2:	2d c0       	rjmp	.+90     	; 0x1d4e <vfprintf+0x116>
    1cf4:	20 ed       	ldi	r18, 0xD0	; 208
    1cf6:	28 0f       	add	r18, r24
    1cf8:	2a 30       	cpi	r18, 0x0A	; 10
    1cfa:	40 f0       	brcs	.+16     	; 0x1d0c <vfprintf+0xd4>
    1cfc:	8e 32       	cpi	r24, 0x2E	; 46
    1cfe:	b9 f4       	brne	.+46     	; 0x1d2e <vfprintf+0xf6>
    1d00:	36 fc       	sbrc	r3, 6
    1d02:	75 c1       	rjmp	.+746    	; 0x1fee <vfprintf+0x3b6>
    1d04:	23 2d       	mov	r18, r3
    1d06:	20 64       	ori	r18, 0x40	; 64
    1d08:	32 2e       	mov	r3, r18
    1d0a:	19 c0       	rjmp	.+50     	; 0x1d3e <vfprintf+0x106>
    1d0c:	36 fe       	sbrs	r3, 6
    1d0e:	06 c0       	rjmp	.+12     	; 0x1d1c <vfprintf+0xe4>
    1d10:	8a e0       	ldi	r24, 0x0A	; 10
    1d12:	98 9e       	mul	r9, r24
    1d14:	20 0d       	add	r18, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	92 2e       	mov	r9, r18
    1d1a:	11 c0       	rjmp	.+34     	; 0x1d3e <vfprintf+0x106>
    1d1c:	ea e0       	ldi	r30, 0x0A	; 10
    1d1e:	2e 9e       	mul	r2, r30
    1d20:	20 0d       	add	r18, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	22 2e       	mov	r2, r18
    1d26:	f3 2d       	mov	r31, r3
    1d28:	f0 62       	ori	r31, 0x20	; 32
    1d2a:	3f 2e       	mov	r3, r31
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <vfprintf+0x106>
    1d2e:	8c 36       	cpi	r24, 0x6C	; 108
    1d30:	21 f4       	brne	.+8      	; 0x1d3a <vfprintf+0x102>
    1d32:	83 2d       	mov	r24, r3
    1d34:	80 68       	ori	r24, 0x80	; 128
    1d36:	38 2e       	mov	r3, r24
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <vfprintf+0x106>
    1d3a:	88 36       	cpi	r24, 0x68	; 104
    1d3c:	41 f4       	brne	.+16     	; 0x1d4e <vfprintf+0x116>
    1d3e:	f7 01       	movw	r30, r14
    1d40:	93 fd       	sbrc	r25, 3
    1d42:	85 91       	lpm	r24, Z+
    1d44:	93 ff       	sbrs	r25, 3
    1d46:	81 91       	ld	r24, Z+
    1d48:	7f 01       	movw	r14, r30
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	b3 cf       	rjmp	.-154    	; 0x1cb4 <vfprintf+0x7c>
    1d4e:	98 2f       	mov	r25, r24
    1d50:	9f 7d       	andi	r25, 0xDF	; 223
    1d52:	95 54       	subi	r25, 0x45	; 69
    1d54:	93 30       	cpi	r25, 0x03	; 3
    1d56:	28 f4       	brcc	.+10     	; 0x1d62 <vfprintf+0x12a>
    1d58:	0c 5f       	subi	r16, 0xFC	; 252
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	9f e3       	ldi	r25, 0x3F	; 63
    1d5e:	99 83       	std	Y+1, r25	; 0x01
    1d60:	0d c0       	rjmp	.+26     	; 0x1d7c <vfprintf+0x144>
    1d62:	83 36       	cpi	r24, 0x63	; 99
    1d64:	31 f0       	breq	.+12     	; 0x1d72 <vfprintf+0x13a>
    1d66:	83 37       	cpi	r24, 0x73	; 115
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <vfprintf+0x14e>
    1d6a:	83 35       	cpi	r24, 0x53	; 83
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <vfprintf+0x138>
    1d6e:	55 c0       	rjmp	.+170    	; 0x1e1a <vfprintf+0x1e2>
    1d70:	20 c0       	rjmp	.+64     	; 0x1db2 <vfprintf+0x17a>
    1d72:	f8 01       	movw	r30, r16
    1d74:	80 81       	ld	r24, Z
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	0e 5f       	subi	r16, 0xFE	; 254
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	88 24       	eor	r8, r8
    1d7e:	83 94       	inc	r8
    1d80:	91 2c       	mov	r9, r1
    1d82:	53 01       	movw	r10, r6
    1d84:	12 c0       	rjmp	.+36     	; 0x1daa <vfprintf+0x172>
    1d86:	28 01       	movw	r4, r16
    1d88:	f2 e0       	ldi	r31, 0x02	; 2
    1d8a:	4f 0e       	add	r4, r31
    1d8c:	51 1c       	adc	r5, r1
    1d8e:	f8 01       	movw	r30, r16
    1d90:	a0 80       	ld	r10, Z
    1d92:	b1 80       	ldd	r11, Z+1	; 0x01
    1d94:	36 fe       	sbrs	r3, 6
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <vfprintf+0x166>
    1d98:	69 2d       	mov	r22, r9
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x16a>
    1d9e:	6f ef       	ldi	r22, 0xFF	; 255
    1da0:	7f ef       	ldi	r23, 0xFF	; 255
    1da2:	c5 01       	movw	r24, r10
    1da4:	4b d1       	rcall	.+662    	; 0x203c <strnlen>
    1da6:	4c 01       	movw	r8, r24
    1da8:	82 01       	movw	r16, r4
    1daa:	f3 2d       	mov	r31, r3
    1dac:	ff 77       	andi	r31, 0x7F	; 127
    1dae:	3f 2e       	mov	r3, r31
    1db0:	15 c0       	rjmp	.+42     	; 0x1ddc <vfprintf+0x1a4>
    1db2:	28 01       	movw	r4, r16
    1db4:	22 e0       	ldi	r18, 0x02	; 2
    1db6:	42 0e       	add	r4, r18
    1db8:	51 1c       	adc	r5, r1
    1dba:	f8 01       	movw	r30, r16
    1dbc:	a0 80       	ld	r10, Z
    1dbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1dc0:	36 fe       	sbrs	r3, 6
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <vfprintf+0x192>
    1dc4:	69 2d       	mov	r22, r9
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <vfprintf+0x196>
    1dca:	6f ef       	ldi	r22, 0xFF	; 255
    1dcc:	7f ef       	ldi	r23, 0xFF	; 255
    1dce:	c5 01       	movw	r24, r10
    1dd0:	2a d1       	rcall	.+596    	; 0x2026 <strnlen_P>
    1dd2:	4c 01       	movw	r8, r24
    1dd4:	f3 2d       	mov	r31, r3
    1dd6:	f0 68       	ori	r31, 0x80	; 128
    1dd8:	3f 2e       	mov	r3, r31
    1dda:	82 01       	movw	r16, r4
    1ddc:	33 fc       	sbrc	r3, 3
    1dde:	19 c0       	rjmp	.+50     	; 0x1e12 <vfprintf+0x1da>
    1de0:	82 2d       	mov	r24, r2
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	88 16       	cp	r8, r24
    1de6:	99 06       	cpc	r9, r25
    1de8:	a0 f4       	brcc	.+40     	; 0x1e12 <vfprintf+0x1da>
    1dea:	b6 01       	movw	r22, r12
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	30 d1       	rcall	.+608    	; 0x2052 <fputc>
    1df2:	2a 94       	dec	r2
    1df4:	f5 cf       	rjmp	.-22     	; 0x1de0 <vfprintf+0x1a8>
    1df6:	f5 01       	movw	r30, r10
    1df8:	37 fc       	sbrc	r3, 7
    1dfa:	85 91       	lpm	r24, Z+
    1dfc:	37 fe       	sbrs	r3, 7
    1dfe:	81 91       	ld	r24, Z+
    1e00:	5f 01       	movw	r10, r30
    1e02:	b6 01       	movw	r22, r12
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	25 d1       	rcall	.+586    	; 0x2052 <fputc>
    1e08:	21 10       	cpse	r2, r1
    1e0a:	2a 94       	dec	r2
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	82 1a       	sub	r8, r18
    1e10:	91 08       	sbc	r9, r1
    1e12:	81 14       	cp	r8, r1
    1e14:	91 04       	cpc	r9, r1
    1e16:	79 f7       	brne	.-34     	; 0x1df6 <vfprintf+0x1be>
    1e18:	e1 c0       	rjmp	.+450    	; 0x1fdc <vfprintf+0x3a4>
    1e1a:	84 36       	cpi	r24, 0x64	; 100
    1e1c:	11 f0       	breq	.+4      	; 0x1e22 <vfprintf+0x1ea>
    1e1e:	89 36       	cpi	r24, 0x69	; 105
    1e20:	39 f5       	brne	.+78     	; 0x1e70 <vfprintf+0x238>
    1e22:	f8 01       	movw	r30, r16
    1e24:	37 fe       	sbrs	r3, 7
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <vfprintf+0x1fe>
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0c 5f       	subi	r16, 0xFC	; 252
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <vfprintf+0x20e>
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	07 2e       	mov	r0, r23
    1e3c:	00 0c       	add	r0, r0
    1e3e:	88 0b       	sbc	r24, r24
    1e40:	99 0b       	sbc	r25, r25
    1e42:	0e 5f       	subi	r16, 0xFE	; 254
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	f3 2d       	mov	r31, r3
    1e48:	ff 76       	andi	r31, 0x6F	; 111
    1e4a:	3f 2e       	mov	r3, r31
    1e4c:	97 ff       	sbrs	r25, 7
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <vfprintf+0x22a>
    1e50:	90 95       	com	r25
    1e52:	80 95       	com	r24
    1e54:	70 95       	com	r23
    1e56:	61 95       	neg	r22
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	f0 68       	ori	r31, 0x80	; 128
    1e60:	3f 2e       	mov	r3, r31
    1e62:	2a e0       	ldi	r18, 0x0A	; 10
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	a3 01       	movw	r20, r6
    1e68:	30 d1       	rcall	.+608    	; 0x20ca <__ultoa_invert>
    1e6a:	88 2e       	mov	r8, r24
    1e6c:	86 18       	sub	r8, r6
    1e6e:	44 c0       	rjmp	.+136    	; 0x1ef8 <vfprintf+0x2c0>
    1e70:	85 37       	cpi	r24, 0x75	; 117
    1e72:	31 f4       	brne	.+12     	; 0x1e80 <vfprintf+0x248>
    1e74:	23 2d       	mov	r18, r3
    1e76:	2f 7e       	andi	r18, 0xEF	; 239
    1e78:	b2 2e       	mov	r11, r18
    1e7a:	2a e0       	ldi	r18, 0x0A	; 10
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	25 c0       	rjmp	.+74     	; 0x1eca <vfprintf+0x292>
    1e80:	93 2d       	mov	r25, r3
    1e82:	99 7f       	andi	r25, 0xF9	; 249
    1e84:	b9 2e       	mov	r11, r25
    1e86:	8f 36       	cpi	r24, 0x6F	; 111
    1e88:	c1 f0       	breq	.+48     	; 0x1eba <vfprintf+0x282>
    1e8a:	18 f4       	brcc	.+6      	; 0x1e92 <vfprintf+0x25a>
    1e8c:	88 35       	cpi	r24, 0x58	; 88
    1e8e:	79 f0       	breq	.+30     	; 0x1eae <vfprintf+0x276>
    1e90:	ae c0       	rjmp	.+348    	; 0x1fee <vfprintf+0x3b6>
    1e92:	80 37       	cpi	r24, 0x70	; 112
    1e94:	19 f0       	breq	.+6      	; 0x1e9c <vfprintf+0x264>
    1e96:	88 37       	cpi	r24, 0x78	; 120
    1e98:	21 f0       	breq	.+8      	; 0x1ea2 <vfprintf+0x26a>
    1e9a:	a9 c0       	rjmp	.+338    	; 0x1fee <vfprintf+0x3b6>
    1e9c:	e9 2f       	mov	r30, r25
    1e9e:	e0 61       	ori	r30, 0x10	; 16
    1ea0:	be 2e       	mov	r11, r30
    1ea2:	b4 fe       	sbrs	r11, 4
    1ea4:	0d c0       	rjmp	.+26     	; 0x1ec0 <vfprintf+0x288>
    1ea6:	fb 2d       	mov	r31, r11
    1ea8:	f4 60       	ori	r31, 0x04	; 4
    1eaa:	bf 2e       	mov	r11, r31
    1eac:	09 c0       	rjmp	.+18     	; 0x1ec0 <vfprintf+0x288>
    1eae:	34 fe       	sbrs	r3, 4
    1eb0:	0a c0       	rjmp	.+20     	; 0x1ec6 <vfprintf+0x28e>
    1eb2:	29 2f       	mov	r18, r25
    1eb4:	26 60       	ori	r18, 0x06	; 6
    1eb6:	b2 2e       	mov	r11, r18
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <vfprintf+0x28e>
    1eba:	28 e0       	ldi	r18, 0x08	; 8
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	05 c0       	rjmp	.+10     	; 0x1eca <vfprintf+0x292>
    1ec0:	20 e1       	ldi	r18, 0x10	; 16
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <vfprintf+0x292>
    1ec6:	20 e1       	ldi	r18, 0x10	; 16
    1ec8:	32 e0       	ldi	r19, 0x02	; 2
    1eca:	f8 01       	movw	r30, r16
    1ecc:	b7 fe       	sbrs	r11, 7
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <vfprintf+0x2a6>
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	0c 5f       	subi	r16, 0xFC	; 252
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	06 c0       	rjmp	.+12     	; 0x1eea <vfprintf+0x2b2>
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 5f       	subi	r16, 0xFE	; 254
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	a3 01       	movw	r20, r6
    1eec:	ee d0       	rcall	.+476    	; 0x20ca <__ultoa_invert>
    1eee:	88 2e       	mov	r8, r24
    1ef0:	86 18       	sub	r8, r6
    1ef2:	fb 2d       	mov	r31, r11
    1ef4:	ff 77       	andi	r31, 0x7F	; 127
    1ef6:	3f 2e       	mov	r3, r31
    1ef8:	36 fe       	sbrs	r3, 6
    1efa:	0d c0       	rjmp	.+26     	; 0x1f16 <vfprintf+0x2de>
    1efc:	23 2d       	mov	r18, r3
    1efe:	2e 7f       	andi	r18, 0xFE	; 254
    1f00:	a2 2e       	mov	r10, r18
    1f02:	89 14       	cp	r8, r9
    1f04:	58 f4       	brcc	.+22     	; 0x1f1c <vfprintf+0x2e4>
    1f06:	34 fe       	sbrs	r3, 4
    1f08:	0b c0       	rjmp	.+22     	; 0x1f20 <vfprintf+0x2e8>
    1f0a:	32 fc       	sbrc	r3, 2
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <vfprintf+0x2e8>
    1f0e:	83 2d       	mov	r24, r3
    1f10:	8e 7e       	andi	r24, 0xEE	; 238
    1f12:	a8 2e       	mov	r10, r24
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <vfprintf+0x2e8>
    1f16:	b8 2c       	mov	r11, r8
    1f18:	a3 2c       	mov	r10, r3
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <vfprintf+0x2ea>
    1f1c:	b8 2c       	mov	r11, r8
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <vfprintf+0x2ea>
    1f20:	b9 2c       	mov	r11, r9
    1f22:	a4 fe       	sbrs	r10, 4
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <vfprintf+0x30c>
    1f26:	fe 01       	movw	r30, r28
    1f28:	e8 0d       	add	r30, r8
    1f2a:	f1 1d       	adc	r31, r1
    1f2c:	80 81       	ld	r24, Z
    1f2e:	80 33       	cpi	r24, 0x30	; 48
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <vfprintf+0x302>
    1f32:	9a 2d       	mov	r25, r10
    1f34:	99 7e       	andi	r25, 0xE9	; 233
    1f36:	a9 2e       	mov	r10, r25
    1f38:	09 c0       	rjmp	.+18     	; 0x1f4c <vfprintf+0x314>
    1f3a:	a2 fe       	sbrs	r10, 2
    1f3c:	06 c0       	rjmp	.+12     	; 0x1f4a <vfprintf+0x312>
    1f3e:	b3 94       	inc	r11
    1f40:	b3 94       	inc	r11
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <vfprintf+0x314>
    1f44:	8a 2d       	mov	r24, r10
    1f46:	86 78       	andi	r24, 0x86	; 134
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <vfprintf+0x314>
    1f4a:	b3 94       	inc	r11
    1f4c:	a3 fc       	sbrc	r10, 3
    1f4e:	10 c0       	rjmp	.+32     	; 0x1f70 <vfprintf+0x338>
    1f50:	a0 fe       	sbrs	r10, 0
    1f52:	06 c0       	rjmp	.+12     	; 0x1f60 <vfprintf+0x328>
    1f54:	b2 14       	cp	r11, r2
    1f56:	80 f4       	brcc	.+32     	; 0x1f78 <vfprintf+0x340>
    1f58:	28 0c       	add	r2, r8
    1f5a:	92 2c       	mov	r9, r2
    1f5c:	9b 18       	sub	r9, r11
    1f5e:	0d c0       	rjmp	.+26     	; 0x1f7a <vfprintf+0x342>
    1f60:	b2 14       	cp	r11, r2
    1f62:	58 f4       	brcc	.+22     	; 0x1f7a <vfprintf+0x342>
    1f64:	b6 01       	movw	r22, r12
    1f66:	80 e2       	ldi	r24, 0x20	; 32
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	73 d0       	rcall	.+230    	; 0x2052 <fputc>
    1f6c:	b3 94       	inc	r11
    1f6e:	f8 cf       	rjmp	.-16     	; 0x1f60 <vfprintf+0x328>
    1f70:	b2 14       	cp	r11, r2
    1f72:	18 f4       	brcc	.+6      	; 0x1f7a <vfprintf+0x342>
    1f74:	2b 18       	sub	r2, r11
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <vfprintf+0x344>
    1f78:	98 2c       	mov	r9, r8
    1f7a:	21 2c       	mov	r2, r1
    1f7c:	a4 fe       	sbrs	r10, 4
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <vfprintf+0x366>
    1f80:	b6 01       	movw	r22, r12
    1f82:	80 e3       	ldi	r24, 0x30	; 48
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	65 d0       	rcall	.+202    	; 0x2052 <fputc>
    1f88:	a2 fe       	sbrs	r10, 2
    1f8a:	16 c0       	rjmp	.+44     	; 0x1fb8 <vfprintf+0x380>
    1f8c:	a1 fc       	sbrc	r10, 1
    1f8e:	03 c0       	rjmp	.+6      	; 0x1f96 <vfprintf+0x35e>
    1f90:	88 e7       	ldi	r24, 0x78	; 120
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <vfprintf+0x362>
    1f96:	88 e5       	ldi	r24, 0x58	; 88
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	b6 01       	movw	r22, r12
    1f9c:	0c c0       	rjmp	.+24     	; 0x1fb6 <vfprintf+0x37e>
    1f9e:	8a 2d       	mov	r24, r10
    1fa0:	86 78       	andi	r24, 0x86	; 134
    1fa2:	51 f0       	breq	.+20     	; 0x1fb8 <vfprintf+0x380>
    1fa4:	a1 fe       	sbrs	r10, 1
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <vfprintf+0x374>
    1fa8:	8b e2       	ldi	r24, 0x2B	; 43
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <vfprintf+0x376>
    1fac:	80 e2       	ldi	r24, 0x20	; 32
    1fae:	a7 fc       	sbrc	r10, 7
    1fb0:	8d e2       	ldi	r24, 0x2D	; 45
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	4d d0       	rcall	.+154    	; 0x2052 <fputc>
    1fb8:	89 14       	cp	r8, r9
    1fba:	30 f4       	brcc	.+12     	; 0x1fc8 <vfprintf+0x390>
    1fbc:	b6 01       	movw	r22, r12
    1fbe:	80 e3       	ldi	r24, 0x30	; 48
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	47 d0       	rcall	.+142    	; 0x2052 <fputc>
    1fc4:	9a 94       	dec	r9
    1fc6:	f8 cf       	rjmp	.-16     	; 0x1fb8 <vfprintf+0x380>
    1fc8:	8a 94       	dec	r8
    1fca:	f3 01       	movw	r30, r6
    1fcc:	e8 0d       	add	r30, r8
    1fce:	f1 1d       	adc	r31, r1
    1fd0:	80 81       	ld	r24, Z
    1fd2:	b6 01       	movw	r22, r12
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	3d d0       	rcall	.+122    	; 0x2052 <fputc>
    1fd8:	81 10       	cpse	r8, r1
    1fda:	f6 cf       	rjmp	.-20     	; 0x1fc8 <vfprintf+0x390>
    1fdc:	22 20       	and	r2, r2
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <vfprintf+0x3aa>
    1fe0:	4e ce       	rjmp	.-868    	; 0x1c7e <vfprintf+0x46>
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	34 d0       	rcall	.+104    	; 0x2052 <fputc>
    1fea:	2a 94       	dec	r2
    1fec:	f7 cf       	rjmp	.-18     	; 0x1fdc <vfprintf+0x3a4>
    1fee:	f6 01       	movw	r30, r12
    1ff0:	86 81       	ldd	r24, Z+6	; 0x06
    1ff2:	97 81       	ldd	r25, Z+7	; 0x07
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x3c2>
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	9f ef       	ldi	r25, 0xFF	; 255
    1ffa:	2b 96       	adiw	r28, 0x0b	; 11
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	9f 90       	pop	r9
    2016:	8f 90       	pop	r8
    2018:	7f 90       	pop	r7
    201a:	6f 90       	pop	r6
    201c:	5f 90       	pop	r5
    201e:	4f 90       	pop	r4
    2020:	3f 90       	pop	r3
    2022:	2f 90       	pop	r2
    2024:	08 95       	ret

00002026 <strnlen_P>:
    2026:	fc 01       	movw	r30, r24
    2028:	05 90       	lpm	r0, Z+
    202a:	61 50       	subi	r22, 0x01	; 1
    202c:	70 40       	sbci	r23, 0x00	; 0
    202e:	01 10       	cpse	r0, r1
    2030:	d8 f7       	brcc	.-10     	; 0x2028 <strnlen_P+0x2>
    2032:	80 95       	com	r24
    2034:	90 95       	com	r25
    2036:	8e 0f       	add	r24, r30
    2038:	9f 1f       	adc	r25, r31
    203a:	08 95       	ret

0000203c <strnlen>:
    203c:	fc 01       	movw	r30, r24
    203e:	61 50       	subi	r22, 0x01	; 1
    2040:	70 40       	sbci	r23, 0x00	; 0
    2042:	01 90       	ld	r0, Z+
    2044:	01 10       	cpse	r0, r1
    2046:	d8 f7       	brcc	.-10     	; 0x203e <strnlen+0x2>
    2048:	80 95       	com	r24
    204a:	90 95       	com	r25
    204c:	8e 0f       	add	r24, r30
    204e:	9f 1f       	adc	r25, r31
    2050:	08 95       	ret

00002052 <fputc>:
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	fb 01       	movw	r30, r22
    205c:	23 81       	ldd	r18, Z+3	; 0x03
    205e:	21 fd       	sbrc	r18, 1
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <fputc+0x16>
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	9f ef       	ldi	r25, 0xFF	; 255
    2066:	2c c0       	rjmp	.+88     	; 0x20c0 <fputc+0x6e>
    2068:	22 ff       	sbrs	r18, 2
    206a:	16 c0       	rjmp	.+44     	; 0x2098 <fputc+0x46>
    206c:	46 81       	ldd	r20, Z+6	; 0x06
    206e:	57 81       	ldd	r21, Z+7	; 0x07
    2070:	24 81       	ldd	r18, Z+4	; 0x04
    2072:	35 81       	ldd	r19, Z+5	; 0x05
    2074:	42 17       	cp	r20, r18
    2076:	53 07       	cpc	r21, r19
    2078:	44 f4       	brge	.+16     	; 0x208a <fputc+0x38>
    207a:	a0 81       	ld	r26, Z
    207c:	b1 81       	ldd	r27, Z+1	; 0x01
    207e:	9d 01       	movw	r18, r26
    2080:	2f 5f       	subi	r18, 0xFF	; 255
    2082:	3f 4f       	sbci	r19, 0xFF	; 255
    2084:	20 83       	st	Z, r18
    2086:	31 83       	std	Z+1, r19	; 0x01
    2088:	8c 93       	st	X, r24
    208a:	26 81       	ldd	r18, Z+6	; 0x06
    208c:	37 81       	ldd	r19, Z+7	; 0x07
    208e:	2f 5f       	subi	r18, 0xFF	; 255
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	26 83       	std	Z+6, r18	; 0x06
    2094:	37 83       	std	Z+7, r19	; 0x07
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <fputc+0x6e>
    2098:	8b 01       	movw	r16, r22
    209a:	ec 01       	movw	r28, r24
    209c:	fb 01       	movw	r30, r22
    209e:	00 84       	ldd	r0, Z+8	; 0x08
    20a0:	f1 85       	ldd	r31, Z+9	; 0x09
    20a2:	e0 2d       	mov	r30, r0
    20a4:	19 95       	eicall
    20a6:	89 2b       	or	r24, r25
    20a8:	e1 f6       	brne	.-72     	; 0x2062 <fputc+0x10>
    20aa:	d8 01       	movw	r26, r16
    20ac:	16 96       	adiw	r26, 0x06	; 6
    20ae:	8d 91       	ld	r24, X+
    20b0:	9c 91       	ld	r25, X
    20b2:	17 97       	sbiw	r26, 0x07	; 7
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	16 96       	adiw	r26, 0x06	; 6
    20b8:	8d 93       	st	X+, r24
    20ba:	9c 93       	st	X, r25
    20bc:	17 97       	sbiw	r26, 0x07	; 7
    20be:	ce 01       	movw	r24, r28
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <__ultoa_invert>:
    20ca:	fa 01       	movw	r30, r20
    20cc:	aa 27       	eor	r26, r26
    20ce:	28 30       	cpi	r18, 0x08	; 8
    20d0:	51 f1       	breq	.+84     	; 0x2126 <__ultoa_invert+0x5c>
    20d2:	20 31       	cpi	r18, 0x10	; 16
    20d4:	81 f1       	breq	.+96     	; 0x2136 <__ultoa_invert+0x6c>
    20d6:	e8 94       	clt
    20d8:	6f 93       	push	r22
    20da:	6e 7f       	andi	r22, 0xFE	; 254
    20dc:	6e 5f       	subi	r22, 0xFE	; 254
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	8f 4f       	sbci	r24, 0xFF	; 255
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	af 4f       	sbci	r26, 0xFF	; 255
    20e6:	b1 e0       	ldi	r27, 0x01	; 1
    20e8:	3e d0       	rcall	.+124    	; 0x2166 <__ultoa_invert+0x9c>
    20ea:	b4 e0       	ldi	r27, 0x04	; 4
    20ec:	3c d0       	rcall	.+120    	; 0x2166 <__ultoa_invert+0x9c>
    20ee:	67 0f       	add	r22, r23
    20f0:	78 1f       	adc	r23, r24
    20f2:	89 1f       	adc	r24, r25
    20f4:	9a 1f       	adc	r25, r26
    20f6:	a1 1d       	adc	r26, r1
    20f8:	68 0f       	add	r22, r24
    20fa:	79 1f       	adc	r23, r25
    20fc:	8a 1f       	adc	r24, r26
    20fe:	91 1d       	adc	r25, r1
    2100:	a1 1d       	adc	r26, r1
    2102:	6a 0f       	add	r22, r26
    2104:	71 1d       	adc	r23, r1
    2106:	81 1d       	adc	r24, r1
    2108:	91 1d       	adc	r25, r1
    210a:	a1 1d       	adc	r26, r1
    210c:	20 d0       	rcall	.+64     	; 0x214e <__ultoa_invert+0x84>
    210e:	09 f4       	brne	.+2      	; 0x2112 <__ultoa_invert+0x48>
    2110:	68 94       	set
    2112:	3f 91       	pop	r19
    2114:	2a e0       	ldi	r18, 0x0A	; 10
    2116:	26 9f       	mul	r18, r22
    2118:	11 24       	eor	r1, r1
    211a:	30 19       	sub	r19, r0
    211c:	30 5d       	subi	r19, 0xD0	; 208
    211e:	31 93       	st	Z+, r19
    2120:	de f6       	brtc	.-74     	; 0x20d8 <__ultoa_invert+0xe>
    2122:	cf 01       	movw	r24, r30
    2124:	08 95       	ret
    2126:	46 2f       	mov	r20, r22
    2128:	47 70       	andi	r20, 0x07	; 7
    212a:	40 5d       	subi	r20, 0xD0	; 208
    212c:	41 93       	st	Z+, r20
    212e:	b3 e0       	ldi	r27, 0x03	; 3
    2130:	0f d0       	rcall	.+30     	; 0x2150 <__ultoa_invert+0x86>
    2132:	c9 f7       	brne	.-14     	; 0x2126 <__ultoa_invert+0x5c>
    2134:	f6 cf       	rjmp	.-20     	; 0x2122 <__ultoa_invert+0x58>
    2136:	46 2f       	mov	r20, r22
    2138:	4f 70       	andi	r20, 0x0F	; 15
    213a:	40 5d       	subi	r20, 0xD0	; 208
    213c:	4a 33       	cpi	r20, 0x3A	; 58
    213e:	18 f0       	brcs	.+6      	; 0x2146 <__ultoa_invert+0x7c>
    2140:	49 5d       	subi	r20, 0xD9	; 217
    2142:	31 fd       	sbrc	r19, 1
    2144:	40 52       	subi	r20, 0x20	; 32
    2146:	41 93       	st	Z+, r20
    2148:	02 d0       	rcall	.+4      	; 0x214e <__ultoa_invert+0x84>
    214a:	a9 f7       	brne	.-22     	; 0x2136 <__ultoa_invert+0x6c>
    214c:	ea cf       	rjmp	.-44     	; 0x2122 <__ultoa_invert+0x58>
    214e:	b4 e0       	ldi	r27, 0x04	; 4
    2150:	a6 95       	lsr	r26
    2152:	97 95       	ror	r25
    2154:	87 95       	ror	r24
    2156:	77 95       	ror	r23
    2158:	67 95       	ror	r22
    215a:	ba 95       	dec	r27
    215c:	c9 f7       	brne	.-14     	; 0x2150 <__ultoa_invert+0x86>
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	61 05       	cpc	r22, r1
    2162:	71 05       	cpc	r23, r1
    2164:	08 95       	ret
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	0a 2e       	mov	r0, r26
    216c:	06 94       	lsr	r0
    216e:	57 95       	ror	r21
    2170:	47 95       	ror	r20
    2172:	37 95       	ror	r19
    2174:	27 95       	ror	r18
    2176:	ba 95       	dec	r27
    2178:	c9 f7       	brne	.-14     	; 0x216c <__ultoa_invert+0xa2>
    217a:	62 0f       	add	r22, r18
    217c:	73 1f       	adc	r23, r19
    217e:	84 1f       	adc	r24, r20
    2180:	95 1f       	adc	r25, r21
    2182:	a0 1d       	adc	r26, r0
    2184:	08 95       	ret

00002186 <_exit>:
    2186:	f8 94       	cli

00002188 <__stop_program>:
    2188:	ff cf       	rjmp	.-2      	; 0x2188 <__stop_program>
