
Praktikum 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00802000  00001dca  00001e5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026a  00802088  00802088  00001ee6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c0  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f2df  00000000  00000000  0000231c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005187  00000000  00000000  000115fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008442  00000000  00000000  00016782  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e08  00000000  00000000  0001ebc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033b66  00000000  00000000  0001f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000693b  00000000  00000000  00053532  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  00059e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c4be  00000000  00000000  0005a32d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	df c5       	rjmp	.+3006   	; 0xc5c <__vector_39>
      9e:	00 00       	nop
      a0:	0f c6       	rjmp	.+3102   	; 0xcc0 <__vector_40>
      a2:	00 00       	nop
      a4:	3f c6       	rjmp	.+3198   	; 0xd24 <__vector_41>
      a6:	00 00       	nop
      a8:	6f c6       	rjmp	.+3294   	; 0xd88 <__vector_42>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d7 c4       	rjmp	.+2478   	; 0xacc <__vector_71>
     11e:	00 00       	nop
     120:	07 c5       	rjmp	.+2574   	; 0xb30 <__vector_72>
     122:	00 00       	nop
     124:	37 c5       	rjmp	.+2670   	; 0xb94 <__vector_73>
     126:	00 00       	nop
     128:	67 c5       	rjmp	.+2766   	; 0xbf8 <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dae>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6596>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x656e>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5596>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d6e>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea ec       	ldi	r30, 0xCA	; 202
     4a6:	fd e1       	ldi	r31, 0x1D	; 29
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 38       	cpi	r26, 0x88	; 136
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a8 e8       	ldi	r26, 0x88	; 136
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a2 3f       	cpi	r26, 0xF2	; 242
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <main>
     4cc:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	0e 94 2b 0b 	call	0x1656	; 0x1656 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	76 01       	movw	r14, r12
     53e:	00 e4       	ldi	r16, 0x40	; 64
     540:	12 e4       	ldi	r17, 0x42	; 66
     542:	2f e0       	ldi	r18, 0x0F	; 15
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	43 e0       	ldi	r20, 0x03	; 3
     548:	be 01       	movw	r22, r28
     54a:	6f 5f       	subi	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 ea       	ldi	r24, 0xA0	; 160
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     556:	00 e6       	ldi	r16, 0x60	; 96
     558:	16 e0       	ldi	r17, 0x06	; 6
     55a:	ff 24       	eor	r15, r15
     55c:	f3 94       	inc	r15
     55e:	f8 01       	movw	r30, r16
     560:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     562:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     572:	f8 01       	movw	r30, r16
     574:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f9 e0       	ldi	r31, 0x09	; 9
     57a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57c:	85 ff       	sbrs	r24, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     580:	80 ea       	ldi	r24, 0xA0	; 160
     582:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58c:	86 ff       	sbrs	r24, 6
     58e:	fd cf       	rjmp	.-6      	; 0x58a <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f9 e0       	ldi	r31, 0x09	; 9
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     598:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     59a:	be 01       	movw	r22, r28
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	99 e0       	ldi	r25, 0x09	; 9
     5a4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5c0:	e0 ea       	ldi	r30, 0xA0	; 160
     5c2:	f9 e0       	ldi	r31, 0x09	; 9
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5e2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	99 e0       	ldi	r25, 0x09	; 9
     5ee:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	99 e0       	ldi	r25, 0x09	; 9
     600:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     610:	85 ff       	sbrs	r24, 5
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     614:	88 ec       	ldi	r24, 0xC8	; 200
     616:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	f9 e0       	ldi	r31, 0x09	; 9
     61e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     620:	86 ff       	sbrs	r24, 6
     622:	fd cf       	rjmp	.-6      	; 0x61e <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     624:	e0 ea       	ldi	r30, 0xA0	; 160
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	80 e4       	ldi	r24, 0x40	; 64
     62a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     62c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63c:	8b e2       	ldi	r24, 0x2B	; 43
     63e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	80 ea       	ldi	r24, 0xA0	; 160
     648:	99 e0       	ldi	r25, 0x09	; 9
     64a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     654:	e0 ea       	ldi	r30, 0xA0	; 160
     656:	f9 e0       	ldi	r31, 0x09	; 9
     658:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65a:	85 ff       	sbrs	r24, 5
     65c:	fd cf       	rjmp	.-6      	; 0x658 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     65e:	82 ea       	ldi	r24, 0xA2	; 162
     660:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     664:	e0 ea       	ldi	r30, 0xA0	; 160
     666:	f9 e0       	ldi	r31, 0x09	; 9
     668:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66a:	86 ff       	sbrs	r24, 6
     66c:	fd cf       	rjmp	.-6      	; 0x668 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f9 e0       	ldi	r31, 0x09	; 9
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	99 e0       	ldi	r25, 0x09	; 9
     682:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69e:	e0 ea       	ldi	r30, 0xA0	; 160
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a4:	85 ff       	sbrs	r24, 5
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a8:	8f e2       	ldi	r24, 0x2F	; 47
     6aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ba:	f9 e0       	ldi	r31, 0x09	; 9
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6c0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	80 ea       	ldi	r24, 0xA0	; 160
     6ca:	99 e0       	ldi	r25, 0x09	; 9
     6cc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6d0:	8b e2       	ldi	r24, 0x2B	; 43
     6d2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	99 e0       	ldi	r25, 0x09	; 9
     6de:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <usart_spi_select_device>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6f2:	88 ef       	ldi	r24, 0xF8	; 248
     6f4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f8:	e0 ea       	ldi	r30, 0xA0	; 160
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6fe:	86 ff       	sbrs	r24, 6
     700:	fd cf       	rjmp	.-6      	; 0x6fc <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     702:	e0 ea       	ldi	r30, 0xA0	; 160
     704:	f9 e0       	ldi	r31, 0x09	; 9
     706:	80 e4       	ldi	r24, 0x40	; 64
     708:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     70a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	99 e0       	ldi	r25, 0x09	; 9
     716:	fe d7       	rcall	.+4092   	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     718:	8b e2       	ldi	r24, 0x2B	; 43
     71a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	80 ea       	ldi	r24, 0xA0	; 160
     724:	99 e0       	ldi	r25, 0x09	; 9
     726:	e0 d7       	rcall	.+4032   	; 0x16e8 <usart_spi_select_device>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     72e:	e0 ea       	ldi	r30, 0xA0	; 160
     730:	f9 e0       	ldi	r31, 0x09	; 9
     732:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     734:	85 ff       	sbrs	r24, 5
     736:	fd cf       	rjmp	.-6      	; 0x732 <st7565r_init+0x24a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     738:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     73c:	e0 ea       	ldi	r30, 0xA0	; 160
     73e:	f9 e0       	ldi	r31, 0x09	; 9
     740:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     742:	86 ff       	sbrs	r24, 6
     744:	fd cf       	rjmp	.-6      	; 0x740 <st7565r_init+0x258>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     746:	e0 ea       	ldi	r30, 0xA0	; 160
     748:	f9 e0       	ldi	r31, 0x09	; 9
     74a:	80 e4       	ldi	r24, 0x40	; 64
     74c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     74e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	80 ea       	ldi	r24, 0xA0	; 160
     758:	99 e0       	ldi	r25, 0x09	; 9
     75a:	dc d7       	rcall	.+4024   	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     75c:	8b e2       	ldi	r24, 0x2B	; 43
     75e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     760:	be 01       	movw	r22, r28
     762:	6f 5f       	subi	r22, 0xFF	; 255
     764:	7f 4f       	sbci	r23, 0xFF	; 255
     766:	80 ea       	ldi	r24, 0xA0	; 160
     768:	99 e0       	ldi	r25, 0x09	; 9
     76a:	be d7       	rcall	.+3964   	; 0x16e8 <usart_spi_select_device>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
     776:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     778:	85 ff       	sbrs	r24, 5
     77a:	fd cf       	rjmp	.-6      	; 0x776 <st7565r_init+0x28e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     77c:	81 e2       	ldi	r24, 0x21	; 33
     77e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     782:	e0 ea       	ldi	r30, 0xA0	; 160
     784:	f9 e0       	ldi	r31, 0x09	; 9
     786:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     788:	86 ff       	sbrs	r24, 6
     78a:	fd cf       	rjmp	.-6      	; 0x786 <st7565r_init+0x29e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     78c:	e0 ea       	ldi	r30, 0xA0	; 160
     78e:	f9 e0       	ldi	r31, 0x09	; 9
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     794:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 ea       	ldi	r24, 0xA0	; 160
     79e:	99 e0       	ldi	r25, 0x09	; 9
     7a0:	b9 d7       	rcall	.+3954   	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7a2:	8b e2       	ldi	r24, 0x2B	; 43
     7a4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	99 e0       	ldi	r25, 0x09	; 9
     7b0:	9b d7       	rcall	.+3894   	; 0x16e8 <usart_spi_select_device>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
     7bc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7be:	85 ff       	sbrs	r24, 5
     7c0:	fd cf       	rjmp	.-6      	; 0x7bc <st7565r_init+0x2d4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7c2:	81 e8       	ldi	r24, 0x81	; 129
     7c4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7c8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ca:	f9 e0       	ldi	r31, 0x09	; 9
     7cc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ce:	86 ff       	sbrs	r24, 6
     7d0:	fd cf       	rjmp	.-6      	; 0x7cc <st7565r_init+0x2e4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7d2:	e0 ea       	ldi	r30, 0xA0	; 160
     7d4:	f9 e0       	ldi	r31, 0x09	; 9
     7d6:	80 e4       	ldi	r24, 0x40	; 64
     7d8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7da:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	80 ea       	ldi	r24, 0xA0	; 160
     7e4:	99 e0       	ldi	r25, 0x09	; 9
     7e6:	96 d7       	rcall	.+3884   	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7e8:	8b e2       	ldi	r24, 0x2B	; 43
     7ea:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 ea       	ldi	r24, 0xA0	; 160
     7f4:	99 e0       	ldi	r25, 0x09	; 9
     7f6:	78 d7       	rcall	.+3824   	; 0x16e8 <usart_spi_select_device>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
     802:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     804:	85 ff       	sbrs	r24, 5
     806:	fd cf       	rjmp	.-6      	; 0x802 <st7565r_init+0x31a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     808:	81 e2       	ldi	r24, 0x21	; 33
     80a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f9 e0       	ldi	r31, 0x09	; 9
     812:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     814:	86 ff       	sbrs	r24, 6
     816:	fd cf       	rjmp	.-6      	; 0x812 <st7565r_init+0x32a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     818:	e0 ea       	ldi	r30, 0xA0	; 160
     81a:	f9 e0       	ldi	r31, 0x09	; 9
     81c:	80 e4       	ldi	r24, 0x40	; 64
     81e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     820:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	80 ea       	ldi	r24, 0xA0	; 160
     82a:	99 e0       	ldi	r25, 0x09	; 9
     82c:	73 d7       	rcall	.+3814   	; 0x1714 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     82e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	80 ea       	ldi	r24, 0xA0	; 160
     83a:	99 e0       	ldi	r25, 0x09	; 9
     83c:	55 d7       	rcall	.+3754   	; 0x16e8 <usart_spi_select_device>
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     84a:	85 ff       	sbrs	r24, 5
     84c:	fd cf       	rjmp	.-6      	; 0x848 <st7565r_init+0x360>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     84e:	8f ea       	ldi	r24, 0xAF	; 175
     850:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     854:	e0 ea       	ldi	r30, 0xA0	; 160
     856:	f9 e0       	ldi	r31, 0x09	; 9
     858:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     85a:	86 ff       	sbrs	r24, 6
     85c:	fd cf       	rjmp	.-6      	; 0x858 <st7565r_init+0x370>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     85e:	e0 ea       	ldi	r30, 0xA0	; 160
     860:	f9 e0       	ldi	r31, 0x09	; 9
     862:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     864:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     866:	80 81       	ld	r24, Z
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	80 ea       	ldi	r24, 0xA0	; 160
     870:	99 e0       	ldi	r25, 0x09	; 9
     872:	50 d7       	rcall	.+3744   	; 0x1714 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	cf 90       	pop	r12
     886:	bf 90       	pop	r11
     888:	08 95       	ret

0000088a <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	08 2f       	mov	r16, r24
     89c:	f6 2e       	mov	r15, r22
     89e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8a0:	54 d7       	rcall	.+3752   	; 0x174a <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8a2:	0f 70       	andi	r16, 0x0F	; 15
     8a4:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8a6:	8b e2       	ldi	r24, 0x2B	; 43
     8a8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	80 ea       	ldi	r24, 0xA0	; 160
     8b2:	99 e0       	ldi	r25, 0x09	; 9
     8b4:	19 d7       	rcall	.+3634   	; 0x16e8 <usart_spi_select_device>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8bc:	e0 ea       	ldi	r30, 0xA0	; 160
     8be:	f9 e0       	ldi	r31, 0x09	; 9
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8c2:	95 ff       	sbrs	r25, 5
     8c4:	fd cf       	rjmp	.-6      	; 0x8c0 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8c6:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8ca:	e0 ea       	ldi	r30, 0xA0	; 160
     8cc:	f9 e0       	ldi	r31, 0x09	; 9
     8ce:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8d0:	86 ff       	sbrs	r24, 6
     8d2:	fd cf       	rjmp	.-6      	; 0x8ce <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8d4:	e0 ea       	ldi	r30, 0xA0	; 160
     8d6:	f9 e0       	ldi	r31, 0x09	; 9
     8d8:	80 e4       	ldi	r24, 0x40	; 64
     8da:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8dc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	80 ea       	ldi	r24, 0xA0	; 160
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	15 d7       	rcall	.+3626   	; 0x1714 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8ea:	0f 2d       	mov	r16, r15
     8ec:	0f 77       	andi	r16, 0x7F	; 127
     8ee:	02 95       	swap	r16
     8f0:	0f 70       	andi	r16, 0x0F	; 15
     8f2:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8f4:	8b e2       	ldi	r24, 0x2B	; 43
     8f6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	80 ea       	ldi	r24, 0xA0	; 160
     900:	99 e0       	ldi	r25, 0x09	; 9
     902:	f2 d6       	rcall	.+3556   	; 0x16e8 <usart_spi_select_device>
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     90a:	e0 ea       	ldi	r30, 0xA0	; 160
     90c:	f9 e0       	ldi	r31, 0x09	; 9
     90e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     910:	85 ff       	sbrs	r24, 5
     912:	fd cf       	rjmp	.-6      	; 0x90e <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     914:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     918:	e0 ea       	ldi	r30, 0xA0	; 160
     91a:	f9 e0       	ldi	r31, 0x09	; 9
     91c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     91e:	86 ff       	sbrs	r24, 6
     920:	fd cf       	rjmp	.-6      	; 0x91c <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     922:	e0 ea       	ldi	r30, 0xA0	; 160
     924:	f9 e0       	ldi	r31, 0x09	; 9
     926:	80 e4       	ldi	r24, 0x40	; 64
     928:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     92a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     92c:	be 01       	movw	r22, r28
     92e:	6f 5f       	subi	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	80 ea       	ldi	r24, 0xA0	; 160
     934:	99 e0       	ldi	r25, 0x09	; 9
     936:	ee d6       	rcall	.+3548   	; 0x1714 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     938:	0f 2d       	mov	r16, r15
     93a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     93c:	8b e2       	ldi	r24, 0x2B	; 43
     93e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	80 ea       	ldi	r24, 0xA0	; 160
     948:	99 e0       	ldi	r25, 0x09	; 9
     94a:	ce d6       	rcall	.+3484   	; 0x16e8 <usart_spi_select_device>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     952:	e0 ea       	ldi	r30, 0xA0	; 160
     954:	f9 e0       	ldi	r31, 0x09	; 9
     956:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     958:	85 ff       	sbrs	r24, 5
     95a:	fd cf       	rjmp	.-6      	; 0x956 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     95c:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     960:	e0 ea       	ldi	r30, 0xA0	; 160
     962:	f9 e0       	ldi	r31, 0x09	; 9
     964:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     966:	86 ff       	sbrs	r24, 6
     968:	fd cf       	rjmp	.-6      	; 0x964 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     96a:	e0 ea       	ldi	r30, 0xA0	; 160
     96c:	f9 e0       	ldi	r31, 0x09	; 9
     96e:	80 e4       	ldi	r24, 0x40	; 64
     970:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     972:	80 81       	ld	r24, Z
     974:	be 01       	movw	r22, r28
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	80 ea       	ldi	r24, 0xA0	; 160
     97c:	99 e0       	ldi	r25, 0x09	; 9
     97e:	ca d6       	rcall	.+3476   	; 0x1714 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     980:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	be 01       	movw	r22, r28
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	80 ea       	ldi	r24, 0xA0	; 160
     98c:	99 e0       	ldi	r25, 0x09	; 9
     98e:	ac d6       	rcall	.+3416   	; 0x16e8 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     996:	e0 ea       	ldi	r30, 0xA0	; 160
     998:	f9 e0       	ldi	r31, 0x09	; 9
     99a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     99c:	85 ff       	sbrs	r24, 5
     99e:	fd cf       	rjmp	.-6      	; 0x99a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9a0:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9a4:	e0 ea       	ldi	r30, 0xA0	; 160
     9a6:	f9 e0       	ldi	r31, 0x09	; 9
     9a8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9aa:	86 ff       	sbrs	r24, 6
     9ac:	fd cf       	rjmp	.-6      	; 0x9a8 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9ae:	e0 ea       	ldi	r30, 0xA0	; 160
     9b0:	f9 e0       	ldi	r31, 0x09	; 9
     9b2:	80 e4       	ldi	r24, 0x40	; 64
     9b4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9b6:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9be:	be 01       	movw	r22, r28
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	80 ea       	ldi	r24, 0xA0	; 160
     9c6:	99 e0       	ldi	r25, 0x09	; 9
     9c8:	a5 d6       	rcall	.+3402   	; 0x1714 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9ca:	0f 90       	pop	r0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	08 95       	ret

000009d8 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9e6:	88 e8       	ldi	r24, 0x88	; 136
     9e8:	90 e2       	ldi	r25, 0x20	; 32
     9ea:	aa d6       	rcall	.+3412   	; 0x1740 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9ec:	7d dd       	rcall	.-1286   	; 0x4e8 <st7565r_init>
     9ee:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9f0:	89 83       	std	Y+1, r24	; 0x01
     9f2:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	80 ea       	ldi	r24, 0xA0	; 160
     9fa:	99 e0       	ldi	r25, 0x09	; 9
     9fc:	75 d6       	rcall	.+3306   	; 0x16e8 <usart_spi_select_device>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     a04:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	81 81       	ldd	r24, Z+1	; 0x01
     a0a:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a0c:	fd cf       	rjmp	.-6      	; 0xa08 <gfx_mono_st7565r_init+0x30>
     a0e:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a10:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     a14:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	81 81       	ldd	r24, Z+1	; 0x01
     a1a:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <gfx_mono_st7565r_init+0x40>
     a1e:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a20:	f9 e0       	ldi	r31, 0x09	; 9
     a22:	80 e4       	ldi	r24, 0x40	; 64
     a24:	81 83       	std	Z+1, r24	; 0x01
     a26:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a28:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	80 ea       	ldi	r24, 0xA0	; 160
     a30:	99 e0       	ldi	r25, 0x09	; 9
     a32:	70 d6       	rcall	.+3296   	; 0x1714 <usart_spi_deselect_device>
     a34:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a36:	0a c0       	rjmp	.+20     	; 0xa4c <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	61 2f       	mov	r22, r17
     a3c:	80 2f       	mov	r24, r16
     a3e:	25 df       	rcall	.-438    	; 0x88a <gfx_mono_st7565r_put_byte>
     a40:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a42:	10 38       	cpi	r17, 0x80	; 128
     a44:	c9 f7       	brne	.-14     	; 0xa38 <gfx_mono_st7565r_init+0x60>
     a46:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a48:	04 30       	cpi	r16, 0x04	; 4
     a4a:	11 f0       	breq	.+4      	; 0xa50 <gfx_mono_st7565r_init+0x78>
     a4c:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a4e:	f4 cf       	rjmp	.-24     	; 0xa38 <gfx_mono_st7565r_init+0x60>
     a50:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <gfx_mono_st7565r_draw_pixel>:
     a5c:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a66:	88 23       	and	r24, r24
     a68:	4c f1       	brlt	.+82     	; 0xabc <gfx_mono_st7565r_draw_pixel+0x60>
     a6a:	60 32       	cpi	r22, 0x20	; 32
     a6c:	38 f5       	brcc	.+78     	; 0xabc <gfx_mono_st7565r_draw_pixel+0x60>
     a6e:	d4 2f       	mov	r29, r20
     a70:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a72:	f6 2e       	mov	r15, r22
     a74:	f6 94       	lsr	r15
     a76:	f6 94       	lsr	r15
     a78:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	f8 9e       	mul	r15, r24
     a80:	60 19       	sub	r22, r0
     a82:	71 09       	sbc	r23, r1
     a84:	11 24       	eor	r1, r1
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	8c 01       	movw	r16, r24
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <gfx_mono_st7565r_draw_pixel+0x36>
     a8e:	00 0f       	add	r16, r16
     a90:	11 1f       	adc	r17, r17
     a92:	6a 95       	dec	r22
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a96:	6c 2f       	mov	r22, r28
     a98:	8f 2d       	mov	r24, r15
     a9a:	65 d6       	rcall	.+3274   	; 0x1766 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a9c:	d1 30       	cpi	r29, 0x01	; 1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <gfx_mono_st7565r_draw_pixel+0x4c>
     aa0:	28 f0       	brcs	.+10     	; 0xaac <gfx_mono_st7565r_draw_pixel+0x50>
     aa2:	d2 30       	cpi	r29, 0x02	; 2
     aa4:	31 f0       	breq	.+12     	; 0xab2 <gfx_mono_st7565r_draw_pixel+0x56>
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aa8:	80 2b       	or	r24, r16
		break;
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     aac:	00 95       	com	r16
     aae:	80 23       	and	r24, r16
		break;
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ab2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ab4:	48 2f       	mov	r20, r24
     ab6:	6c 2f       	mov	r22, r28
     ab8:	8f 2d       	mov	r24, r15
     aba:	e7 de       	rcall	.-562    	; 0x88a <gfx_mono_st7565r_put_byte>
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	08 95       	ret

00000ac8 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac8:	4e c6       	rjmp	.+3228   	; 0x1766 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     aca:	08 95       	ret

00000acc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	0b b6       	in	r0, 0x3b	; 59
     ad8:	0f 92       	push	r0
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     af2:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
     af6:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
     afa:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <adca_callback>
     afe:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <adca_callback+0x1>
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	19 95       	eicall
}
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	0b b6       	in	r0, 0x3b	; 59
     b3c:	0f 92       	push	r0
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     b56:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7be22c>
     b5a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7be22d>
     b5e:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <adca_callback>
     b62:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <adca_callback+0x1>
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	19 95       	eicall
}
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	bf 91       	pop	r27
     b74:	af 91       	pop	r26
     b76:	9f 91       	pop	r25
     b78:	8f 91       	pop	r24
     b7a:	7f 91       	pop	r23
     b7c:	6f 91       	pop	r22
     b7e:	5f 91       	pop	r21
     b80:	4f 91       	pop	r20
     b82:	3f 91       	pop	r19
     b84:	2f 91       	pop	r18
     b86:	0f 90       	pop	r0
     b88:	0b be       	out	0x3b, r0	; 59
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     b94:	1f 92       	push	r1
     b96:	0f 92       	push	r0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	0b b6       	in	r0, 0x3b	; 59
     ba0:	0f 92       	push	r0
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     bba:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7be234>
     bbe:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7be235>
     bc2:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <adca_callback>
     bc6:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <adca_callback+0x1>
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	92 e0       	ldi	r25, 0x02	; 2
     bd0:	19 95       	eicall
}
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	0f 90       	pop	r0
     bec:	0b be       	out	0x3b, r0	; 59
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     c1e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7be23c>
     c22:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7be23d>
     c26:	e0 91 f0 22 	lds	r30, 0x22F0	; 0x8022f0 <adca_callback>
     c2a:	f0 91 f1 22 	lds	r31, 0x22F1	; 0x8022f1 <adca_callback+0x1>
     c2e:	68 e0       	ldi	r22, 0x08	; 8
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	19 95       	eicall
}
     c36:	ff 91       	pop	r31
     c38:	ef 91       	pop	r30
     c3a:	bf 91       	pop	r27
     c3c:	af 91       	pop	r26
     c3e:	9f 91       	pop	r25
     c40:	8f 91       	pop	r24
     c42:	7f 91       	pop	r23
     c44:	6f 91       	pop	r22
     c46:	5f 91       	pop	r21
     c48:	4f 91       	pop	r20
     c4a:	3f 91       	pop	r19
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0b be       	out	0x3b, r0	; 59
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	0f 90       	pop	r0
     c58:	1f 90       	pop	r1
     c5a:	18 95       	reti

00000c5c <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	0b b6       	in	r0, 0x3b	; 59
     c68:	0f 92       	push	r0
     c6a:	2f 93       	push	r18
     c6c:	3f 93       	push	r19
     c6e:	4f 93       	push	r20
     c70:	5f 93       	push	r21
     c72:	6f 93       	push	r22
     c74:	7f 93       	push	r23
     c76:	8f 93       	push	r24
     c78:	9f 93       	push	r25
     c7a:	af 93       	push	r26
     c7c:	bf 93       	push	r27
     c7e:	ef 93       	push	r30
     c80:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     c82:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7be264>
     c86:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7be265>
     c8a:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <adcb_callback>
     c8e:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <adcb_callback+0x1>
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	80 e4       	ldi	r24, 0x40	; 64
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	19 95       	eicall
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	0b b6       	in	r0, 0x3b	; 59
     ccc:	0f 92       	push	r0
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ce6:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7be26c>
     cea:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7be26d>
     cee:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <adcb_callback>
     cf2:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <adcb_callback+0x1>
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	19 95       	eicall
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0b be       	out	0x3b, r0	; 59
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	0b b6       	in	r0, 0x3b	; 59
     d30:	0f 92       	push	r0
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     d4a:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7be274>
     d4e:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7be275>
     d52:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <adcb_callback>
     d56:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <adcb_callback+0x1>
     d5a:	64 e0       	ldi	r22, 0x04	; 4
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	19 95       	eicall
}
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0b be       	out	0x3b, r0	; 59
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	0b b6       	in	r0, 0x3b	; 59
     d94:	0f 92       	push	r0
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     dae:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7be27c>
     db2:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7be27d>
     db6:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <adcb_callback>
     dba:	f0 91 ef 22 	lds	r31, 0x22EF	; 0x8022ef <adcb_callback+0x1>
     dbe:	68 e0       	ldi	r22, 0x08	; 8
     dc0:	80 e4       	ldi	r24, 0x40	; 64
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	19 95       	eicall
}
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0b be       	out	0x3b, r0	; 59
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	7c 01       	movw	r14, r24
     e08:	4a 01       	movw	r8, r20
     e0a:	5b 01       	movw	r10, r22
     e0c:	28 01       	movw	r4, r16
     e0e:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e10:	fc 01       	movw	r30, r24
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	82 ff       	sbrs	r24, 2
     e16:	16 c0       	rjmp	.+44     	; 0xe44 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     e18:	d9 01       	movw	r26, r18
     e1a:	c8 01       	movw	r24, r16
     e1c:	68 94       	set
     e1e:	12 f8       	bld	r1, 2
     e20:	b6 95       	lsr	r27
     e22:	a7 95       	ror	r26
     e24:	97 95       	ror	r25
     e26:	87 95       	ror	r24
     e28:	16 94       	lsr	r1
     e2a:	d1 f7       	brne	.-12     	; 0xe20 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e2c:	b9 01       	movw	r22, r18
     e2e:	a8 01       	movw	r20, r16
     e30:	03 2e       	mov	r0, r19
     e32:	36 e1       	ldi	r19, 0x16	; 22
     e34:	76 95       	lsr	r23
     e36:	67 95       	ror	r22
     e38:	57 95       	ror	r21
     e3a:	47 95       	ror	r20
     e3c:	3a 95       	dec	r19
     e3e:	d1 f7       	brne	.-12     	; 0xe34 <usart_set_baudrate+0x48>
     e40:	30 2d       	mov	r19, r0
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     e44:	d9 01       	movw	r26, r18
     e46:	c8 01       	movw	r24, r16
     e48:	68 94       	set
     e4a:	13 f8       	bld	r1, 3
     e4c:	b6 95       	lsr	r27
     e4e:	a7 95       	ror	r26
     e50:	97 95       	ror	r25
     e52:	87 95       	ror	r24
     e54:	16 94       	lsr	r1
     e56:	d1 f7       	brne	.-12     	; 0xe4c <usart_set_baudrate+0x60>
		min_rate /= 2;
     e58:	b9 01       	movw	r22, r18
     e5a:	a8 01       	movw	r20, r16
     e5c:	03 2e       	mov	r0, r19
     e5e:	37 e1       	ldi	r19, 0x17	; 23
     e60:	76 95       	lsr	r23
     e62:	67 95       	ror	r22
     e64:	57 95       	ror	r21
     e66:	47 95       	ror	r20
     e68:	3a 95       	dec	r19
     e6a:	d1 f7       	brne	.-12     	; 0xe60 <usart_set_baudrate+0x74>
     e6c:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     e6e:	88 15       	cp	r24, r8
     e70:	99 05       	cpc	r25, r9
     e72:	aa 05       	cpc	r26, r10
     e74:	bb 05       	cpc	r27, r11
     e76:	08 f4       	brcc	.+2      	; 0xe7a <usart_set_baudrate+0x8e>
     e78:	a2 c0       	rjmp	.+324    	; 0xfbe <usart_set_baudrate+0x1d2>
     e7a:	84 16       	cp	r8, r20
     e7c:	95 06       	cpc	r9, r21
     e7e:	a6 06       	cpc	r10, r22
     e80:	b7 06       	cpc	r11, r23
     e82:	08 f4       	brcc	.+2      	; 0xe86 <usart_set_baudrate+0x9a>
     e84:	9e c0       	rjmp	.+316    	; 0xfc2 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e86:	f7 01       	movw	r30, r14
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	82 fd       	sbrc	r24, 2
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <usart_set_baudrate+0xaa>
		baud *= 2;
     e8e:	88 0c       	add	r8, r8
     e90:	99 1c       	adc	r9, r9
     e92:	aa 1c       	adc	r10, r10
     e94:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     e96:	c3 01       	movw	r24, r6
     e98:	b2 01       	movw	r22, r4
     e9a:	a5 01       	movw	r20, r10
     e9c:	94 01       	movw	r18, r8
     e9e:	4c d7       	rcall	.+3736   	; 0x1d38 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     ea0:	2f 3f       	cpi	r18, 0xFF	; 255
     ea2:	31 05       	cpc	r19, r1
     ea4:	41 05       	cpc	r20, r1
     ea6:	51 05       	cpc	r21, r1
     ea8:	08 f4       	brcc	.+2      	; 0xeac <usart_set_baudrate+0xc0>
     eaa:	8d c0       	rjmp	.+282    	; 0xfc6 <usart_set_baudrate+0x1da>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	c9 ef       	ldi	r28, 0xF9	; 249
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <usart_set_baudrate+0xd6>
     eb8:	28 17       	cp	r18, r24
     eba:	39 07       	cpc	r19, r25
     ebc:	4a 07       	cpc	r20, r26
     ebe:	5b 07       	cpc	r21, r27
     ec0:	58 f0       	brcs	.+22     	; 0xed8 <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	aa 1f       	adc	r26, r26
     ec8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     eca:	cd 3f       	cpi	r28, 0xFD	; 253
     ecc:	0c f4       	brge	.+2      	; 0xed0 <usart_set_baudrate+0xe4>
			limit |= 1;
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     ed2:	c7 30       	cpi	r28, 0x07	; 7
     ed4:	89 f7       	brne	.-30     	; 0xeb8 <usart_set_baudrate+0xcc>
     ed6:	4d c0       	rjmp	.+154    	; 0xf72 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     ed8:	cc 23       	and	r28, r28
     eda:	0c f0       	brlt	.+2      	; 0xede <usart_set_baudrate+0xf2>
     edc:	4a c0       	rjmp	.+148    	; 0xf72 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     ede:	d5 01       	movw	r26, r10
     ee0:	c4 01       	movw	r24, r8
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	aa 1f       	adc	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	aa 1f       	adc	r26, r26
     ef0:	bb 1f       	adc	r27, r27
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	aa 1f       	adc	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	48 1a       	sub	r4, r24
     efc:	59 0a       	sbc	r5, r25
     efe:	6a 0a       	sbc	r6, r26
     f00:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f02:	ce 3f       	cpi	r28, 0xFE	; 254
     f04:	ec f4       	brge	.+58     	; 0xf40 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     f06:	8d ef       	ldi	r24, 0xFD	; 253
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	8c 1b       	sub	r24, r28
     f0c:	91 09       	sbc	r25, r1
     f0e:	c7 fd       	sbrc	r28, 7
     f10:	93 95       	inc	r25
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <usart_set_baudrate+0x130>
     f14:	44 0c       	add	r4, r4
     f16:	55 1c       	adc	r5, r5
     f18:	66 1c       	adc	r6, r6
     f1a:	77 1c       	adc	r7, r7
     f1c:	8a 95       	dec	r24
     f1e:	d2 f7       	brpl	.-12     	; 0xf14 <usart_set_baudrate+0x128>
     f20:	d5 01       	movw	r26, r10
     f22:	c4 01       	movw	r24, r8
     f24:	b6 95       	lsr	r27
     f26:	a7 95       	ror	r26
     f28:	97 95       	ror	r25
     f2a:	87 95       	ror	r24
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	64 0d       	add	r22, r4
     f32:	75 1d       	adc	r23, r5
     f34:	86 1d       	adc	r24, r6
     f36:	97 1d       	adc	r25, r7
     f38:	a5 01       	movw	r20, r10
     f3a:	94 01       	movw	r18, r8
     f3c:	fd d6       	rcall	.+3578   	; 0x1d38 <__udivmodsi4>
     f3e:	35 c0       	rjmp	.+106    	; 0xfaa <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	8c 0f       	add	r24, r28
     f44:	a5 01       	movw	r20, r10
     f46:	94 01       	movw	r18, r8
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <usart_set_baudrate+0x166>
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	44 1f       	adc	r20, r20
     f50:	55 1f       	adc	r21, r21
     f52:	8a 95       	dec	r24
     f54:	d2 f7       	brpl	.-12     	; 0xf4a <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
     f56:	da 01       	movw	r26, r20
     f58:	c9 01       	movw	r24, r18
     f5a:	b6 95       	lsr	r27
     f5c:	a7 95       	ror	r26
     f5e:	97 95       	ror	r25
     f60:	87 95       	ror	r24
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	64 0d       	add	r22, r4
     f68:	75 1d       	adc	r23, r5
     f6a:	86 1d       	adc	r24, r6
     f6c:	97 1d       	adc	r25, r7
     f6e:	e4 d6       	rcall	.+3528   	; 0x1d38 <__udivmodsi4>
     f70:	1c c0       	rjmp	.+56     	; 0xfaa <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	8c 0f       	add	r24, r28
     f76:	a5 01       	movw	r20, r10
     f78:	94 01       	movw	r18, r8
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <usart_set_baudrate+0x198>
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	44 1f       	adc	r20, r20
     f82:	55 1f       	adc	r21, r21
     f84:	8a 95       	dec	r24
     f86:	d2 f7       	brpl	.-12     	; 0xf7c <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
     f88:	da 01       	movw	r26, r20
     f8a:	c9 01       	movw	r24, r18
     f8c:	b6 95       	lsr	r27
     f8e:	a7 95       	ror	r26
     f90:	97 95       	ror	r25
     f92:	87 95       	ror	r24
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	64 0d       	add	r22, r4
     f9a:	75 1d       	adc	r23, r5
     f9c:	86 1d       	adc	r24, r6
     f9e:	97 1d       	adc	r25, r7
     fa0:	cb d6       	rcall	.+3478   	; 0x1d38 <__udivmodsi4>
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	31 09       	sbc	r19, r1
     fa6:	41 09       	sbc	r20, r1
     fa8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     faa:	83 2f       	mov	r24, r19
     fac:	8f 70       	andi	r24, 0x0F	; 15
     fae:	c2 95       	swap	r28
     fb0:	c0 7f       	andi	r28, 0xF0	; 240
     fb2:	c8 2b       	or	r28, r24
     fb4:	f7 01       	movw	r30, r14
     fb6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     fb8:	26 83       	std	Z+6, r18	; 0x06

	return true;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	18 c0       	rjmp	.+48     	; 0xfee <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <usart_set_baudrate+0x202>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     fc6:	d5 01       	movw	r26, r10
     fc8:	c4 01       	movw	r24, r8
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	aa 1f       	adc	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	aa 1f       	adc	r26, r26
     fd8:	bb 1f       	adc	r27, r27
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	aa 1f       	adc	r26, r26
     fe0:	bb 1f       	adc	r27, r27
     fe2:	48 1a       	sub	r4, r24
     fe4:	59 0a       	sbc	r5, r25
     fe6:	6a 0a       	sbc	r6, r26
     fe8:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     fea:	c9 ef       	ldi	r28, 0xF9	; 249
     fec:	8c cf       	rjmp	.-232    	; 0xf06 <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	bf 90       	pop	r11
     ffa:	af 90       	pop	r10
     ffc:	9f 90       	pop	r9
     ffe:	8f 90       	pop	r8
    1000:	7f 90       	pop	r7
    1002:	6f 90       	pop	r6
    1004:	5f 90       	pop	r5
    1006:	4f 90       	pop	r4
    1008:	08 95       	ret

0000100a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
    1014:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	09 f4       	brne	.+2      	; 0x101c <usart_init_rs232+0x12>
    101a:	e6 c0       	rjmp	.+460    	; 0x11e8 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    101c:	80 3c       	cpi	r24, 0xC0	; 192
    101e:	91 05       	cpc	r25, r1
    1020:	21 f4       	brne	.+8      	; 0x102a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1022:	60 e1       	ldi	r22, 0x10	; 16
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	39 d4       	rcall	.+2162   	; 0x189a <sysclk_enable_module>
    1028:	df c0       	rjmp	.+446    	; 0x11e8 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    102a:	c0 38       	cpi	r28, 0x80	; 128
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	d8 07       	cpc	r29, r24
    1030:	21 f4       	brne	.+8      	; 0x103a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	31 d4       	rcall	.+2146   	; 0x189a <sysclk_enable_module>
    1038:	d7 c0       	rjmp	.+430    	; 0x11e8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    103a:	c1 15       	cp	r28, r1
    103c:	e1 e0       	ldi	r30, 0x01	; 1
    103e:	de 07       	cpc	r29, r30
    1040:	21 f4       	brne	.+8      	; 0x104a <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	29 d4       	rcall	.+2130   	; 0x189a <sysclk_enable_module>
    1048:	cf c0       	rjmp	.+414    	; 0x11e8 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    104a:	c0 38       	cpi	r28, 0x80	; 128
    104c:	f3 e0       	ldi	r31, 0x03	; 3
    104e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1050:	21 f4       	brne	.+8      	; 0x105a <usart_init_rs232+0x50>
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	21 d4       	rcall	.+2114   	; 0x189a <sysclk_enable_module>
    1058:	c7 c0       	rjmp	.+398    	; 0x11e8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    105a:	c0 39       	cpi	r28, 0x90	; 144
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1060:	21 f4       	brne	.+8      	; 0x106a <usart_init_rs232+0x60>
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	19 d4       	rcall	.+2098   	; 0x189a <sysclk_enable_module>
    1068:	bf c0       	rjmp	.+382    	; 0x11e8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    106a:	c1 15       	cp	r28, r1
    106c:	e2 e0       	ldi	r30, 0x02	; 2
    106e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1070:	21 f4       	brne	.+8      	; 0x107a <usart_init_rs232+0x70>
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	11 d4       	rcall	.+2082   	; 0x189a <sysclk_enable_module>
    1078:	b7 c0       	rjmp	.+366    	; 0x11e8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    107a:	c0 34       	cpi	r28, 0x40	; 64
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1080:	21 f4       	brne	.+8      	; 0x108a <usart_init_rs232+0x80>
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	09 d4       	rcall	.+2066   	; 0x189a <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1088:	af c0       	rjmp	.+350    	; 0x11e8 <usart_init_rs232+0x1de>
    108a:	c0 32       	cpi	r28, 0x20	; 32
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1090:	21 f4       	brne	.+8      	; 0x109a <usart_init_rs232+0x90>
    1092:	64 e0       	ldi	r22, 0x04	; 4
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	01 d4       	rcall	.+2050   	; 0x189a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1098:	a7 c0       	rjmp	.+334    	; 0x11e8 <usart_init_rs232+0x1de>
    109a:	c1 15       	cp	r28, r1
    109c:	e8 e0       	ldi	r30, 0x08	; 8
    109e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    10a0:	21 f4       	brne	.+8      	; 0x10aa <usart_init_rs232+0xa0>
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	f9 d3       	rcall	.+2034   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    10a8:	9f c0       	rjmp	.+318    	; 0x11e8 <usart_init_rs232+0x1de>
    10aa:	c1 15       	cp	r28, r1
    10ac:	f9 e0       	ldi	r31, 0x09	; 9
    10ae:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    10b0:	21 f4       	brne	.+8      	; 0x10ba <usart_init_rs232+0xb0>
    10b2:	61 e0       	ldi	r22, 0x01	; 1
    10b4:	84 e0       	ldi	r24, 0x04	; 4
    10b6:	f1 d3       	rcall	.+2018   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    10b8:	97 c0       	rjmp	.+302    	; 0x11e8 <usart_init_rs232+0x1de>
    10ba:	c1 15       	cp	r28, r1
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    10c0:	21 f4       	brne	.+8      	; 0x10ca <usart_init_rs232+0xc0>
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	e9 d3       	rcall	.+2002   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    10c8:	8f c0       	rjmp	.+286    	; 0x11e8 <usart_init_rs232+0x1de>
    10ca:	c1 15       	cp	r28, r1
    10cc:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    10ce:	de 07       	cpc	r29, r30
    10d0:	21 f4       	brne	.+8      	; 0x10da <usart_init_rs232+0xd0>
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	86 e0       	ldi	r24, 0x06	; 6
    10d6:	e1 d3       	rcall	.+1986   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    10d8:	87 c0       	rjmp	.+270    	; 0x11e8 <usart_init_rs232+0x1de>
    10da:	c0 34       	cpi	r28, 0x40	; 64
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    10de:	df 07       	cpc	r29, r31
    10e0:	21 f4       	brne	.+8      	; 0x10ea <usart_init_rs232+0xe0>
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	d9 d3       	rcall	.+1970   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    10e8:	7f c0       	rjmp	.+254    	; 0x11e8 <usart_init_rs232+0x1de>
    10ea:	c0 34       	cpi	r28, 0x40	; 64
    10ec:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    10ee:	d8 07       	cpc	r29, r24
    10f0:	21 f4       	brne	.+8      	; 0x10fa <usart_init_rs232+0xf0>
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	d1 d3       	rcall	.+1954   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    10f8:	77 c0       	rjmp	.+238    	; 0x11e8 <usart_init_rs232+0x1de>
    10fa:	c0 34       	cpi	r28, 0x40	; 64
    10fc:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    10fe:	de 07       	cpc	r29, r30
    1100:	21 f4       	brne	.+8      	; 0x110a <usart_init_rs232+0x100>
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1106:	c9 d3       	rcall	.+1938   	; 0x189a <sysclk_enable_module>
    1108:	6f c0       	rjmp	.+222    	; 0x11e8 <usart_init_rs232+0x1de>
    110a:	c0 39       	cpi	r28, 0x90	; 144
    110c:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    110e:	df 07       	cpc	r29, r31
    1110:	21 f4       	brne	.+8      	; 0x111a <usart_init_rs232+0x110>
    1112:	64 e0       	ldi	r22, 0x04	; 4
    1114:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1116:	c1 d3       	rcall	.+1922   	; 0x189a <sysclk_enable_module>
    1118:	67 c0       	rjmp	.+206    	; 0x11e8 <usart_init_rs232+0x1de>
    111a:	c0 39       	cpi	r28, 0x90	; 144
    111c:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    111e:	d8 07       	cpc	r29, r24
    1120:	21 f4       	brne	.+8      	; 0x112a <usart_init_rs232+0x120>
    1122:	64 e0       	ldi	r22, 0x04	; 4
    1124:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1126:	b9 d3       	rcall	.+1906   	; 0x189a <sysclk_enable_module>
    1128:	5f c0       	rjmp	.+190    	; 0x11e8 <usart_init_rs232+0x1de>
    112a:	c0 39       	cpi	r28, 0x90	; 144
    112c:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    112e:	de 07       	cpc	r29, r30
    1130:	21 f4       	brne	.+8      	; 0x113a <usart_init_rs232+0x130>
    1132:	64 e0       	ldi	r22, 0x04	; 4
    1134:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1136:	b1 d3       	rcall	.+1890   	; 0x189a <sysclk_enable_module>
    1138:	57 c0       	rjmp	.+174    	; 0x11e8 <usart_init_rs232+0x1de>
    113a:	c0 39       	cpi	r28, 0x90	; 144
    113c:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    113e:	df 07       	cpc	r29, r31
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_rs232+0x140>
    1142:	64 e0       	ldi	r22, 0x04	; 4
    1144:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1146:	a9 d3       	rcall	.+1874   	; 0x189a <sysclk_enable_module>
    1148:	4f c0       	rjmp	.+158    	; 0x11e8 <usart_init_rs232+0x1de>
    114a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	d8 07       	cpc	r29, r24
    1150:	21 f4       	brne	.+8      	; 0x115a <usart_init_rs232+0x150>
    1152:	68 e0       	ldi	r22, 0x08	; 8
    1154:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1156:	a1 d3       	rcall	.+1858   	; 0x189a <sysclk_enable_module>
    1158:	47 c0       	rjmp	.+142    	; 0x11e8 <usart_init_rs232+0x1de>
    115a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    115c:	e9 e0       	ldi	r30, 0x09	; 9
    115e:	de 07       	cpc	r29, r30
    1160:	21 f4       	brne	.+8      	; 0x116a <usart_init_rs232+0x160>
    1162:	68 e0       	ldi	r22, 0x08	; 8
    1164:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1166:	99 d3       	rcall	.+1842   	; 0x189a <sysclk_enable_module>
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <usart_init_rs232+0x1de>
    116a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    116c:	f8 e0       	ldi	r31, 0x08	; 8
    116e:	df 07       	cpc	r29, r31
    1170:	21 f4       	brne	.+8      	; 0x117a <usart_init_rs232+0x170>
    1172:	60 e1       	ldi	r22, 0x10	; 16
    1174:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1176:	91 d3       	rcall	.+1826   	; 0x189a <sysclk_enable_module>
    1178:	37 c0       	rjmp	.+110    	; 0x11e8 <usart_init_rs232+0x1de>
    117a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    117c:	89 e0       	ldi	r24, 0x09	; 9
    117e:	d8 07       	cpc	r29, r24
    1180:	21 f4       	brne	.+8      	; 0x118a <usart_init_rs232+0x180>
    1182:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1184:	84 e0       	ldi	r24, 0x04	; 4
    1186:	89 d3       	rcall	.+1810   	; 0x189a <sysclk_enable_module>
    1188:	2f c0       	rjmp	.+94     	; 0x11e8 <usart_init_rs232+0x1de>
    118a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    118c:	ea e0       	ldi	r30, 0x0A	; 10
    118e:	de 07       	cpc	r29, r30
    1190:	21 f4       	brne	.+8      	; 0x119a <usart_init_rs232+0x190>
    1192:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	81 d3       	rcall	.+1794   	; 0x189a <sysclk_enable_module>
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <usart_init_rs232+0x1de>
    119a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    119c:	fb e0       	ldi	r31, 0x0B	; 11
    119e:	df 07       	cpc	r29, r31
    11a0:	21 f4       	brne	.+8      	; 0x11aa <usart_init_rs232+0x1a0>
    11a2:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	79 d3       	rcall	.+1778   	; 0x189a <sysclk_enable_module>
    11a8:	1f c0       	rjmp	.+62     	; 0x11e8 <usart_init_rs232+0x1de>
    11aa:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    11ac:	88 e0       	ldi	r24, 0x08	; 8
    11ae:	d8 07       	cpc	r29, r24
    11b0:	21 f4       	brne	.+8      	; 0x11ba <usart_init_rs232+0x1b0>
    11b2:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	71 d3       	rcall	.+1762   	; 0x189a <sysclk_enable_module>
    11b8:	17 c0       	rjmp	.+46     	; 0x11e8 <usart_init_rs232+0x1de>
    11ba:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    11bc:	e9 e0       	ldi	r30, 0x09	; 9
    11be:	de 07       	cpc	r29, r30
    11c0:	21 f4       	brne	.+8      	; 0x11ca <usart_init_rs232+0x1c0>
    11c2:	60 e2       	ldi	r22, 0x20	; 32
    11c4:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    11c6:	69 d3       	rcall	.+1746   	; 0x189a <sysclk_enable_module>
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <usart_init_rs232+0x1de>
    11ca:	c0 38       	cpi	r28, 0x80	; 128
    11cc:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    11ce:	df 07       	cpc	r29, r31
    11d0:	21 f4       	brne	.+8      	; 0x11da <usart_init_rs232+0x1d0>
    11d2:	60 e4       	ldi	r22, 0x40	; 64
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	61 d3       	rcall	.+1730   	; 0x189a <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <usart_init_rs232+0x1de>
    11da:	c0 3a       	cpi	r28, 0xA0	; 160
    11dc:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    11de:	d8 07       	cpc	r29, r24
    11e0:	19 f4       	brne	.+6      	; 0x11e8 <usart_init_rs232+0x1de>
    11e2:	60 e4       	ldi	r22, 0x40	; 64
    11e4:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    11e6:	59 d3       	rcall	.+1714   	; 0x189a <sysclk_enable_module>
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	f8 01       	movw	r30, r16
    11f0:	95 81       	ldd	r25, Z+5	; 0x05
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	89 2b       	or	r24, r25
    11f6:	96 81       	ldd	r25, Z+6	; 0x06
    11f8:	91 11       	cpse	r25, r1
    11fa:	98 e0       	ldi	r25, 0x08	; 8
    11fc:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	f8 01       	movw	r30, r16
    1202:	40 81       	ld	r20, Z
    1204:	51 81       	ldd	r21, Z+1	; 0x01
    1206:	62 81       	ldd	r22, Z+2	; 0x02
    1208:	73 81       	ldd	r23, Z+3	; 0x03
    120a:	00 e8       	ldi	r16, 0x80	; 128
    120c:	14 e8       	ldi	r17, 0x84	; 132
    120e:	2e e1       	ldi	r18, 0x1E	; 30
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	ce 01       	movw	r24, r28
    1214:	eb dd       	rcall	.-1066   	; 0xdec <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	98 60       	ori	r25, 0x08	; 8
    121a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	90 61       	ori	r25, 0x10	; 16
    1220:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    123e:	d9 01       	movw	r26, r18
    1240:	c8 01       	movw	r24, r16
    1242:	b6 95       	lsr	r27
    1244:	a7 95       	ror	r26
    1246:	97 95       	ror	r25
    1248:	87 95       	ror	r24
    124a:	48 17       	cp	r20, r24
    124c:	59 07       	cpc	r21, r25
    124e:	6a 07       	cpc	r22, r26
    1250:	7b 07       	cpc	r23, r27
    1252:	70 f4       	brcc	.+28     	; 0x1270 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1254:	6a 01       	movw	r12, r20
    1256:	7b 01       	movw	r14, r22
    1258:	cc 0c       	add	r12, r12
    125a:	dd 1c       	adc	r13, r13
    125c:	ee 1c       	adc	r14, r14
    125e:	ff 1c       	adc	r15, r15
    1260:	c9 01       	movw	r24, r18
    1262:	b8 01       	movw	r22, r16
    1264:	a7 01       	movw	r20, r14
    1266:	96 01       	movw	r18, r12
    1268:	67 d5       	rcall	.+2766   	; 0x1d38 <__udivmodsi4>
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	31 09       	sbc	r19, r1
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1274:	83 2f       	mov	r24, r19
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    127a:	2e 83       	std	Y+6, r18	; 0x06
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	1f 92       	push	r1
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	7c 01       	movw	r14, r24
    12a4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	09 f4       	brne	.+2      	; 0x12ac <usart_init_spi+0x1e>
    12aa:	b2 c1       	rjmp	.+868    	; 0x1610 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    12ac:	80 3c       	cpi	r24, 0xC0	; 192
    12ae:	91 05       	cpc	r25, r1
    12b0:	21 f4       	brne	.+8      	; 0x12ba <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    12b2:	60 e1       	ldi	r22, 0x10	; 16
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	f1 d2       	rcall	.+1506   	; 0x189a <sysclk_enable_module>
    12b8:	ab c1       	rjmp	.+854    	; 0x1610 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	e8 16       	cp	r14, r24
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	f8 06       	cpc	r15, r24
    12c2:	21 f4       	brne	.+8      	; 0x12cc <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    12c4:	62 e0       	ldi	r22, 0x02	; 2
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	e8 d2       	rcall	.+1488   	; 0x189a <sysclk_enable_module>
    12ca:	a2 c1       	rjmp	.+836    	; 0x1610 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    12cc:	e1 14       	cp	r14, r1
    12ce:	e1 e0       	ldi	r30, 0x01	; 1
    12d0:	fe 06       	cpc	r15, r30
    12d2:	21 f4       	brne	.+8      	; 0x12dc <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	e0 d2       	rcall	.+1472   	; 0x189a <sysclk_enable_module>
    12da:	9a c1       	rjmp	.+820    	; 0x1610 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    12dc:	f0 e8       	ldi	r31, 0x80	; 128
    12de:	ef 16       	cp	r14, r31
    12e0:	f3 e0       	ldi	r31, 0x03	; 3
    12e2:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    12e4:	21 f4       	brne	.+8      	; 0x12ee <usart_init_spi+0x60>
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	d7 d2       	rcall	.+1454   	; 0x189a <sysclk_enable_module>
    12ec:	91 c1       	rjmp	.+802    	; 0x1610 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    12ee:	30 e9       	ldi	r19, 0x90	; 144
    12f0:	e3 16       	cp	r14, r19
    12f2:	33 e0       	ldi	r19, 0x03	; 3
    12f4:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    12f6:	21 f4       	brne	.+8      	; 0x1300 <usart_init_spi+0x72>
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	ce d2       	rcall	.+1436   	; 0x189a <sysclk_enable_module>
    12fe:	88 c1       	rjmp	.+784    	; 0x1610 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1300:	e1 14       	cp	r14, r1
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1306:	21 f4       	brne	.+8      	; 0x1310 <usart_init_spi+0x82>
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	c6 d2       	rcall	.+1420   	; 0x189a <sysclk_enable_module>
    130e:	80 c1       	rjmp	.+768    	; 0x1610 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1310:	e0 e4       	ldi	r30, 0x40	; 64
    1312:	ee 16       	cp	r14, r30
    1314:	e2 e0       	ldi	r30, 0x02	; 2
    1316:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1318:	21 f4       	brne	.+8      	; 0x1322 <usart_init_spi+0x94>
    131a:	62 e0       	ldi	r22, 0x02	; 2
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	bd d2       	rcall	.+1402   	; 0x189a <sysclk_enable_module>
    1320:	77 c1       	rjmp	.+750    	; 0x1610 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1322:	f0 e2       	ldi	r31, 0x20	; 32
    1324:	ef 16       	cp	r14, r31
    1326:	f3 e0       	ldi	r31, 0x03	; 3
    1328:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    132a:	21 f4       	brne	.+8      	; 0x1334 <usart_init_spi+0xa6>
    132c:	64 e0       	ldi	r22, 0x04	; 4
    132e:	82 e0       	ldi	r24, 0x02	; 2
    1330:	b4 d2       	rcall	.+1384   	; 0x189a <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1332:	6e c1       	rjmp	.+732    	; 0x1610 <usart_init_spi+0x382>
    1334:	e1 14       	cp	r14, r1
    1336:	38 e0       	ldi	r19, 0x08	; 8
    1338:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    133a:	21 f4       	brne	.+8      	; 0x1344 <usart_init_spi+0xb6>
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	ac d2       	rcall	.+1368   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1342:	66 c1       	rjmp	.+716    	; 0x1610 <usart_init_spi+0x382>
    1344:	e1 14       	cp	r14, r1
    1346:	89 e0       	ldi	r24, 0x09	; 9
    1348:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    134a:	21 f4       	brne	.+8      	; 0x1354 <usart_init_spi+0xc6>
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	a4 d2       	rcall	.+1352   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1352:	5e c1       	rjmp	.+700    	; 0x1610 <usart_init_spi+0x382>
    1354:	e1 14       	cp	r14, r1
    1356:	ea e0       	ldi	r30, 0x0A	; 10
    1358:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    135a:	21 f4       	brne	.+8      	; 0x1364 <usart_init_spi+0xd6>
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	85 e0       	ldi	r24, 0x05	; 5
    1360:	9c d2       	rcall	.+1336   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1362:	56 c1       	rjmp	.+684    	; 0x1610 <usart_init_spi+0x382>
    1364:	e1 14       	cp	r14, r1
    1366:	fb e0       	ldi	r31, 0x0B	; 11
    1368:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    136a:	21 f4       	brne	.+8      	; 0x1374 <usart_init_spi+0xe6>
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	94 d2       	rcall	.+1320   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1372:	4e c1       	rjmp	.+668    	; 0x1610 <usart_init_spi+0x382>
    1374:	30 e4       	ldi	r19, 0x40	; 64
    1376:	e3 16       	cp	r14, r19
    1378:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    137a:	f3 06       	cpc	r15, r19
    137c:	21 f4       	brne	.+8      	; 0x1386 <usart_init_spi+0xf8>
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	8b d2       	rcall	.+1302   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1384:	45 c1       	rjmp	.+650    	; 0x1610 <usart_init_spi+0x382>
    1386:	80 e4       	ldi	r24, 0x40	; 64
    1388:	e8 16       	cp	r14, r24
    138a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    138c:	f8 06       	cpc	r15, r24
    138e:	21 f4       	brne	.+8      	; 0x1398 <usart_init_spi+0x10a>
    1390:	62 e0       	ldi	r22, 0x02	; 2
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	82 d2       	rcall	.+1284   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1396:	3c c1       	rjmp	.+632    	; 0x1610 <usart_init_spi+0x382>
    1398:	e0 e4       	ldi	r30, 0x40	; 64
    139a:	ee 16       	cp	r14, r30
    139c:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    139e:	fe 06       	cpc	r15, r30
    13a0:	21 f4       	brne	.+8      	; 0x13aa <usart_init_spi+0x11c>
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	79 d2       	rcall	.+1266   	; 0x189a <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    13a8:	33 c1       	rjmp	.+614    	; 0x1610 <usart_init_spi+0x382>
    13aa:	f0 e9       	ldi	r31, 0x90	; 144
    13ac:	ef 16       	cp	r14, r31
    13ae:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    13b0:	ff 06       	cpc	r15, r31
    13b2:	21 f4       	brne	.+8      	; 0x13bc <usart_init_spi+0x12e>
    13b4:	64 e0       	ldi	r22, 0x04	; 4
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	70 d2       	rcall	.+1248   	; 0x189a <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    13ba:	2a c1       	rjmp	.+596    	; 0x1610 <usart_init_spi+0x382>
    13bc:	30 e9       	ldi	r19, 0x90	; 144
    13be:	e3 16       	cp	r14, r19
    13c0:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    13c2:	f3 06       	cpc	r15, r19
    13c4:	21 f4       	brne	.+8      	; 0x13ce <usart_init_spi+0x140>
    13c6:	64 e0       	ldi	r22, 0x04	; 4
    13c8:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    13ca:	67 d2       	rcall	.+1230   	; 0x189a <sysclk_enable_module>
    13cc:	21 c1       	rjmp	.+578    	; 0x1610 <usart_init_spi+0x382>
    13ce:	80 e9       	ldi	r24, 0x90	; 144
    13d0:	e8 16       	cp	r14, r24
    13d2:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    13d4:	f8 06       	cpc	r15, r24
    13d6:	21 f4       	brne	.+8      	; 0x13e0 <usart_init_spi+0x152>
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    13dc:	5e d2       	rcall	.+1212   	; 0x189a <sysclk_enable_module>
    13de:	18 c1       	rjmp	.+560    	; 0x1610 <usart_init_spi+0x382>
    13e0:	e0 e9       	ldi	r30, 0x90	; 144
    13e2:	ee 16       	cp	r14, r30
    13e4:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    13e6:	fe 06       	cpc	r15, r30
    13e8:	21 f4       	brne	.+8      	; 0x13f2 <usart_init_spi+0x164>
    13ea:	64 e0       	ldi	r22, 0x04	; 4
    13ec:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    13ee:	55 d2       	rcall	.+1194   	; 0x189a <sysclk_enable_module>
    13f0:	0f c1       	rjmp	.+542    	; 0x1610 <usart_init_spi+0x382>
    13f2:	f0 ec       	ldi	r31, 0xC0	; 192
    13f4:	ef 16       	cp	r14, r31
    13f6:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    13f8:	ff 06       	cpc	r15, r31
    13fa:	21 f4       	brne	.+8      	; 0x1404 <usart_init_spi+0x176>
    13fc:	68 e0       	ldi	r22, 0x08	; 8
    13fe:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1400:	4c d2       	rcall	.+1176   	; 0x189a <sysclk_enable_module>
    1402:	06 c1       	rjmp	.+524    	; 0x1610 <usart_init_spi+0x382>
    1404:	30 ec       	ldi	r19, 0xC0	; 192
    1406:	e3 16       	cp	r14, r19
    1408:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    140a:	f3 06       	cpc	r15, r19
    140c:	21 f4       	brne	.+8      	; 0x1416 <usart_init_spi+0x188>
    140e:	68 e0       	ldi	r22, 0x08	; 8
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	43 d2       	rcall	.+1158   	; 0x189a <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1414:	fd c0       	rjmp	.+506    	; 0x1610 <usart_init_spi+0x382>
    1416:	80 ea       	ldi	r24, 0xA0	; 160
    1418:	e8 16       	cp	r14, r24
    141a:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    141c:	f8 06       	cpc	r15, r24
    141e:	61 f4       	brne	.+24     	; 0x1438 <usart_init_spi+0x1aa>
    1420:	60 e1       	ldi	r22, 0x10	; 16
    1422:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1424:	3a d2       	rcall	.+1140   	; 0x189a <sysclk_enable_module>
    1426:	e0 ea       	ldi	r30, 0xA0	; 160
    1428:	f8 e0       	ldi	r31, 0x08	; 8
    142a:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    142c:	8f 7e       	andi	r24, 0xEF	; 239
    142e:	84 83       	std	Z+4, r24	; 0x04
    1430:	f8 01       	movw	r30, r16
    1432:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1434:	22 50       	subi	r18, 0x02	; 2
    1436:	4c c0       	rjmp	.+152    	; 0x14d0 <usart_init_spi+0x242>
    1438:	f0 ea       	ldi	r31, 0xA0	; 160
    143a:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    143c:	f9 e0       	ldi	r31, 0x09	; 9
    143e:	ff 06       	cpc	r15, r31
    1440:	21 f4       	brne	.+8      	; 0x144a <usart_init_spi+0x1bc>
    1442:	60 e1       	ldi	r22, 0x10	; 16
    1444:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1446:	29 d2       	rcall	.+1106   	; 0x189a <sysclk_enable_module>
    1448:	e3 c0       	rjmp	.+454    	; 0x1610 <usart_init_spi+0x382>
    144a:	30 ea       	ldi	r19, 0xA0	; 160
    144c:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    144e:	3a e0       	ldi	r19, 0x0A	; 10
    1450:	f3 06       	cpc	r15, r19
    1452:	21 f4       	brne	.+8      	; 0x145c <usart_init_spi+0x1ce>
    1454:	60 e1       	ldi	r22, 0x10	; 16
    1456:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1458:	20 d2       	rcall	.+1088   	; 0x189a <sysclk_enable_module>
    145a:	da c0       	rjmp	.+436    	; 0x1610 <usart_init_spi+0x382>
    145c:	80 ea       	ldi	r24, 0xA0	; 160
    145e:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1460:	8b e0       	ldi	r24, 0x0B	; 11
    1462:	f8 06       	cpc	r15, r24
    1464:	21 f4       	brne	.+8      	; 0x146e <usart_init_spi+0x1e0>
    1466:	60 e1       	ldi	r22, 0x10	; 16
    1468:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    146a:	17 d2       	rcall	.+1070   	; 0x189a <sysclk_enable_module>
    146c:	d1 c0       	rjmp	.+418    	; 0x1610 <usart_init_spi+0x382>
    146e:	e0 eb       	ldi	r30, 0xB0	; 176
    1470:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1472:	e8 e0       	ldi	r30, 0x08	; 8
    1474:	fe 06       	cpc	r15, r30
    1476:	21 f4       	brne	.+8      	; 0x1480 <usart_init_spi+0x1f2>
    1478:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	0e d2       	rcall	.+1052   	; 0x189a <sysclk_enable_module>
    147e:	c8 c0       	rjmp	.+400    	; 0x1610 <usart_init_spi+0x382>
    1480:	f0 eb       	ldi	r31, 0xB0	; 176
    1482:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1484:	f9 e0       	ldi	r31, 0x09	; 9
    1486:	ff 06       	cpc	r15, r31
    1488:	21 f4       	brne	.+8      	; 0x1492 <usart_init_spi+0x204>
    148a:	60 e2       	ldi	r22, 0x20	; 32
    148c:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    148e:	05 d2       	rcall	.+1034   	; 0x189a <sysclk_enable_module>
    1490:	bf c0       	rjmp	.+382    	; 0x1610 <usart_init_spi+0x382>
    1492:	30 e8       	ldi	r19, 0x80	; 128
    1494:	e3 16       	cp	r14, r19
    1496:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1498:	f3 06       	cpc	r15, r19
    149a:	21 f4       	brne	.+8      	; 0x14a4 <usart_init_spi+0x216>
    149c:	60 e4       	ldi	r22, 0x40	; 64
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	fc d1       	rcall	.+1016   	; 0x189a <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    14a2:	b6 c0       	rjmp	.+364    	; 0x1610 <usart_init_spi+0x382>
    14a4:	80 ea       	ldi	r24, 0xA0	; 160
    14a6:	e8 16       	cp	r14, r24
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <usart_init_spi+0x228>
    14ae:	60 e4       	ldi	r22, 0x40	; 64
    14b0:	85 e0       	ldi	r24, 0x05	; 5
    14b2:	f3 d1       	rcall	.+998    	; 0x189a <sysclk_enable_module>
    14b4:	ad c0       	rjmp	.+346    	; 0x1610 <usart_init_spi+0x382>
    14b6:	f7 01       	movw	r30, r14
    14b8:	84 81       	ldd	r24, Z+4	; 0x04
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	84 83       	std	Z+4, r24	; 0x04
    14be:	fb 01       	movw	r30, r22
    14c0:	24 81       	ldd	r18, Z+4	; 0x04
    14c2:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    14c4:	c7 01       	movw	r24, r14
    14c6:	f0 ea       	ldi	r31, 0xA0	; 160
    14c8:	ef 16       	cp	r14, r31
    14ca:	f8 e0       	ldi	r31, 0x08	; 8
    14cc:	ff 06       	cpc	r15, r31
    14ce:	49 f4       	brne	.+18     	; 0x14e2 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    14d0:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
    14d4:	84 fd       	sbrc	r24, 4
    14d6:	a5 c0       	rjmp	.+330    	; 0x1622 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    14d8:	0f 2e       	mov	r0, r31
    14da:	f1 e1       	ldi	r31, 0x11	; 17
    14dc:	df 2e       	mov	r13, r31
    14de:	f0 2d       	mov	r31, r0
    14e0:	a4 c0       	rjmp	.+328    	; 0x162a <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    14e2:	80 3b       	cpi	r24, 0xB0	; 176
    14e4:	38 e0       	ldi	r19, 0x08	; 8
    14e6:	93 07       	cpc	r25, r19
    14e8:	91 f0       	breq	.+36     	; 0x150e <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    14ea:	80 3a       	cpi	r24, 0xA0	; 160
    14ec:	e9 e0       	ldi	r30, 0x09	; 9
    14ee:	9e 07       	cpc	r25, r30
    14f0:	49 f4       	brne	.+18     	; 0x1504 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    14f2:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
    14f6:	34 fd       	sbrc	r19, 4
    14f8:	9b c0       	rjmp	.+310    	; 0x1630 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    14fa:	0f 2e       	mov	r0, r31
    14fc:	f9 e1       	ldi	r31, 0x19	; 25
    14fe:	df 2e       	mov	r13, r31
    1500:	f0 2d       	mov	r31, r0
    1502:	16 c0       	rjmp	.+44     	; 0x1530 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1504:	80 3b       	cpi	r24, 0xB0	; 176
    1506:	f9 e0       	ldi	r31, 0x09	; 9
    1508:	9f 07       	cpc	r25, r31
    150a:	f1 f0       	breq	.+60     	; 0x1548 <usart_init_spi+0x2ba>
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    150e:	0f 2e       	mov	r0, r31
    1510:	f5 e1       	ldi	r31, 0x15	; 21
    1512:	df 2e       	mov	r13, r31
    1514:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1516:	80 3a       	cpi	r24, 0xA0	; 160
    1518:	3a e0       	ldi	r19, 0x0A	; 10
    151a:	93 07       	cpc	r25, r19
    151c:	49 f4       	brne	.+18     	; 0x1530 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    151e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
    1522:	84 fd       	sbrc	r24, 4
    1524:	8a c0       	rjmp	.+276    	; 0x163a <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1526:	0f 2e       	mov	r0, r31
    1528:	f1 e2       	ldi	r31, 0x21	; 33
    152a:	df 2e       	mov	r13, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	15 c0       	rjmp	.+42     	; 0x155a <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1530:	80 3a       	cpi	r24, 0xA0	; 160
    1532:	9b 40       	sbci	r25, 0x0B	; 11
    1534:	91 f4       	brne	.+36     	; 0x155a <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1536:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
    153a:	84 fd       	sbrc	r24, 4
    153c:	0a c0       	rjmp	.+20     	; 0x1552 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    153e:	0f 2e       	mov	r0, r31
    1540:	f9 e2       	ldi	r31, 0x29	; 41
    1542:	df 2e       	mov	r13, r31
    1544:	f0 2d       	mov	r31, r0
    1546:	09 c0       	rjmp	.+18     	; 0x155a <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1548:	0f 2e       	mov	r0, r31
    154a:	fd e1       	ldi	r31, 0x1D	; 29
    154c:	df 2e       	mov	r13, r31
    154e:	f0 2d       	mov	r31, r0
    1550:	04 c0       	rjmp	.+8      	; 0x155a <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1552:	0f 2e       	mov	r0, r31
    1554:	fd e2       	ldi	r31, 0x2D	; 45
    1556:	df 2e       	mov	r13, r31
    1558:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    155a:	ed 2d       	mov	r30, r13
    155c:	e6 95       	lsr	r30
    155e:	e6 95       	lsr	r30
    1560:	e6 95       	lsr	r30
    1562:	30 e2       	ldi	r19, 0x20	; 32
    1564:	e3 9f       	mul	r30, r19
    1566:	f0 01       	movw	r30, r0
    1568:	11 24       	eor	r1, r1
    156a:	fa 5f       	subi	r31, 0xFA	; 250
    156c:	3d 2d       	mov	r19, r13
    156e:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	03 2e       	mov	r0, r19
    1576:	02 c0       	rjmp	.+4      	; 0x157c <usart_init_spi+0x2ee>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1580:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	10 f0       	brcs	.+4      	; 0x158a <usart_init_spi+0x2fc>
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	01 c0       	rjmp	.+2      	; 0x158c <usart_init_spi+0x2fe>
    158a:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    158c:	df 01       	movw	r26, r30
    158e:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1590:	a3 0f       	add	r26, r19
    1592:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1594:	9f b7       	in	r25, 0x3f	; 63
    1596:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1598:	f8 94       	cli
	return flags;
    159a:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    159c:	2c 91       	ld	r18, X
    159e:	27 70       	andi	r18, 0x07	; 7
    15a0:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    15a2:	9c 91       	ld	r25, X
    15a4:	94 2b       	or	r25, r20
    15a6:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15a8:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15aa:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    15ac:	f7 01       	movw	r30, r14
    15ae:	85 81       	ldd	r24, Z+5	; 0x05
    15b0:	80 6c       	ori	r24, 0xC0	; 192
    15b2:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    15b4:	f8 01       	movw	r30, r16
    15b6:	84 81       	ldd	r24, Z+4	; 0x04
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    15be:	f7 01       	movw	r30, r14
    15c0:	85 81       	ldd	r24, Z+5	; 0x05
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <usart_init_spi+0x342>
    15c8:	f7 01       	movw	r30, r14
    15ca:	85 81       	ldd	r24, Z+5	; 0x05
    15cc:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    15ce:	85 83       	std	Z+5, r24	; 0x05
    15d0:	f8 01       	movw	r30, r16
    15d2:	85 81       	ldd	r24, Z+5	; 0x05
    15d4:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    15d6:	29 f0       	breq	.+10     	; 0x15e2 <usart_init_spi+0x354>
    15d8:	f7 01       	movw	r30, r14
    15da:	85 81       	ldd	r24, Z+5	; 0x05
    15dc:	84 60       	ori	r24, 0x04	; 4
    15de:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <usart_init_spi+0x35c>
    15e2:	f7 01       	movw	r30, r14
    15e4:	85 81       	ldd	r24, Z+5	; 0x05
    15e6:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    15e8:	85 83       	std	Z+5, r24	; 0x05
    15ea:	f8 01       	movw	r30, r16
    15ec:	40 81       	ld	r20, Z
    15ee:	51 81       	ldd	r21, Z+1	; 0x01
    15f0:	62 81       	ldd	r22, Z+2	; 0x02
    15f2:	73 81       	ldd	r23, Z+3	; 0x03
    15f4:	00 e8       	ldi	r16, 0x80	; 128
    15f6:	14 e8       	ldi	r17, 0x84	; 132
    15f8:	2e e1       	ldi	r18, 0x1E	; 30
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	c7 01       	movw	r24, r14
    15fe:	16 de       	rcall	.-980    	; 0x122c <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1600:	f7 01       	movw	r30, r14
    1602:	84 81       	ldd	r24, Z+4	; 0x04
    1604:	88 60       	ori	r24, 0x08	; 8
    1606:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1608:	84 81       	ldd	r24, Z+4	; 0x04
    160a:	80 61       	ori	r24, 0x10	; 16
    160c:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    160e:	1a c0       	rjmp	.+52     	; 0x1644 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1610:	f7 01       	movw	r30, r14
    1612:	84 81       	ldd	r24, Z+4	; 0x04
    1614:	8f 7e       	andi	r24, 0xEF	; 239
    1616:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1618:	f8 01       	movw	r30, r16
    161a:	24 81       	ldd	r18, Z+4	; 0x04
    161c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    161e:	c7 01       	movw	r24, r14
    1620:	60 cf       	rjmp	.-320    	; 0x14e2 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1622:	0f 2e       	mov	r0, r31
    1624:	f5 e1       	ldi	r31, 0x15	; 21
    1626:	df 2e       	mov	r13, r31
    1628:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    162a:	80 ea       	ldi	r24, 0xA0	; 160
    162c:	98 e0       	ldi	r25, 0x08	; 8
    162e:	6a cf       	rjmp	.-300    	; 0x1504 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1630:	0f 2e       	mov	r0, r31
    1632:	fd e1       	ldi	r31, 0x1D	; 29
    1634:	df 2e       	mov	r13, r31
    1636:	f0 2d       	mov	r31, r0
    1638:	7b cf       	rjmp	.-266    	; 0x1530 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    163a:	0f 2e       	mov	r0, r31
    163c:	f5 e2       	ldi	r31, 0x25	; 37
    163e:	df 2e       	mov	r13, r31
    1640:	f0 2d       	mov	r31, r0
    1642:	8b cf       	rjmp	.-234    	; 0x155a <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1644:	0f 90       	pop	r0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	08 95       	ret

00001656 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1656:	80 3a       	cpi	r24, 0xA0	; 160
    1658:	28 e0       	ldi	r18, 0x08	; 8
    165a:	92 07       	cpc	r25, r18
    165c:	21 f4       	brne	.+8      	; 0x1666 <usart_spi_init+0x10>
    165e:	60 e1       	ldi	r22, 0x10	; 16
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	1b c1       	rjmp	.+566    	; 0x189a <sysclk_enable_module>
    1664:	08 95       	ret
    1666:	80 3b       	cpi	r24, 0xB0	; 176
    1668:	28 e0       	ldi	r18, 0x08	; 8
    166a:	92 07       	cpc	r25, r18
    166c:	21 f4       	brne	.+8      	; 0x1676 <usart_spi_init+0x20>
    166e:	60 e2       	ldi	r22, 0x20	; 32
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	13 c1       	rjmp	.+550    	; 0x189a <sysclk_enable_module>
    1674:	08 95       	ret
    1676:	80 3a       	cpi	r24, 0xA0	; 160
    1678:	29 e0       	ldi	r18, 0x09	; 9
    167a:	92 07       	cpc	r25, r18
    167c:	21 f4       	brne	.+8      	; 0x1686 <usart_spi_init+0x30>
    167e:	60 e1       	ldi	r22, 0x10	; 16
    1680:	84 e0       	ldi	r24, 0x04	; 4
    1682:	0b c1       	rjmp	.+534    	; 0x189a <sysclk_enable_module>
    1684:	08 95       	ret
    1686:	80 3b       	cpi	r24, 0xB0	; 176
    1688:	29 e0       	ldi	r18, 0x09	; 9
    168a:	92 07       	cpc	r25, r18
    168c:	21 f4       	brne	.+8      	; 0x1696 <usart_spi_init+0x40>
    168e:	60 e2       	ldi	r22, 0x20	; 32
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	03 c1       	rjmp	.+518    	; 0x189a <sysclk_enable_module>
    1694:	08 95       	ret
    1696:	80 3a       	cpi	r24, 0xA0	; 160
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	92 07       	cpc	r25, r18
    169c:	21 f4       	brne	.+8      	; 0x16a6 <usart_spi_init+0x50>
    169e:	60 e1       	ldi	r22, 0x10	; 16
    16a0:	85 e0       	ldi	r24, 0x05	; 5
    16a2:	fb c0       	rjmp	.+502    	; 0x189a <sysclk_enable_module>
    16a4:	08 95       	ret
    16a6:	80 3a       	cpi	r24, 0xA0	; 160
    16a8:	9b 40       	sbci	r25, 0x0B	; 11
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <usart_spi_init+0x5c>
    16ac:	60 e1       	ldi	r22, 0x10	; 16
    16ae:	86 e0       	ldi	r24, 0x06	; 6
    16b0:	f4 c0       	rjmp	.+488    	; 0x189a <sysclk_enable_module>
    16b2:	08 95       	ret

000016b4 <usart_spi_setup_device>:
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 d0       	rcall	.+0      	; 0x16be <usart_spi_setup_device+0xa>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <usart_spi_setup_device+0xc>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	09 83       	std	Y+1, r16	; 0x01
    16c6:	1a 83       	std	Y+2, r17	; 0x02
    16c8:	2b 83       	std	Y+3, r18	; 0x03
    16ca:	3c 83       	std	Y+4, r19	; 0x04
    16cc:	4d 83       	std	Y+5, r20	; 0x05
    16ce:	1e 82       	std	Y+6, r1	; 0x06
    16d0:	be 01       	movw	r22, r28
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	db dd       	rcall	.-1098   	; 0x128e <usart_init_spi>
    16d8:	26 96       	adiw	r28, 0x06	; 6
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    16e8:	fb 01       	movw	r30, r22
    16ea:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    16ec:	e8 2f       	mov	r30, r24
    16ee:	e6 95       	lsr	r30
    16f0:	e6 95       	lsr	r30
    16f2:	e6 95       	lsr	r30
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	e4 9f       	mul	r30, r20
    16f8:	f0 01       	movw	r30, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    16fe:	87 70       	andi	r24, 0x07	; 7
    1700:	21 e0       	ldi	r18, 0x01	; 1
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	a9 01       	movw	r20, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <usart_spi_select_device+0x24>
    1708:	44 0f       	add	r20, r20
    170a:	55 1f       	adc	r21, r21
    170c:	8a 95       	dec	r24
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1710:	46 83       	std	Z+6, r20	; 0x06
    1712:	08 95       	ret

00001714 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1714:	fb 01       	movw	r30, r22
    1716:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1718:	e8 2f       	mov	r30, r24
    171a:	e6 95       	lsr	r30
    171c:	e6 95       	lsr	r30
    171e:	e6 95       	lsr	r30
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	e4 9f       	mul	r30, r20
    1724:	f0 01       	movw	r30, r0
    1726:	11 24       	eor	r1, r1
    1728:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    172a:	87 70       	andi	r24, 0x07	; 7
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	a9 01       	movw	r20, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <usart_spi_deselect_device+0x24>
    1734:	44 0f       	add	r20, r20
    1736:	55 1f       	adc	r21, r21
    1738:	8a 95       	dec	r24
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    173c:	45 83       	std	Z+5, r20	; 0x05
    173e:	08 95       	ret

00001740 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1740:	80 93 88 22 	sts	0x2288, r24	; 0x802288 <fbpointer>
    1744:	90 93 89 22 	sts	0x2289, r25	; 0x802289 <fbpointer+0x1>
    1748:	08 95       	ret

0000174a <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    174a:	20 91 88 22 	lds	r18, 0x2288	; 0x802288 <fbpointer>
    174e:	30 91 89 22 	lds	r19, 0x2289	; 0x802289 <fbpointer+0x1>
    1752:	90 e8       	ldi	r25, 0x80	; 128
    1754:	89 9f       	mul	r24, r25
    1756:	20 0d       	add	r18, r0
    1758:	31 1d       	adc	r19, r1
    175a:	11 24       	eor	r1, r1
    175c:	f9 01       	movw	r30, r18
    175e:	e6 0f       	add	r30, r22
    1760:	f1 1d       	adc	r31, r1
    1762:	40 83       	st	Z, r20
    1764:	08 95       	ret

00001766 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1766:	20 91 88 22 	lds	r18, 0x2288	; 0x802288 <fbpointer>
    176a:	30 91 89 22 	lds	r19, 0x2289	; 0x802289 <fbpointer+0x1>
    176e:	90 e8       	ldi	r25, 0x80	; 128
    1770:	89 9f       	mul	r24, r25
    1772:	20 0d       	add	r18, r0
    1774:	31 1d       	adc	r19, r1
    1776:	11 24       	eor	r1, r1
    1778:	f9 01       	movw	r30, r18
    177a:	e6 0f       	add	r30, r22
    177c:	f1 1d       	adc	r31, r1
}
    177e:	80 81       	ld	r24, Z
    1780:	08 95       	ret

00001782 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	e4 2f       	mov	r30, r20
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e8 0f       	add	r30, r24
    1792:	f1 1d       	adc	r31, r1
    1794:	e1 38       	cpi	r30, 0x81	; 129
    1796:	f1 05       	cpc	r31, r1
    1798:	1c f0       	brlt	.+6      	; 0x17a0 <gfx_mono_generic_draw_horizontal_line+0x1e>
    179a:	c0 e8       	ldi	r28, 0x80	; 128
    179c:	4c 2f       	mov	r20, r28
    179e:	48 1b       	sub	r20, r24
    17a0:	44 23       	and	r20, r20
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <gfx_mono_generic_draw_horizontal_line+0x24>
    17a4:	4a c0       	rjmp	.+148    	; 0x183a <gfx_mono_generic_draw_horizontal_line+0xb8>
    17a6:	d6 2f       	mov	r29, r22
    17a8:	d6 95       	lsr	r29
    17aa:	d6 95       	lsr	r29
    17ac:	d6 95       	lsr	r29
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	98 e0       	ldi	r25, 0x08	; 8
    17b2:	d9 9f       	mul	r29, r25
    17b4:	60 19       	sub	r22, r0
    17b6:	71 09       	sbc	r23, r1
    17b8:	11 24       	eor	r1, r1
    17ba:	e1 e0       	ldi	r30, 0x01	; 1
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	df 01       	movw	r26, r30
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <gfx_mono_generic_draw_horizontal_line+0x44>
    17c2:	aa 0f       	add	r26, r26
    17c4:	bb 1f       	adc	r27, r27
    17c6:	6a 95       	dec	r22
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <gfx_mono_generic_draw_horizontal_line+0x40>
    17ca:	fa 2e       	mov	r15, r26
    17cc:	21 30       	cpi	r18, 0x01	; 1
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <gfx_mono_generic_draw_horizontal_line+0x56>
    17d0:	98 f0       	brcs	.+38     	; 0x17f8 <gfx_mono_generic_draw_horizontal_line+0x76>
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	19 f1       	breq	.+70     	; 0x181c <gfx_mono_generic_draw_horizontal_line+0x9a>
    17d6:	31 c0       	rjmp	.+98     	; 0x183a <gfx_mono_generic_draw_horizontal_line+0xb8>
    17d8:	c4 2f       	mov	r28, r20
    17da:	1f ef       	ldi	r17, 0xFF	; 255
    17dc:	18 0f       	add	r17, r24
    17de:	01 2f       	mov	r16, r17
    17e0:	0c 0f       	add	r16, r28
    17e2:	60 2f       	mov	r22, r16
    17e4:	8d 2f       	mov	r24, r29
    17e6:	70 d9       	rcall	.-3360   	; 0xac8 <gfx_mono_st7565r_get_byte>
    17e8:	4f 2d       	mov	r20, r15
    17ea:	48 2b       	or	r20, r24
    17ec:	60 2f       	mov	r22, r16
    17ee:	8d 2f       	mov	r24, r29
    17f0:	4c d8       	rcall	.-3944   	; 0x88a <gfx_mono_st7565r_put_byte>
    17f2:	c1 50       	subi	r28, 0x01	; 1
    17f4:	a1 f7       	brne	.-24     	; 0x17de <gfx_mono_generic_draw_horizontal_line+0x5c>
    17f6:	21 c0       	rjmp	.+66     	; 0x183a <gfx_mono_generic_draw_horizontal_line+0xb8>
    17f8:	c4 2f       	mov	r28, r20
    17fa:	1f ef       	ldi	r17, 0xFF	; 255
    17fc:	18 0f       	add	r17, r24
    17fe:	fa 2e       	mov	r15, r26
    1800:	f0 94       	com	r15
    1802:	01 2f       	mov	r16, r17
    1804:	0c 0f       	add	r16, r28
    1806:	60 2f       	mov	r22, r16
    1808:	8d 2f       	mov	r24, r29
    180a:	5e d9       	rcall	.-3396   	; 0xac8 <gfx_mono_st7565r_get_byte>
    180c:	4f 2d       	mov	r20, r15
    180e:	48 23       	and	r20, r24
    1810:	60 2f       	mov	r22, r16
    1812:	8d 2f       	mov	r24, r29
    1814:	3a d8       	rcall	.-3980   	; 0x88a <gfx_mono_st7565r_put_byte>
    1816:	c1 50       	subi	r28, 0x01	; 1
    1818:	a1 f7       	brne	.-24     	; 0x1802 <gfx_mono_generic_draw_horizontal_line+0x80>
    181a:	0f c0       	rjmp	.+30     	; 0x183a <gfx_mono_generic_draw_horizontal_line+0xb8>
    181c:	c4 2f       	mov	r28, r20
    181e:	1f ef       	ldi	r17, 0xFF	; 255
    1820:	18 0f       	add	r17, r24
    1822:	01 2f       	mov	r16, r17
    1824:	0c 0f       	add	r16, r28
    1826:	60 2f       	mov	r22, r16
    1828:	8d 2f       	mov	r24, r29
    182a:	4e d9       	rcall	.-3428   	; 0xac8 <gfx_mono_st7565r_get_byte>
    182c:	4f 2d       	mov	r20, r15
    182e:	48 27       	eor	r20, r24
    1830:	60 2f       	mov	r22, r16
    1832:	8d 2f       	mov	r24, r29
    1834:	2a d8       	rcall	.-4012   	; 0x88a <gfx_mono_st7565r_put_byte>
    1836:	c1 50       	subi	r28, 0x01	; 1
    1838:	a1 f7       	brne	.-24     	; 0x1822 <gfx_mono_generic_draw_horizontal_line+0xa0>
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	08 95       	ret

00001846 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
	if (height == 0) {
    1850:	22 23       	and	r18, r18
    1852:	69 f0       	breq	.+26     	; 0x186e <gfx_mono_generic_draw_filled_rect+0x28>
    1854:	f4 2e       	mov	r15, r20
    1856:	18 2f       	mov	r17, r24
    1858:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    185a:	df ef       	ldi	r29, 0xFF	; 255
    185c:	d6 0f       	add	r29, r22
    185e:	6d 2f       	mov	r22, r29
    1860:	6c 0f       	add	r22, r28
    1862:	20 2f       	mov	r18, r16
    1864:	4f 2d       	mov	r20, r15
    1866:	81 2f       	mov	r24, r17
    1868:	8c df       	rcall	.-232    	; 0x1782 <gfx_mono_generic_draw_horizontal_line>
    186a:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    186c:	c1 f7       	brne	.-16     	; 0x185e <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	08 95       	ret

0000187a <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    1880:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    1884:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1888:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    188c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    1890:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    1894:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1898:	08 95       	ret

0000189a <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    18a4:	9f b7       	in	r25, 0x3f	; 63
    18a6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    18a8:	f8 94       	cli
	return flags;
    18aa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    18ac:	e8 2f       	mov	r30, r24
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	e0 59       	subi	r30, 0x90	; 144
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	60 95       	com	r22
    18b6:	80 81       	ld	r24, Z
    18b8:	68 23       	and	r22, r24
    18ba:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18bc:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    18be:	0f 90       	pop	r0
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	c8 2f       	mov	r28, r24
    18dc:	e6 2e       	mov	r14, r22
    18de:	b4 2e       	mov	r11, r20
    18e0:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	24 81       	ldd	r18, Z+4	; 0x04
    18e8:	43 81       	ldd	r20, Z+3	; 0x03
    18ea:	6b 2d       	mov	r22, r11
    18ec:	8e 2d       	mov	r24, r14
    18ee:	ab df       	rcall	.-170    	; 0x1846 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    18f0:	f6 01       	movw	r30, r12
    18f2:	80 81       	ld	r24, Z
    18f4:	81 11       	cpse	r24, r1
    18f6:	39 c0       	rjmp	.+114    	; 0x196a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    18f8:	83 81       	ldd	r24, Z+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	26 95       	lsr	r18
    18fe:	26 95       	lsr	r18
    1900:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1902:	87 70       	andi	r24, 0x07	; 7
    1904:	09 f0       	breq	.+2      	; 0x1908 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1906:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1908:	f6 01       	movw	r30, r12
    190a:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    190c:	8c 2f       	mov	r24, r28
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	35 81       	ldd	r19, Z+5	; 0x05
    1912:	83 1b       	sub	r24, r19
    1914:	91 09       	sbc	r25, r1
    1916:	2a 9d       	mul	r18, r10
    1918:	90 01       	movw	r18, r0
    191a:	11 24       	eor	r1, r1
    191c:	82 9f       	mul	r24, r18
    191e:	a0 01       	movw	r20, r0
    1920:	83 9f       	mul	r24, r19
    1922:	50 0d       	add	r21, r0
    1924:	92 9f       	mul	r25, r18
    1926:	50 0d       	add	r21, r0
    1928:	11 24       	eor	r1, r1
    192a:	01 81       	ldd	r16, Z+1	; 0x01
    192c:	12 81       	ldd	r17, Z+2	; 0x02
    192e:	04 0f       	add	r16, r20
    1930:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1932:	f6 01       	movw	r30, r12
    1934:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1936:	ff 20       	and	r15, r15
    1938:	a1 f0       	breq	.+40     	; 0x1962 <gfx_mono_draw_char+0x9c>
    193a:	d0 e0       	ldi	r29, 0x00	; 0
    193c:	c0 e0       	ldi	r28, 0x00	; 0
    193e:	8e 2d       	mov	r24, r14
    1940:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1942:	9c 2f       	mov	r25, r28
    1944:	97 70       	andi	r25, 0x07	; 7
    1946:	21 f4       	brne	.+8      	; 0x1950 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1948:	f8 01       	movw	r30, r16
    194a:	d4 91       	lpm	r29, Z
				glyph_data++;
    194c:	0f 5f       	subi	r16, 0xFF	; 255
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1950:	dd 23       	and	r29, r29
    1952:	1c f4       	brge	.+6      	; 0x195a <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	6b 2d       	mov	r22, r11
    1958:	81 d8       	rcall	.-3838   	; 0xa5c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    195a:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    195c:	cf 5f       	subi	r28, 0xFF	; 255
    195e:	fc 12       	cpse	r15, r28
    1960:	ee cf       	rjmp	.-36     	; 0x193e <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1962:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    1964:	aa 94       	dec	r10
	} while (rows_left > 0);
    1966:	a1 10       	cpse	r10, r1
    1968:	e4 cf       	rjmp	.-56     	; 0x1932 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	08 95       	ret

00001980 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	d6 2e       	mov	r13, r22
    1990:	04 2f       	mov	r16, r20
    1992:	79 01       	movw	r14, r18
    1994:	ec 01       	movw	r28, r24
    1996:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1998:	89 91       	ld	r24, Y+
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	31 f4       	brne	.+12     	; 0x19aa <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    199e:	f7 01       	movw	r30, r14
    19a0:	84 81       	ldd	r24, Z+4	; 0x04
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    19a6:	1d 2d       	mov	r17, r13
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    19aa:	8d 30       	cpi	r24, 0x0D	; 13
    19ac:	39 f0       	breq	.+14     	; 0x19bc <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    19ae:	97 01       	movw	r18, r14
    19b0:	40 2f       	mov	r20, r16
    19b2:	61 2f       	mov	r22, r17
    19b4:	88 df       	rcall	.-240    	; 0x18c6 <gfx_mono_draw_char>
			x += font->width;
    19b6:	f7 01       	movw	r30, r14
    19b8:	83 81       	ldd	r24, Z+3	; 0x03
    19ba:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    19bc:	88 81       	ld	r24, Y
    19be:	81 11       	cpse	r24, r1
    19c0:	eb cf       	rjmp	.-42     	; 0x1998 <gfx_mono_draw_string+0x18>
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	08 95       	ret

000019d2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    19dc:	c6 2f       	mov	r28, r22
    19de:	d0 e0       	ldi	r29, 0x00	; 0
    19e0:	de 01       	movw	r26, r28
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <ioport_configure_port_pin+0x18>
    19e6:	b5 95       	asr	r27
    19e8:	a7 95       	ror	r26
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <ioport_configure_port_pin+0x14>
    19ee:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    19f0:	50 8b       	std	Z+16, r21	; 0x10
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    19f8:	28 30       	cpi	r18, 0x08	; 8
    19fa:	31 05       	cpc	r19, r1
    19fc:	89 f7       	brne	.-30     	; 0x19e0 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    19fe:	40 ff       	sbrs	r20, 0
    1a00:	0a c0       	rjmp	.+20     	; 0x1a16 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1a02:	41 ff       	sbrs	r20, 1
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1a06:	fc 01       	movw	r30, r24
    1a08:	65 83       	std	Z+5, r22	; 0x05
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1a10:	fc 01       	movw	r30, r24
    1a12:	61 83       	std	Z+1, r22	; 0x01
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1a16:	fc 01       	movw	r30, r24
    1a18:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1a20:	43 e0       	ldi	r20, 0x03	; 3
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	80 ee       	ldi	r24, 0xE0	; 224
    1a28:	97 e0       	ldi	r25, 0x07	; 7
    1a2a:	d3 df       	rcall	.-90     	; 0x19d2 <ioport_configure_port_pin>
    1a2c:	43 e0       	ldi	r20, 0x03	; 3
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	62 e0       	ldi	r22, 0x02	; 2
    1a32:	80 ee       	ldi	r24, 0xE0	; 224
    1a34:	97 e0       	ldi	r25, 0x07	; 7
    1a36:	cd df       	rcall	.-102    	; 0x19d2 <ioport_configure_port_pin>
    1a38:	43 e0       	ldi	r20, 0x03	; 3
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	60 e1       	ldi	r22, 0x10	; 16
    1a3e:	80 e6       	ldi	r24, 0x60	; 96
    1a40:	96 e0       	ldi	r25, 0x06	; 6
    1a42:	c7 df       	rcall	.-114    	; 0x19d2 <ioport_configure_port_pin>
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	50 e4       	ldi	r21, 0x40	; 64
    1a48:	60 e2       	ldi	r22, 0x20	; 32
    1a4a:	80 e6       	ldi	r24, 0x60	; 96
    1a4c:	96 e0       	ldi	r25, 0x06	; 6
    1a4e:	c1 df       	rcall	.-126    	; 0x19d2 <ioport_configure_port_pin>
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	5b e1       	ldi	r21, 0x1B	; 27
    1a54:	60 e2       	ldi	r22, 0x20	; 32
    1a56:	80 e8       	ldi	r24, 0x80	; 128
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	bb df       	rcall	.-138    	; 0x19d2 <ioport_configure_port_pin>
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	5b e1       	ldi	r21, 0x1B	; 27
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	80 ea       	ldi	r24, 0xA0	; 160
    1a64:	96 e0       	ldi	r25, 0x06	; 6
    1a66:	b5 df       	rcall	.-150    	; 0x19d2 <ioport_configure_port_pin>
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	5b e1       	ldi	r21, 0x1B	; 27
    1a6c:	64 e0       	ldi	r22, 0x04	; 4
    1a6e:	80 ea       	ldi	r24, 0xA0	; 160
    1a70:	96 e0       	ldi	r25, 0x06	; 6
    1a72:	af df       	rcall	.-162    	; 0x19d2 <ioport_configure_port_pin>
    1a74:	43 e0       	ldi	r20, 0x03	; 3
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	62 e0       	ldi	r22, 0x02	; 2
    1a7a:	80 e6       	ldi	r24, 0x60	; 96
    1a7c:	96 e0       	ldi	r25, 0x06	; 6
    1a7e:	a9 df       	rcall	.-174    	; 0x19d2 <ioport_configure_port_pin>
    1a80:	43 e0       	ldi	r20, 0x03	; 3
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	68 e0       	ldi	r22, 0x08	; 8
    1a86:	80 e6       	ldi	r24, 0x60	; 96
    1a88:	96 e0       	ldi	r25, 0x06	; 6
    1a8a:	a3 df       	rcall	.-186    	; 0x19d2 <ioport_configure_port_pin>
    1a8c:	43 e0       	ldi	r20, 0x03	; 3
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	68 e0       	ldi	r22, 0x08	; 8
    1a92:	80 ea       	ldi	r24, 0xA0	; 160
    1a94:	96 e0       	ldi	r25, 0x06	; 6
    1a96:	9d df       	rcall	.-198    	; 0x19d2 <ioport_configure_port_pin>
    1a98:	43 e0       	ldi	r20, 0x03	; 3
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	80 e6       	ldi	r24, 0x60	; 96
    1aa0:	96 e0       	ldi	r25, 0x06	; 6
    1aa2:	97 df       	rcall	.-210    	; 0x19d2 <ioport_configure_port_pin>
    1aa4:	43 e0       	ldi	r20, 0x03	; 3
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	68 e0       	ldi	r22, 0x08	; 8
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	96 e0       	ldi	r25, 0x06	; 6
    1aae:	91 df       	rcall	.-222    	; 0x19d2 <ioport_configure_port_pin>
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	60 e1       	ldi	r22, 0x10	; 16
    1ab6:	80 e8       	ldi	r24, 0x80	; 128
    1ab8:	96 e0       	ldi	r25, 0x06	; 6
    1aba:	8b df       	rcall	.-234    	; 0x19d2 <ioport_configure_port_pin>
    1abc:	43 e0       	ldi	r20, 0x03	; 3
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	62 e0       	ldi	r22, 0x02	; 2
    1ac2:	80 e6       	ldi	r24, 0x60	; 96
    1ac4:	96 e0       	ldi	r25, 0x06	; 6
    1ac6:	85 df       	rcall	.-246    	; 0x19d2 <ioport_configure_port_pin>
    1ac8:	43 e0       	ldi	r20, 0x03	; 3
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	68 e0       	ldi	r22, 0x08	; 8
    1ace:	80 e6       	ldi	r24, 0x60	; 96
    1ad0:	96 e0       	ldi	r25, 0x06	; 6
    1ad2:	7f df       	rcall	.-258    	; 0x19d2 <ioport_configure_port_pin>
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	50 e0       	ldi	r21, 0x00	; 0
    1ad8:	64 e0       	ldi	r22, 0x04	; 4
    1ada:	80 e6       	ldi	r24, 0x60	; 96
    1adc:	96 e0       	ldi	r25, 0x06	; 6
    1ade:	79 df       	rcall	.-270    	; 0x19d2 <ioport_configure_port_pin>
    1ae0:	43 e0       	ldi	r20, 0x03	; 3
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	60 e1       	ldi	r22, 0x10	; 16
    1ae6:	80 ea       	ldi	r24, 0xA0	; 160
    1ae8:	96 e0       	ldi	r25, 0x06	; 6
    1aea:	73 df       	rcall	.-282    	; 0x19d2 <ioport_configure_port_pin>
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	96 e0       	ldi	r25, 0x06	; 6
    1af6:	6d df       	rcall	.-294    	; 0x19d2 <ioport_configure_port_pin>
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	64 e0       	ldi	r22, 0x04	; 4
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	96 e0       	ldi	r25, 0x06	; 6
    1b02:	67 df       	rcall	.-306    	; 0x19d2 <ioport_configure_port_pin>
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	96 e0       	ldi	r25, 0x06	; 6
    1b0e:	61 df       	rcall	.-318    	; 0x19d2 <ioport_configure_port_pin>
    1b10:	43 e0       	ldi	r20, 0x03	; 3
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	68 e0       	ldi	r22, 0x08	; 8
    1b16:	80 e4       	ldi	r24, 0x40	; 64
    1b18:	96 e0       	ldi	r25, 0x06	; 6
    1b1a:	5b df       	rcall	.-330    	; 0x19d2 <ioport_configure_port_pin>
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	64 e0       	ldi	r22, 0x04	; 4
    1b22:	80 e4       	ldi	r24, 0x40	; 64
    1b24:	96 e0       	ldi	r25, 0x06	; 6
    1b26:	55 df       	rcall	.-342    	; 0x19d2 <ioport_configure_port_pin>
    1b28:	43 e0       	ldi	r20, 0x03	; 3
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	68 e0       	ldi	r22, 0x08	; 8
    1b2e:	80 e6       	ldi	r24, 0x60	; 96
    1b30:	96 e0       	ldi	r25, 0x06	; 6
    1b32:	4f df       	rcall	.-354    	; 0x19d2 <ioport_configure_port_pin>
    1b34:	40 e0       	ldi	r20, 0x00	; 0
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	64 e0       	ldi	r22, 0x04	; 4
    1b3a:	80 e6       	ldi	r24, 0x60	; 96
    1b3c:	96 e0       	ldi	r25, 0x06	; 6
    1b3e:	49 df       	rcall	.-366    	; 0x19d2 <ioport_configure_port_pin>
    1b40:	43 e0       	ldi	r20, 0x03	; 3
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	68 e0       	ldi	r22, 0x08	; 8
    1b46:	80 e8       	ldi	r24, 0x80	; 128
    1b48:	96 e0       	ldi	r25, 0x06	; 6
    1b4a:	43 df       	rcall	.-378    	; 0x19d2 <ioport_configure_port_pin>
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	64 e0       	ldi	r22, 0x04	; 4
    1b52:	80 e8       	ldi	r24, 0x80	; 128
    1b54:	96 e0       	ldi	r25, 0x06	; 6
    1b56:	3d cf       	rjmp	.-390    	; 0x19d2 <ioport_configure_port_pin>
    1b58:	08 95       	ret

00001b5a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1b5c:	61 50       	subi	r22, 0x01	; 1
    1b5e:	71 09       	sbc	r23, r1
    1b60:	81 09       	sbc	r24, r1
    1b62:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1b64:	61 15       	cp	r22, r1
    1b66:	71 05       	cpc	r23, r1
    1b68:	81 05       	cpc	r24, r1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	b9 f7       	brne	.-18     	; 0x1b5c <__portable_avr_delay_cycles+0x2>
    1b6e:	08 95       	ret

00001b70 <setUpSerial>:
{
	// Baud rate selection
	// BSEL = (2000000 / (2^0 * 16*9600) -1 = 12.0208... ~ 12 -> BSCALE = 0
	// FBAUD = ( (2000000)/(2^0*16(12+1)) = 9615.384 -> mendekati lah ya
	
	USARTC0_BAUDCTRLB = 0; //memastikan BSCALE = 0
    1b70:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7be8a7>
	USARTC0_BAUDCTRLA = 0x0C; // 12
    1b74:	8c e0       	ldi	r24, 0x0C	; 12
    1b76:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7be8a6>
	
	//USARTC0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
	//USARTC0_BAUDCTRLA = 0xCF; // 207
	
	//Disable interrupts, just for safety
	USARTC0_CTRLA = 0;
    1b7a:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7be8a3>
	//8 data bits, no parity and 1 stop bit
	USARTC0_CTRLC = USART_CHSIZE_8BIT_gc;
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7be8a5>
	
	//Enable receive and transmit
	USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm;
    1b84:	88 e1       	ldi	r24, 0x18	; 24
    1b86:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7be8a4>
    1b8a:	08 95       	ret

00001b8c <sendChar>:
}

void sendChar(char c) {
	while( !(USARTC0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
    1b8c:	e1 ea       	ldi	r30, 0xA1	; 161
    1b8e:	f8 e0       	ldi	r31, 0x08	; 8
    1b90:	90 81       	ld	r25, Z
    1b92:	95 ff       	sbrs	r25, 5
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <sendChar+0x4>
	USARTC0_DATA = c;
    1b96:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7be8a0>
    1b9a:	08 95       	ret

00001b9c <sendString>:
}

void sendString(char *text) {
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
	while(*text) {
    1ba2:	88 81       	ld	r24, Y
    1ba4:	88 23       	and	r24, r24
    1ba6:	51 f0       	breq	.+20     	; 0x1bbc <sendString+0x20>
    1ba8:	21 96       	adiw	r28, 0x01	; 1
		sendChar(*text++);
    1baa:	f0 df       	rcall	.-32     	; 0x1b8c <sendChar>
		//usart_putchar(USART_SERIAL_EXAMPLE, *text++);
		delay_ms(1);
    1bac:	6e e4       	ldi	r22, 0x4E	; 78
    1bae:	71 e0       	ldi	r23, 0x01	; 1
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	d2 df       	rcall	.-92     	; 0x1b5a <__portable_avr_delay_cycles>
	while( !(USARTC0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
	USARTC0_DATA = c;
}

void sendString(char *text) {
	while(*text) {
    1bb6:	89 91       	ld	r24, Y+
    1bb8:	81 11       	cpse	r24, r1
    1bba:	f7 cf       	rjmp	.-18     	; 0x1baa <sendString+0xe>
		sendChar(*text++);
		//usart_putchar(USART_SERIAL_EXAMPLE, *text++);
		delay_ms(1);
	}
}
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <receiveChar>:

char receiveChar() {
	while (!(USARTC0_STATUS & USART_RXCIF_bm)); //Wait until receive finish
    1bc2:	e1 ea       	ldi	r30, 0xA1	; 161
    1bc4:	f8 e0       	ldi	r31, 0x08	; 8
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 23       	and	r24, r24
    1bca:	ec f7       	brge	.-6      	; 0x1bc6 <receiveChar+0x4>
	return USARTC0_DATA;
    1bcc:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7be8a0>
}
    1bd0:	08 95       	ret

00001bd2 <receiveString>:

void receiveString() {
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	0a e8       	ldi	r16, 0x8A	; 138
    1bdc:	12 e2       	ldi	r17, 0x22	; 34
	int i = 0;
    1bde:	c0 e0       	ldi	r28, 0x00	; 0
    1be0:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		char inp = receiveChar();
    1be2:	ef df       	rcall	.-34     	; 0x1bc2 <receiveChar>
		//char inp = usart_getchar(USART_SERIAL_EXAMPLE);
		if(inp=='\n') break;
    1be4:	8a 30       	cpi	r24, 0x0A	; 10
    1be6:	51 f0       	breq	.+20     	; 0x1bfc <receiveString+0x2a>
		else reads[i++] = inp;
    1be8:	21 96       	adiw	r28, 0x01	; 1
    1bea:	f8 01       	movw	r30, r16
    1bec:	81 93       	st	Z+, r24
    1bee:	8f 01       	movw	r16, r30
		delay_ms(1);
    1bf0:	6e e4       	ldi	r22, 0x4E	; 78
    1bf2:	71 e0       	ldi	r23, 0x01	; 1
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	b0 df       	rcall	.-160    	; 0x1b5a <__portable_avr_delay_cycles>
	}
    1bfa:	f3 cf       	rjmp	.-26     	; 0x1be2 <receiveString+0x10>
	reads[i] = '\0';
    1bfc:	c6 57       	subi	r28, 0x76	; 118
    1bfe:	dd 4d       	sbci	r29, 0xDD	; 221
    1c00:	18 82       	st	Y, r1
}
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	08 95       	ret

00001c0c <main>:

int main (void) {
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
    1c0c:	09 df       	rcall	.-494    	; 0x1a20 <board_init>
	sysclk_init();
    1c0e:	35 de       	rcall	.-918    	; 0x187a <sysclk_init>
    1c10:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <gfx_mono_st7565r_init>
	gfx_mono_init();
    1c14:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1c16:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
    1c1a:	78 94       	sei
	
	// Inisialisasi interrupt vector
	pmic_init();
	cpu_irq_enable();
    1c1c:	80 e1       	ldi	r24, 0x10	; 16
    1c1e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
    1c22:	88 e0       	ldi	r24, 0x08	; 8
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	
	PORTC_OUTSET = PIN3_bm; // PC3 as TX
    1c24:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7be645>
    1c28:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	PORTC_DIRSET = PIN3_bm; //TX pin as output
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
	
	PORTC_OUTCLR = PIN2_bm; //PC2 as RX
    1c2e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7be646>
    1c32:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7be642>
	PORTC_DIRCLR = PIN2_bm; //RX pin as input
	
	setUpSerial();
    1c36:	9c df       	rcall	.-200    	; 0x1b70 <setUpSerial>
    1c38:	67 e0       	ldi	r22, 0x07	; 7
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    1c3a:	70 e2       	ldi	r23, 0x20	; 32
    1c3c:	80 ea       	ldi	r24, 0xA0	; 160
    1c3e:	98 e0       	ldi	r25, 0x08	; 8
    1c40:	e4 d9       	rcall	.-3128   	; 0x100a <usart_init_rs232>
    1c42:	20 e0       	ldi	r18, 0x00	; 0
	
	gfx_mono_draw_string("loading ...", 0, 0, &sysfont);
    1c44:	30 e2       	ldi	r19, 0x20	; 32
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	8e e0       	ldi	r24, 0x0E	; 14
    1c4c:	90 e2       	ldi	r25, 0x20	; 32
    1c4e:	98 de       	rcall	.-720    	; 0x1980 <gfx_mono_draw_string>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
	gfx_mono_draw_string(".       ",0, 8, &sysfont);
    1c52:	30 e2       	ldi	r19, 0x20	; 32
    1c54:	48 e0       	ldi	r20, 0x08	; 8
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	8a e1       	ldi	r24, 0x1A	; 26
    1c5a:	90 e2       	ldi	r25, 0x20	; 32
    1c5c:	91 de       	rcall	.-734    	; 0x1980 <gfx_mono_draw_string>
	delay_ms(500);
    1c5e:	6b e0       	ldi	r22, 0x0B	; 11
    1c60:	7b e8       	ldi	r23, 0x8B	; 139
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	79 df       	rcall	.-270    	; 0x1b5a <__portable_avr_delay_cycles>
	gfx_mono_draw_string("..      ",0, 8, &sysfont);
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e2       	ldi	r19, 0x20	; 32
    1c6c:	48 e0       	ldi	r20, 0x08	; 8
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	83 e2       	ldi	r24, 0x23	; 35
    1c72:	90 e2       	ldi	r25, 0x20	; 32
    1c74:	85 de       	rcall	.-758    	; 0x1980 <gfx_mono_draw_string>
	delay_ms(500);
    1c76:	6b e0       	ldi	r22, 0x0B	; 11
    1c78:	7b e8       	ldi	r23, 0x8B	; 139
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	6d df       	rcall	.-294    	; 0x1b5a <__portable_avr_delay_cycles>
	gfx_mono_draw_string("...     ",0, 8, &sysfont);
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e2       	ldi	r19, 0x20	; 32
    1c84:	48 e0       	ldi	r20, 0x08	; 8
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	8c e2       	ldi	r24, 0x2C	; 44
    1c8a:	90 e2       	ldi	r25, 0x20	; 32
	delay_s(2);
    1c8c:	79 de       	rcall	.-782    	; 0x1980 <gfx_mono_draw_string>
    1c8e:	6b e2       	ldi	r22, 0x2B	; 43
    1c90:	7c e2       	ldi	r23, 0x2C	; 44
    1c92:	8a e0       	ldi	r24, 0x0A	; 10
    1c94:	90 e0       	ldi	r25, 0x00	; 0
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1c96:	61 df       	rcall	.-318    	; 0x1b5a <__portable_avr_delay_cycles>
    1c98:	00 ee       	ldi	r16, 0xE0	; 224
    1c9a:	17 e0       	ldi	r17, 0x07	; 7
	
	while (1) {
		receiveString();
    1c9c:	c1 e0       	ldi	r28, 0x01	; 1
    1c9e:	99 df       	rcall	.-206    	; 0x1bd2 <receiveString>
		
		gfx_mono_draw_string("receiving UwU  ", 0, 0, &sysfont);
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e2       	ldi	r19, 0x20	; 32
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	85 e3       	ldi	r24, 0x35	; 53
    1caa:	90 e2       	ldi	r25, 0x20	; 32
    1cac:	69 de       	rcall	.-814    	; 0x1980 <gfx_mono_draw_string>
		gfx_mono_draw_string("rec :          ",0, 8, &sysfont);
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e2       	ldi	r19, 0x20	; 32
    1cb2:	48 e0       	ldi	r20, 0x08	; 8
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	85 e4       	ldi	r24, 0x45	; 69
    1cb8:	90 e2       	ldi	r25, 0x20	; 32
		gfx_mono_draw_string(reads,32, 8, &sysfont);
    1cba:	62 de       	rcall	.-828    	; 0x1980 <gfx_mono_draw_string>
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e2       	ldi	r19, 0x20	; 32
    1cc0:	48 e0       	ldi	r20, 0x08	; 8
    1cc2:	60 e2       	ldi	r22, 0x20	; 32
    1cc4:	8a e8       	ldi	r24, 0x8A	; 138
    1cc6:	92 e2       	ldi	r25, 0x22	; 34
		delay_ms(50);
    1cc8:	5b de       	rcall	.-842    	; 0x1980 <gfx_mono_draw_string>
    1cca:	6b e1       	ldi	r22, 0x1B	; 27
    1ccc:	71 e4       	ldi	r23, 0x41	; 65
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	43 df       	rcall	.-378    	; 0x1b5a <__portable_avr_delay_cycles>
		
		int test = atoi(reads);
    1cd4:	8a e8       	ldi	r24, 0x8A	; 138
    1cd6:	92 e2       	ldi	r25, 0x22	; 34
    1cd8:	51 d0       	rcall	.+162    	; 0x1d7c <atoi>
		
		if (test < 50) {
    1cda:	c2 97       	sbiw	r24, 0x32	; 50
    1cdc:	a4 f4       	brge	.+40     	; 0x1d06 <main+0xfa>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1cde:	f8 01       	movw	r30, r16
			gpio_set_pin_high(LED0_GPIO);
			sendString("1\n");
    1ce0:	c5 83       	std	Z+5, r28	; 0x05
    1ce2:	85 e5       	ldi	r24, 0x55	; 85
    1ce4:	90 e2       	ldi	r25, 0x20	; 32
    1ce6:	5a df       	rcall	.-332    	; 0x1b9c <sendString>
			gfx_mono_draw_string("send >v<      ", 0, 0, &sysfont);
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e2       	ldi	r19, 0x20	; 32
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	88 e5       	ldi	r24, 0x58	; 88
    1cf2:	90 e2       	ldi	r25, 0x20	; 32
    1cf4:	45 de       	rcall	.-886    	; 0x1980 <gfx_mono_draw_string>
			gfx_mono_draw_string("              ",0, 8, &sysfont);
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e2       	ldi	r19, 0x20	; 32
    1cfa:	48 e0       	ldi	r20, 0x08	; 8
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	87 e6       	ldi	r24, 0x67	; 103
    1d00:	90 e2       	ldi	r25, 0x20	; 32
    1d02:	3e de       	rcall	.-900    	; 0x1980 <gfx_mono_draw_string>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1d04:	13 c0       	rjmp	.+38     	; 0x1d2c <main+0x120>
    1d06:	f8 01       	movw	r30, r16
		}
		
		else {
			gpio_set_pin_low(LED0_GPIO);
			sendString("0\n");
    1d08:	c6 83       	std	Z+6, r28	; 0x06
    1d0a:	86 e7       	ldi	r24, 0x76	; 118
    1d0c:	90 e2       	ldi	r25, 0x20	; 32
			gfx_mono_draw_string("rest -v-      ", 0, 0, &sysfont);
    1d0e:	46 df       	rcall	.-372    	; 0x1b9c <sendString>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e2       	ldi	r19, 0x20	; 32
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	89 e7       	ldi	r24, 0x79	; 121
    1d1a:	90 e2       	ldi	r25, 0x20	; 32
    1d1c:	31 de       	rcall	.-926    	; 0x1980 <gfx_mono_draw_string>
			gfx_mono_draw_string("              ",0, 8, &sysfont);
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e2       	ldi	r19, 0x20	; 32
    1d22:	48 e0       	ldi	r20, 0x08	; 8
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	87 e6       	ldi	r24, 0x67	; 103
    1d28:	90 e2       	ldi	r25, 0x20	; 32
    1d2a:	2a de       	rcall	.-940    	; 0x1980 <gfx_mono_draw_string>
    1d2c:	6b e0       	ldi	r22, 0x0B	; 11
		}
			
		delay_ms(500);
    1d2e:	7b e8       	ldi	r23, 0x8B	; 139
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	12 df       	rcall	.-476    	; 0x1b5a <__portable_avr_delay_cycles>
    1d36:	b3 cf       	rjmp	.-154    	; 0x1c9e <main+0x92>

00001d38 <__udivmodsi4>:
    1d38:	a1 e2       	ldi	r26, 0x21	; 33
			
		}
    1d3a:	1a 2e       	mov	r1, r26
    1d3c:	aa 1b       	sub	r26, r26
    1d3e:	bb 1b       	sub	r27, r27
    1d40:	fd 01       	movw	r30, r26
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <__udivmodsi4_ep>

00001d44 <__udivmodsi4_loop>:
    1d44:	aa 1f       	adc	r26, r26
    1d46:	bb 1f       	adc	r27, r27
    1d48:	ee 1f       	adc	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	a2 17       	cp	r26, r18
    1d4e:	b3 07       	cpc	r27, r19
    1d50:	e4 07       	cpc	r30, r20
    1d52:	f5 07       	cpc	r31, r21
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <__udivmodsi4_ep>
    1d56:	a2 1b       	sub	r26, r18
    1d58:	b3 0b       	sbc	r27, r19
    1d5a:	e4 0b       	sbc	r30, r20
    1d5c:	f5 0b       	sbc	r31, r21

00001d5e <__udivmodsi4_ep>:
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	1a 94       	dec	r1
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <__udivmodsi4_loop>
    1d6a:	60 95       	com	r22
    1d6c:	70 95       	com	r23
    1d6e:	80 95       	com	r24
    1d70:	90 95       	com	r25
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	bd 01       	movw	r22, r26
    1d78:	cf 01       	movw	r24, r30
    1d7a:	08 95       	ret

00001d7c <atoi>:
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	88 27       	eor	r24, r24
    1d80:	99 27       	eor	r25, r25
    1d82:	e8 94       	clt
    1d84:	21 91       	ld	r18, Z+
    1d86:	20 32       	cpi	r18, 0x20	; 32
    1d88:	e9 f3       	breq	.-6      	; 0x1d84 <atoi+0x8>
    1d8a:	29 30       	cpi	r18, 0x09	; 9
    1d8c:	10 f0       	brcs	.+4      	; 0x1d92 <atoi+0x16>
    1d8e:	2e 30       	cpi	r18, 0x0E	; 14
    1d90:	c8 f3       	brcs	.-14     	; 0x1d84 <atoi+0x8>
    1d92:	2b 32       	cpi	r18, 0x2B	; 43
    1d94:	39 f0       	breq	.+14     	; 0x1da4 <atoi+0x28>
    1d96:	2d 32       	cpi	r18, 0x2D	; 45
    1d98:	31 f4       	brne	.+12     	; 0x1da6 <atoi+0x2a>
    1d9a:	68 94       	set
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <atoi+0x28>
    1d9e:	0b d0       	rcall	.+22     	; 0x1db6 <__mulhi_const_10>
    1da0:	82 0f       	add	r24, r18
    1da2:	91 1d       	adc	r25, r1
    1da4:	21 91       	ld	r18, Z+
    1da6:	20 53       	subi	r18, 0x30	; 48
    1da8:	2a 30       	cpi	r18, 0x0A	; 10
    1daa:	c8 f3       	brcs	.-14     	; 0x1d9e <atoi+0x22>
    1dac:	1e f4       	brtc	.+6      	; 0x1db4 <atoi+0x38>
    1dae:	90 95       	com	r25
    1db0:	81 95       	neg	r24
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	08 95       	ret

00001db6 <__mulhi_const_10>:
    1db6:	7a e0       	ldi	r23, 0x0A	; 10
    1db8:	97 9f       	mul	r25, r23
    1dba:	90 2d       	mov	r25, r0
    1dbc:	87 9f       	mul	r24, r23
    1dbe:	80 2d       	mov	r24, r0
    1dc0:	91 0d       	add	r25, r1
    1dc2:	11 24       	eor	r1, r1
    1dc4:	08 95       	ret

00001dc6 <_exit>:
    1dc6:	f8 94       	cli

00001dc8 <__stop_program>:
    1dc8:	ff cf       	rjmp	.-2      	; 0x1dc8 <__stop_program>
