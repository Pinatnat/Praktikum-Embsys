
Praktikum 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00802000  000038ca  0000395e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000285  00802050  00802050  000039ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000039ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000630  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000123fd  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005778  00000000  00000000  0001647d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a4b7  00000000  00000000  0001bbf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001414  00000000  00000000  000260ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003b4d3  00000000  00000000  000274c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a09d  00000000  00000000  00062993  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000838  00000000  00000000  0006ca30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c9dc  00000000  00000000  0006d268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4f c2       	rjmp	.+1182   	; 0x4a0 <__ctors_end>
       2:	00 00       	nop
       4:	6e c2       	rjmp	.+1244   	; 0x4e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c2       	rjmp	.+1240   	; 0x4e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c2       	rjmp	.+1236   	; 0x4e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c2       	rjmp	.+1232   	; 0x4e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c2       	rjmp	.+1228   	; 0x4e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c2       	rjmp	.+1224   	; 0x4e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c2       	rjmp	.+1220   	; 0x4e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c2       	rjmp	.+1216   	; 0x4e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c2       	rjmp	.+1212   	; 0x4e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c2       	rjmp	.+1208   	; 0x4e2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c2       	rjmp	.+1204   	; 0x4e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c2       	rjmp	.+1200   	; 0x4e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c2       	rjmp	.+1196   	; 0x4e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_14>
      3c:	52 c2       	rjmp	.+1188   	; 0x4e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c2       	rjmp	.+1180   	; 0x4e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c2       	rjmp	.+1176   	; 0x4e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c2       	rjmp	.+1172   	; 0x4e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c2       	rjmp	.+1168   	; 0x4e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c2       	rjmp	.+1164   	; 0x4e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c2       	rjmp	.+1160   	; 0x4e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c2       	rjmp	.+1156   	; 0x4e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c2       	rjmp	.+1152   	; 0x4e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c2       	rjmp	.+1148   	; 0x4e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c2       	rjmp	.+1144   	; 0x4e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c2       	rjmp	.+1140   	; 0x4e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c2       	rjmp	.+1136   	; 0x4e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c2       	rjmp	.+1132   	; 0x4e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c2       	rjmp	.+1128   	; 0x4e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c2       	rjmp	.+1124   	; 0x4e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c2       	rjmp	.+1120   	; 0x4e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c2       	rjmp	.+1116   	; 0x4e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c2       	rjmp	.+1112   	; 0x4e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c2       	rjmp	.+1108   	; 0x4e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c2       	rjmp	.+1104   	; 0x4e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c2       	rjmp	.+1100   	; 0x4e2 <__bad_interrupt>
      96:	00 00       	nop
      98:	24 c2       	rjmp	.+1096   	; 0x4e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	22 c2       	rjmp	.+1092   	; 0x4e2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	20 c2       	rjmp	.+1088   	; 0x4e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c2       	rjmp	.+1084   	; 0x4e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c2       	rjmp	.+1080   	; 0x4e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c2       	rjmp	.+1076   	; 0x4e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c2       	rjmp	.+1072   	; 0x4e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c2       	rjmp	.+1068   	; 0x4e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c2       	rjmp	.+1064   	; 0x4e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c2       	rjmp	.+1060   	; 0x4e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c2       	rjmp	.+1056   	; 0x4e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c2       	rjmp	.+1052   	; 0x4e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c2       	rjmp	.+1048   	; 0x4e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0a c2       	rjmp	.+1044   	; 0x4e2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	08 c2       	rjmp	.+1040   	; 0x4e2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	06 c2       	rjmp	.+1036   	; 0x4e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	04 c2       	rjmp	.+1032   	; 0x4e2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	02 c2       	rjmp	.+1028   	; 0x4e2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	00 c2       	rjmp	.+1024   	; 0x4e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fe c1       	rjmp	.+1020   	; 0x4e2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fc c1       	rjmp	.+1016   	; 0x4e2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fa c1       	rjmp	.+1012   	; 0x4e2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f8 c1       	rjmp	.+1008   	; 0x4e2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f6 c1       	rjmp	.+1004   	; 0x4e2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f4 c1       	rjmp	.+1000   	; 0x4e2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f2 c1       	rjmp	.+996    	; 0x4e2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f0 c1       	rjmp	.+992    	; 0x4e2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ee c1       	rjmp	.+988    	; 0x4e2 <__bad_interrupt>
     106:	00 00       	nop
     108:	ec c1       	rjmp	.+984    	; 0x4e2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ea c1       	rjmp	.+980    	; 0x4e2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e8 c1       	rjmp	.+976    	; 0x4e2 <__bad_interrupt>
     112:	00 00       	nop
     114:	e6 c1       	rjmp	.+972    	; 0x4e2 <__bad_interrupt>
     116:	00 00       	nop
     118:	e4 c1       	rjmp	.+968    	; 0x4e2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e2 c1       	rjmp	.+964    	; 0x4e2 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e0 c1       	rjmp	.+960    	; 0x4e2 <__bad_interrupt>
     122:	00 00       	nop
     124:	de c1       	rjmp	.+956    	; 0x4e2 <__bad_interrupt>
     126:	00 00       	nop
     128:	dc c1       	rjmp	.+952    	; 0x4e2 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	da c1       	rjmp	.+948    	; 0x4e2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d8 c1       	rjmp	.+944    	; 0x4e2 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 c1       	rjmp	.+940    	; 0x4e2 <__bad_interrupt>
     136:	00 00       	nop
     138:	d4 c1       	rjmp	.+936    	; 0x4e2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d2 c1       	rjmp	.+932    	; 0x4e2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d0 c1       	rjmp	.+928    	; 0x4e2 <__bad_interrupt>
     142:	00 00       	nop
     144:	ce c1       	rjmp	.+924    	; 0x4e2 <__bad_interrupt>
     146:	00 00       	nop
     148:	cc c1       	rjmp	.+920    	; 0x4e2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ca c1       	rjmp	.+916    	; 0x4e2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c8 c1       	rjmp	.+912    	; 0x4e2 <__bad_interrupt>
     152:	00 00       	nop
     154:	c6 c1       	rjmp	.+908    	; 0x4e2 <__bad_interrupt>
     156:	00 00       	nop
     158:	c4 c1       	rjmp	.+904    	; 0x4e2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c2 c1       	rjmp	.+900    	; 0x4e2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c0 c1       	rjmp	.+896    	; 0x4e2 <__bad_interrupt>
     162:	00 00       	nop
     164:	be c1       	rjmp	.+892    	; 0x4e2 <__bad_interrupt>
     166:	00 00       	nop
     168:	bc c1       	rjmp	.+888    	; 0x4e2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ba c1       	rjmp	.+884    	; 0x4e2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b8 c1       	rjmp	.+880    	; 0x4e2 <__bad_interrupt>
     172:	00 00       	nop
     174:	b6 c1       	rjmp	.+876    	; 0x4e2 <__bad_interrupt>
     176:	00 00       	nop
     178:	b4 c1       	rjmp	.+872    	; 0x4e2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b2 c1       	rjmp	.+868    	; 0x4e2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b0 c1       	rjmp	.+864    	; 0x4e2 <__bad_interrupt>
     182:	00 00       	nop
     184:	ae c1       	rjmp	.+860    	; 0x4e2 <__bad_interrupt>
     186:	00 00       	nop
     188:	ac c1       	rjmp	.+856    	; 0x4e2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	aa c1       	rjmp	.+852    	; 0x4e2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a8 c1       	rjmp	.+848    	; 0x4e2 <__bad_interrupt>
     192:	00 00       	nop
     194:	a6 c1       	rjmp	.+844    	; 0x4e2 <__bad_interrupt>
     196:	00 00       	nop
     198:	a4 c1       	rjmp	.+840    	; 0x4e2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a2 c1       	rjmp	.+836    	; 0x4e2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a0 c1       	rjmp	.+832    	; 0x4e2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9e c1       	rjmp	.+828    	; 0x4e2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9c c1       	rjmp	.+824    	; 0x4e2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9a c1       	rjmp	.+820    	; 0x4e2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	98 c1       	rjmp	.+816    	; 0x4e2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	96 c1       	rjmp	.+812    	; 0x4e2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	94 c1       	rjmp	.+808    	; 0x4e2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	92 c1       	rjmp	.+804    	; 0x4e2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	90 c1       	rjmp	.+800    	; 0x4e2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8e c1       	rjmp	.+796    	; 0x4e2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8c c1       	rjmp	.+792    	; 0x4e2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8a c1       	rjmp	.+788    	; 0x4e2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	88 c1       	rjmp	.+784    	; 0x4e2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	86 c1       	rjmp	.+780    	; 0x4e2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	84 c1       	rjmp	.+776    	; 0x4e2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	82 c1       	rjmp	.+772    	; 0x4e2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	80 c1       	rjmp	.+768    	; 0x4e2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7e c1       	rjmp	.+764    	; 0x4e2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7c c1       	rjmp	.+760    	; 0x4e2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7a c1       	rjmp	.+756    	; 0x4e2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	78 c1       	rjmp	.+752    	; 0x4e2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	76 c1       	rjmp	.+748    	; 0x4e2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	74 c1       	rjmp	.+744    	; 0x4e2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	46 13       	cpse	r20, r22
     1fe:	46 13       	cpse	r20, r22
     200:	73 13       	cpse	r23, r19
     202:	78 13       	cpse	r23, r24
     204:	8d 13       	cpse	r24, r29
     206:	46 13       	cpse	r20, r22
     208:	46 13       	cpse	r20, r22
     20a:	73 13       	cpse	r23, r19
     20c:	78 13       	cpse	r23, r24

0000020e <__trampolines_end>:
     20e:	00 00       	nop
     210:	00 00       	nop
     212:	00 00       	nop
     214:	00 20       	and	r0, r0
     216:	20 20       	and	r2, r0
     218:	20 20       	and	r2, r0
     21a:	00 20       	and	r0, r0
     21c:	50 50       	subi	r21, 0x00	; 0
     21e:	50 00       	.word	0x0050	; ????
     220:	00 00       	nop
     222:	00 50       	subi	r16, 0x00	; 0
     224:	50 f8       	bld	r5, 0
     226:	50 f8       	bld	r5, 0
     228:	50 50       	subi	r21, 0x00	; 0
     22a:	20 78       	andi	r18, 0x80	; 128
     22c:	a0 70       	andi	r26, 0x00	; 0
     22e:	28 f0       	brcs	.+10     	; 0x23a <__trampolines_end+0x2c>
     230:	20 c0       	rjmp	.+64     	; 0x272 <__trampolines_end+0x64>
     232:	c8 10       	cpse	r12, r8
     234:	20 40       	sbci	r18, 0x00	; 0
     236:	98 18       	sub	r9, r8
     238:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1dcb>
     23c:	a8 90       	.word	0x90a8	; ????
     23e:	68 60       	ori	r22, 0x08	; 8
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 00       	nop
     244:	00 00       	nop
     246:	10 20       	and	r1, r0
     248:	40 40       	sbci	r20, 0x00	; 0
     24a:	40 20       	and	r4, r0
     24c:	10 40       	sbci	r17, 0x00	; 0
     24e:	20 10       	cpse	r2, r0
     250:	10 10       	cpse	r1, r0
     252:	20 40       	sbci	r18, 0x00	; 0
     254:	00 50       	subi	r16, 0x00	; 0
     256:	20 f8       	bld	r2, 0
     258:	20 50       	subi	r18, 0x00	; 0
     25a:	00 00       	nop
     25c:	20 20       	and	r2, r0
     25e:	f8 20       	and	r15, r8
     260:	20 00       	.word	0x0020	; ????
     262:	00 00       	nop
     264:	00 00       	nop
     266:	60 20       	and	r6, r0
     268:	40 00       	.word	0x0040	; ????
     26a:	00 00       	nop
     26c:	f8 00       	.word	0x00f8	; ????
     26e:	00 00       	nop
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 60       	ori	r16, 0x00	; 0
     276:	60 00       	.word	0x0060	; ????
     278:	08 10       	cpse	r0, r8
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	80 00       	.word	0x0080	; ????
     27e:	70 88       	ldd	r7, Z+16	; 0x10
     280:	98 a8       	ldd	r9, Y+48	; 0x30
     282:	c8 88       	ldd	r12, Y+16	; 0x10
     284:	70 20       	and	r7, r0
     286:	60 20       	and	r6, r0
     288:	20 20       	and	r2, r0
     28a:	20 70       	andi	r18, 0x00	; 0
     28c:	70 88       	ldd	r7, Z+16	; 0x10
     28e:	08 10       	cpse	r0, r8
     290:	20 40       	sbci	r18, 0x00	; 0
     292:	f8 f8       	.word	0xf8f8	; ????
     294:	10 20       	and	r1, r0
     296:	10 08       	sbc	r1, r0
     298:	88 70       	andi	r24, 0x08	; 8
     29a:	10 30       	cpi	r17, 0x00	; 0
     29c:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     2a0:	10 f8       	bld	r1, 0
     2a2:	80 f0       	brcs	.+32     	; 0x2c4 <__trampolines_end+0xb6>
     2a4:	08 08       	sbc	r0, r8
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	30 40       	sbci	r19, 0x00	; 0
     2aa:	80 f0       	brcs	.+32     	; 0x2cc <__trampolines_end+0xbe>
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	70 f8       	bld	r7, 0
     2b0:	08 10       	cpse	r0, r8
     2b2:	20 40       	sbci	r18, 0x00	; 0
     2b4:	40 40       	sbci	r20, 0x00	; 0
     2b6:	70 88       	ldd	r7, Z+16	; 0x10
     2b8:	88 70       	andi	r24, 0x08	; 8
     2ba:	88 88       	ldd	r8, Y+16	; 0x10
     2bc:	70 70       	andi	r23, 0x00	; 0
     2be:	88 88       	ldd	r8, Y+16	; 0x10
     2c0:	78 08       	sbc	r7, r8
     2c2:	10 60       	ori	r17, 0x00	; 0
     2c4:	00 60       	ori	r16, 0x00	; 0
     2c6:	60 00       	.word	0x0060	; ????
     2c8:	60 60       	ori	r22, 0x00	; 0
     2ca:	00 00       	nop
     2cc:	60 60       	ori	r22, 0x00	; 0
     2ce:	00 60       	ori	r16, 0x00	; 0
     2d0:	20 40       	sbci	r18, 0x00	; 0
     2d2:	08 10       	cpse	r0, r8
     2d4:	20 40       	sbci	r18, 0x00	; 0
     2d6:	20 10       	cpse	r2, r0
     2d8:	08 00       	.word	0x0008	; ????
     2da:	00 f8       	bld	r0, 0
     2dc:	00 f8       	bld	r0, 0
     2de:	00 00       	nop
     2e0:	80 40       	sbci	r24, 0x00	; 0
     2e2:	20 10       	cpse	r2, r0
     2e4:	20 40       	sbci	r18, 0x00	; 0
     2e6:	80 70       	andi	r24, 0x00	; 0
     2e8:	88 08       	sbc	r8, r8
     2ea:	10 20       	and	r1, r0
     2ec:	00 20       	and	r0, r0
     2ee:	70 88       	ldd	r7, Z+16	; 0x10
     2f0:	08 68       	ori	r16, 0x88	; 136
     2f2:	a8 a8       	ldd	r10, Y+48	; 0x30
     2f4:	70 70       	andi	r23, 0x00	; 0
     2f6:	88 88       	ldd	r8, Y+16	; 0x10
     2f8:	88 f8       	.word	0xf888	; ????
     2fa:	88 88       	ldd	r8, Y+16	; 0x10
     2fc:	f0 88       	ldd	r15, Z+16	; 0x10
     2fe:	88 f0       	brcs	.+34     	; 0x322 <__trampolines_end+0x114>
     300:	88 88       	ldd	r8, Y+16	; 0x10
     302:	f0 70       	andi	r31, 0x00	; 0
     304:	88 80       	ld	r8, Y
     306:	80 80       	ld	r8, Z
     308:	88 70       	andi	r24, 0x08	; 8
     30a:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x65b3>
     30e:	88 90       	.word	0x9088	; ????
     310:	e0 f8       	bld	r14, 0
     312:	80 80       	ld	r8, Z
     314:	f0 80       	ld	r15, Z
     316:	80 f8       	bld	r8, 0
     318:	f8 80       	ld	r15, Y
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	80 80       	ld	r8, Z
     31e:	80 70       	andi	r24, 0x00	; 0
     320:	88 80       	ld	r8, Y
     322:	80 98       	cbi	0x10, 0	; 16
     324:	88 70       	andi	r24, 0x08	; 8
     326:	88 88       	ldd	r8, Y+16	; 0x10
     328:	88 f8       	.word	0xf888	; ????
     32a:	88 88       	ldd	r8, Y+16	; 0x10
     32c:	88 70       	andi	r24, 0x08	; 8
     32e:	20 20       	and	r2, r0
     330:	20 20       	and	r2, r0
     332:	20 70       	andi	r18, 0x00	; 0
     334:	38 10       	cpse	r3, r8
     336:	10 10       	cpse	r1, r0
     338:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x658b>
     33c:	90 a0       	ldd	r9, Z+32	; 0x20
     33e:	c0 a0       	ldd	r12, Z+32	; 0x20
     340:	90 88       	ldd	r9, Z+16	; 0x10
     342:	80 80       	ld	r8, Z
     344:	80 80       	ld	r8, Z
     346:	80 80       	ld	r8, Z
     348:	f8 88       	ldd	r15, Y+16	; 0x10
     34a:	d8 a8       	ldd	r13, Y+48	; 0x30
     34c:	88 88       	ldd	r8, Y+16	; 0x10
     34e:	88 88       	ldd	r8, Y+16	; 0x10
     350:	88 88       	ldd	r8, Y+16	; 0x10
     352:	c8 a8       	ldd	r12, Y+48	; 0x30
     354:	98 88       	ldd	r9, Y+16	; 0x10
     356:	88 70       	andi	r24, 0x08	; 8
     358:	88 88       	ldd	r8, Y+16	; 0x10
     35a:	88 88       	ldd	r8, Y+16	; 0x10
     35c:	88 70       	andi	r24, 0x08	; 8
     35e:	f0 88       	ldd	r15, Z+16	; 0x10
     360:	88 f0       	brcs	.+34     	; 0x384 <__trampolines_end+0x176>
     362:	80 80       	ld	r8, Z
     364:	80 70       	andi	r24, 0x00	; 0
     366:	88 88       	ldd	r8, Y+16	; 0x10
     368:	88 a8       	ldd	r8, Y+48	; 0x30
     36a:	90 68       	ori	r25, 0x80	; 128
     36c:	f0 88       	ldd	r15, Z+16	; 0x10
     36e:	88 f0       	brcs	.+34     	; 0x392 <__trampolines_end+0x184>
     370:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x55b3>
     374:	80 80       	ld	r8, Z
     376:	70 08       	sbc	r7, r0
     378:	08 f0       	brcs	.+2      	; 0x37c <__trampolines_end+0x16e>
     37a:	f8 20       	and	r15, r8
     37c:	20 20       	and	r2, r0
     37e:	20 20       	and	r2, r0
     380:	20 88       	ldd	r2, Z+16	; 0x10
     382:	88 88       	ldd	r8, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	88 70       	andi	r24, 0x08	; 8
     388:	88 88       	ldd	r8, Y+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 88       	ldd	r2, Z+16	; 0x10
     390:	88 88       	ldd	r8, Y+16	; 0x10
     392:	a8 a8       	ldd	r10, Y+48	; 0x30
     394:	d8 88       	ldd	r13, Y+16	; 0x10
     396:	88 88       	ldd	r8, Y+16	; 0x10
     398:	50 20       	and	r5, r0
     39a:	50 88       	ldd	r5, Z+16	; 0x10
     39c:	88 88       	ldd	r8, Y+16	; 0x10
     39e:	88 50       	subi	r24, 0x08	; 8
     3a0:	20 20       	and	r2, r0
     3a2:	20 20       	and	r2, r0
     3a4:	f8 08       	sbc	r15, r8
     3a6:	10 20       	and	r1, r0
     3a8:	40 80       	ld	r4, Z
     3aa:	f8 38       	cpi	r31, 0x88	; 136
     3ac:	20 20       	and	r2, r0
     3ae:	20 20       	and	r2, r0
     3b0:	20 38       	cpi	r18, 0x80	; 128
     3b2:	00 80       	ld	r0, Z
     3b4:	40 20       	and	r4, r0
     3b6:	10 08       	sbc	r1, r0
     3b8:	00 e0       	ldi	r16, 0x00	; 0
     3ba:	20 20       	and	r2, r0
     3bc:	20 20       	and	r2, r0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	20 50       	subi	r18, 0x00	; 0
     3c2:	88 00       	.word	0x0088	; ????
	...
     3cc:	00 f8       	bld	r0, 0
     3ce:	40 20       	and	r4, r0
     3d0:	10 00       	.word	0x0010	; ????
     3d2:	00 00       	nop
     3d4:	00 00       	nop
     3d6:	00 70       	andi	r16, 0x00	; 0
     3d8:	08 78       	andi	r16, 0x88	; 136
     3da:	88 78       	andi	r24, 0x88	; 136
     3dc:	80 80       	ld	r8, Z
     3de:	b0 c8       	rjmp	.-3744   	; 0xfffff540 <__eeprom_end+0xff7ef540>
     3e0:	88 88       	ldd	r8, Y+16	; 0x10
     3e2:	f0 00       	.word	0x00f0	; ????
     3e4:	00 70       	andi	r16, 0x00	; 0
     3e6:	80 80       	ld	r8, Z
     3e8:	88 70       	andi	r24, 0x08	; 8
     3ea:	08 08       	sbc	r0, r8
     3ec:	68 98       	cbi	0x0d, 0	; 13
     3ee:	88 88       	ldd	r8, Y+16	; 0x10
     3f0:	78 00       	.word	0x0078	; ????
     3f2:	00 70       	andi	r16, 0x00	; 0
     3f4:	88 f8       	.word	0xf888	; ????
     3f6:	80 70       	andi	r24, 0x00	; 0
     3f8:	30 48       	sbci	r19, 0x80	; 128
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	40 40       	sbci	r20, 0x00	; 0
     3fe:	40 00       	.word	0x0040	; ????
     400:	00 78       	andi	r16, 0x80	; 128
     402:	88 78       	andi	r24, 0x88	; 136
     404:	08 30       	cpi	r16, 0x08	; 8
     406:	80 80       	ld	r8, Z
     408:	b0 c8       	rjmp	.-3744   	; 0xfffff56a <__eeprom_end+0xff7ef56a>
     40a:	88 88       	ldd	r8, Y+16	; 0x10
     40c:	88 20       	and	r8, r8
     40e:	00 60       	ori	r16, 0x00	; 0
     410:	20 20       	and	r2, r0
     412:	20 70       	andi	r18, 0x00	; 0
     414:	10 00       	.word	0x0010	; ????
     416:	30 10       	cpse	r3, r0
     418:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d8b>
     41c:	40 48       	sbci	r20, 0x80	; 128
     41e:	50 60       	ori	r21, 0x00	; 0
     420:	50 48       	sbci	r21, 0x80	; 128
     422:	60 20       	and	r6, r0
     424:	20 20       	and	r2, r0
     426:	20 20       	and	r2, r0
     428:	70 00       	.word	0x0070	; ????
     42a:	00 d0       	rcall	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	a8 a8       	ldd	r10, Y+48	; 0x30
     42e:	88 88       	ldd	r8, Y+16	; 0x10
     430:	00 00       	nop
     432:	b0 c8       	rjmp	.-3744   	; 0xfffff594 <__eeprom_end+0xff7ef594>
     434:	88 88       	ldd	r8, Y+16	; 0x10
     436:	88 00       	.word	0x0088	; ????
     438:	00 70       	andi	r16, 0x00	; 0
     43a:	88 88       	ldd	r8, Y+16	; 0x10
     43c:	88 70       	andi	r24, 0x08	; 8
     43e:	00 00       	nop
     440:	f0 88       	ldd	r15, Z+16	; 0x10
     442:	f0 80       	ld	r15, Z
     444:	80 00       	.word	0x0080	; ????
     446:	00 68       	ori	r16, 0x80	; 128
     448:	98 78       	andi	r25, 0x88	; 136
     44a:	08 08       	sbc	r0, r8
     44c:	00 00       	nop
     44e:	b0 c8       	rjmp	.-3744   	; 0xfffff5b0 <__eeprom_end+0xff7ef5b0>
     450:	80 80       	ld	r8, Z
     452:	80 00       	.word	0x0080	; ????
     454:	00 70       	andi	r16, 0x00	; 0
     456:	80 70       	andi	r24, 0x00	; 0
     458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     45a:	40 40       	sbci	r20, 0x00	; 0
     45c:	e0 40       	sbci	r30, 0x00	; 0
     45e:	40 48       	sbci	r20, 0x80	; 128
     460:	30 00       	.word	0x0030	; ????
     462:	00 88       	ldd	r0, Z+16	; 0x10
     464:	88 88       	ldd	r8, Y+16	; 0x10
     466:	98 68       	ori	r25, 0x88	; 136
     468:	00 00       	nop
     46a:	88 88       	ldd	r8, Y+16	; 0x10
     46c:	88 50       	subi	r24, 0x08	; 8
     46e:	20 00       	.word	0x0020	; ????
     470:	00 88       	ldd	r0, Z+16	; 0x10
     472:	88 a8       	ldd	r8, Y+48	; 0x30
     474:	a8 50       	subi	r26, 0x08	; 8
     476:	00 00       	nop
     478:	88 50       	subi	r24, 0x08	; 8
     47a:	20 50       	subi	r18, 0x00	; 0
     47c:	88 00       	.word	0x0088	; ????
     47e:	00 88       	ldd	r0, Z+16	; 0x10
     480:	88 78       	andi	r24, 0x88	; 136
     482:	08 70       	andi	r16, 0x08	; 8
     484:	00 00       	nop
     486:	f8 10       	cpse	r15, r8
     488:	20 40       	sbci	r18, 0x00	; 0
     48a:	f8 10       	cpse	r15, r8
     48c:	20 20       	and	r2, r0
     48e:	40 20       	and	r4, r0
     490:	20 10       	cpse	r2, r0
     492:	20 20       	and	r2, r0
     494:	20 20       	and	r2, r0
     496:	20 20       	and	r2, r0
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	20 20       	and	r2, r0
     49c:	10 20       	and	r1, r0
     49e:	20 40       	sbci	r18, 0x00	; 0

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df e5       	ldi	r29, 0x5F	; 95
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	0c bf       	out	0x3c, r16	; 60

000004b0 <__do_copy_data>:
     4b0:	10 e2       	ldi	r17, 0x20	; 32
     4b2:	a0 e0       	ldi	r26, 0x00	; 0
     4b4:	b0 e2       	ldi	r27, 0x20	; 32
     4b6:	ea ec       	ldi	r30, 0xCA	; 202
     4b8:	f8 e3       	ldi	r31, 0x38	; 56
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	0b bf       	out	0x3b, r16	; 59
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__do_copy_data+0x14>
     4c0:	07 90       	elpm	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	a0 35       	cpi	r26, 0x50	; 80
     4c6:	b1 07       	cpc	r27, r17
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__do_copy_data+0x10>

000004ca <__do_clear_bss>:
     4ca:	22 e2       	ldi	r18, 0x22	; 34
     4cc:	a0 e5       	ldi	r26, 0x50	; 80
     4ce:	b0 e2       	ldi	r27, 0x20	; 32
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <.do_clear_bss_start>

000004d2 <.do_clear_bss_loop>:
     4d2:	1d 92       	st	X+, r1

000004d4 <.do_clear_bss_start>:
     4d4:	a5 3d       	cpi	r26, 0xD5	; 213
     4d6:	b2 07       	cpc	r27, r18
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <.do_clear_bss_loop>
     4da:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <main>
     4de:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <_exit>

000004e2 <__bad_interrupt>:
     4e2:	8e cd       	rjmp	.-1252   	; 0x0 <__vectors>

000004e4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4e6:	61 50       	subi	r22, 0x01	; 1
     4e8:	71 09       	sbc	r23, r1
     4ea:	81 09       	sbc	r24, r1
     4ec:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4ee:	61 15       	cp	r22, r1
     4f0:	71 05       	cpc	r23, r1
     4f2:	81 05       	cpc	r24, r1
     4f4:	91 05       	cpc	r25, r1
     4f6:	b9 f7       	brne	.-18     	; 0x4e6 <__portable_avr_delay_cycles+0x2>
     4f8:	08 95       	ret

000004fa <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4fa:	bf 92       	push	r11
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	1f 92       	push	r1
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     512:	00 e0       	ldi	r16, 0x00	; 0
     514:	16 e0       	ldi	r17, 0x06	; 6
     516:	68 94       	set
     518:	ff 24       	eor	r15, r15
     51a:	f3 f8       	bld	r15, 3
     51c:	f8 01       	movw	r30, r16
     51e:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     520:	64 e0       	ldi	r22, 0x04	; 4
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	dd df       	rcall	.-70     	; 0x4e4 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     52a:	f8 01       	movw	r30, r16
     52c:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     52e:	64 e0       	ldi	r22, 0x04	; 4
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	d6 df       	rcall	.-84     	; 0x4e4 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     538:	0f 2e       	mov	r0, r31
     53a:	fb e2       	ldi	r31, 0x2B	; 43
     53c:	bf 2e       	mov	r11, r31
     53e:	f0 2d       	mov	r31, r0
     540:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     542:	80 ea       	ldi	r24, 0xA0	; 160
     544:	99 e0       	ldi	r25, 0x09	; 9
     546:	0e 94 ff 13 	call	0x27fe	; 0x27fe <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     54a:	c1 2c       	mov	r12, r1
     54c:	d1 2c       	mov	r13, r1
     54e:	76 01       	movw	r14, r12
     550:	00 e4       	ldi	r16, 0x40	; 64
     552:	12 e4       	ldi	r17, 0x42	; 66
     554:	2f e0       	ldi	r18, 0x0F	; 15
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	43 e0       	ldi	r20, 0x03	; 3
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	80 ea       	ldi	r24, 0xA0	; 160
     562:	99 e0       	ldi	r25, 0x09	; 9
     564:	0e 94 2e 14 	call	0x285c	; 0x285c <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     568:	00 e6       	ldi	r16, 0x60	; 96
     56a:	16 e0       	ldi	r17, 0x06	; 6
     56c:	ff 24       	eor	r15, r15
     56e:	f3 94       	inc	r15
     570:	f8 01       	movw	r30, r16
     572:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     574:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	99 e0       	ldi	r25, 0x09	; 9
     580:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     584:	f8 01       	movw	r30, r16
     586:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     588:	e0 ea       	ldi	r30, 0xA0	; 160
     58a:	f9 e0       	ldi	r31, 0x09	; 9
     58c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     58e:	85 ff       	sbrs	r24, 5
     590:	fd cf       	rjmp	.-6      	; 0x58c <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     592:	80 ea       	ldi	r24, 0xA0	; 160
     594:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     598:	e0 ea       	ldi	r30, 0xA0	; 160
     59a:	f9 e0       	ldi	r31, 0x09	; 9
     59c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     59e:	86 ff       	sbrs	r24, 6
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5a2:	e0 ea       	ldi	r30, 0xA0	; 160
     5a4:	f9 e0       	ldi	r31, 0x09	; 9
     5a6:	80 e4       	ldi	r24, 0x40	; 64
     5a8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5aa:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5ba:	8b e2       	ldi	r24, 0x2B	; 43
     5bc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5be:	be 01       	movw	r22, r28
     5c0:	6f 5f       	subi	r22, 0xFF	; 255
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	80 ea       	ldi	r24, 0xA0	; 160
     5c6:	99 e0       	ldi	r25, 0x09	; 9
     5c8:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5d2:	e0 ea       	ldi	r30, 0xA0	; 160
     5d4:	f9 e0       	ldi	r31, 0x09	; 9
     5d6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5d8:	85 ff       	sbrs	r24, 5
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5dc:	86 ea       	ldi	r24, 0xA6	; 166
     5de:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5e2:	e0 ea       	ldi	r30, 0xA0	; 160
     5e4:	f9 e0       	ldi	r31, 0x09	; 9
     5e6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5e8:	86 ff       	sbrs	r24, 6
     5ea:	fd cf       	rjmp	.-6      	; 0x5e6 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ec:	e0 ea       	ldi	r30, 0xA0	; 160
     5ee:	f9 e0       	ldi	r31, 0x09	; 9
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5f4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	99 e0       	ldi	r25, 0x09	; 9
     600:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     604:	8b e2       	ldi	r24, 0x2B	; 43
     606:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     608:	be 01       	movw	r22, r28
     60a:	6f 5f       	subi	r22, 0xFF	; 255
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 ea       	ldi	r24, 0xA0	; 160
     610:	99 e0       	ldi	r25, 0x09	; 9
     612:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     61c:	e0 ea       	ldi	r30, 0xA0	; 160
     61e:	f9 e0       	ldi	r31, 0x09	; 9
     620:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     622:	85 ff       	sbrs	r24, 5
     624:	fd cf       	rjmp	.-6      	; 0x620 <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     626:	88 ec       	ldi	r24, 0xC8	; 200
     628:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     62c:	e0 ea       	ldi	r30, 0xA0	; 160
     62e:	f9 e0       	ldi	r31, 0x09	; 9
     630:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     632:	86 ff       	sbrs	r24, 6
     634:	fd cf       	rjmp	.-6      	; 0x630 <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     636:	e0 ea       	ldi	r30, 0xA0	; 160
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	80 e4       	ldi	r24, 0x40	; 64
     63c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     63e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	80 ea       	ldi	r24, 0xA0	; 160
     648:	99 e0       	ldi	r25, 0x09	; 9
     64a:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     64e:	8b e2       	ldi	r24, 0x2B	; 43
     650:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	80 ea       	ldi	r24, 0xA0	; 160
     65a:	99 e0       	ldi	r25, 0x09	; 9
     65c:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     666:	e0 ea       	ldi	r30, 0xA0	; 160
     668:	f9 e0       	ldi	r31, 0x09	; 9
     66a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     66c:	85 ff       	sbrs	r24, 5
     66e:	fd cf       	rjmp	.-6      	; 0x66a <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     670:	82 ea       	ldi	r24, 0xA2	; 162
     672:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     676:	e0 ea       	ldi	r30, 0xA0	; 160
     678:	f9 e0       	ldi	r31, 0x09	; 9
     67a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     67c:	86 ff       	sbrs	r24, 6
     67e:	fd cf       	rjmp	.-6      	; 0x67a <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     680:	e0 ea       	ldi	r30, 0xA0	; 160
     682:	f9 e0       	ldi	r31, 0x09	; 9
     684:	80 e4       	ldi	r24, 0x40	; 64
     686:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     688:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     698:	8b e2       	ldi	r24, 0x2B	; 43
     69a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	80 ea       	ldi	r24, 0xA0	; 160
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6b0:	e0 ea       	ldi	r30, 0xA0	; 160
     6b2:	f9 e0       	ldi	r31, 0x09	; 9
     6b4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6b6:	85 ff       	sbrs	r24, 5
     6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6ba:	8f e2       	ldi	r24, 0x2F	; 47
     6bc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6c0:	e0 ea       	ldi	r30, 0xA0	; 160
     6c2:	f9 e0       	ldi	r31, 0x09	; 9
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6c6:	86 ff       	sbrs	r24, 6
     6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6ca:	e0 ea       	ldi	r30, 0xA0	; 160
     6cc:	f9 e0       	ldi	r31, 0x09	; 9
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6d2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	99 e0       	ldi	r25, 0x09	; 9
     6de:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6e2:	8b e2       	ldi	r24, 0x2B	; 43
     6e4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6e6:	be 01       	movw	r22, r28
     6e8:	6f 5f       	subi	r22, 0xFF	; 255
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	99 e0       	ldi	r25, 0x09	; 9
     6f0:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6fa:	e0 ea       	ldi	r30, 0xA0	; 160
     6fc:	f9 e0       	ldi	r31, 0x09	; 9
     6fe:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     700:	85 ff       	sbrs	r24, 5
     702:	fd cf       	rjmp	.-6      	; 0x6fe <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     704:	88 ef       	ldi	r24, 0xF8	; 248
     706:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     70a:	e0 ea       	ldi	r30, 0xA0	; 160
     70c:	f9 e0       	ldi	r31, 0x09	; 9
     70e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     710:	86 ff       	sbrs	r24, 6
     712:	fd cf       	rjmp	.-6      	; 0x70e <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     71c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     72c:	8b e2       	ldi	r24, 0x2B	; 43
     72e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     730:	be 01       	movw	r22, r28
     732:	6f 5f       	subi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	80 ea       	ldi	r24, 0xA0	; 160
     738:	99 e0       	ldi	r25, 0x09	; 9
     73a:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     744:	e0 ea       	ldi	r30, 0xA0	; 160
     746:	f9 e0       	ldi	r31, 0x09	; 9
     748:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     74a:	85 ff       	sbrs	r24, 5
     74c:	fd cf       	rjmp	.-6      	; 0x748 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     74e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     752:	e0 ea       	ldi	r30, 0xA0	; 160
     754:	f9 e0       	ldi	r31, 0x09	; 9
     756:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     758:	86 ff       	sbrs	r24, 6
     75a:	fd cf       	rjmp	.-6      	; 0x756 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     75c:	e0 ea       	ldi	r30, 0xA0	; 160
     75e:	f9 e0       	ldi	r31, 0x09	; 9
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     764:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     774:	8b e2       	ldi	r24, 0x2B	; 43
     776:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     778:	be 01       	movw	r22, r28
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	80 ea       	ldi	r24, 0xA0	; 160
     780:	99 e0       	ldi	r25, 0x09	; 9
     782:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     78c:	e0 ea       	ldi	r30, 0xA0	; 160
     78e:	f9 e0       	ldi	r31, 0x09	; 9
     790:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     792:	85 ff       	sbrs	r24, 5
     794:	fd cf       	rjmp	.-6      	; 0x790 <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     796:	81 e2       	ldi	r24, 0x21	; 33
     798:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     79c:	e0 ea       	ldi	r30, 0xA0	; 160
     79e:	f9 e0       	ldi	r31, 0x09	; 9
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7a2:	86 ff       	sbrs	r24, 6
     7a4:	fd cf       	rjmp	.-6      	; 0x7a0 <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7a6:	e0 ea       	ldi	r30, 0xA0	; 160
     7a8:	f9 e0       	ldi	r31, 0x09	; 9
     7aa:	80 e4       	ldi	r24, 0x40	; 64
     7ac:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ae:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7be:	8b e2       	ldi	r24, 0x2B	; 43
     7c0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
     7cc:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7d6:	e0 ea       	ldi	r30, 0xA0	; 160
     7d8:	f9 e0       	ldi	r31, 0x09	; 9
     7da:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7dc:	85 ff       	sbrs	r24, 5
     7de:	fd cf       	rjmp	.-6      	; 0x7da <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7e0:	81 e8       	ldi	r24, 0x81	; 129
     7e2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7e6:	e0 ea       	ldi	r30, 0xA0	; 160
     7e8:	f9 e0       	ldi	r31, 0x09	; 9
     7ea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7ec:	86 ff       	sbrs	r24, 6
     7ee:	fd cf       	rjmp	.-6      	; 0x7ea <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7f0:	e0 ea       	ldi	r30, 0xA0	; 160
     7f2:	f9 e0       	ldi	r31, 0x09	; 9
     7f4:	80 e4       	ldi	r24, 0x40	; 64
     7f6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7f8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     808:	8b e2       	ldi	r24, 0x2B	; 43
     80a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     80c:	be 01       	movw	r22, r28
     80e:	6f 5f       	subi	r22, 0xFF	; 255
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	80 ea       	ldi	r24, 0xA0	; 160
     814:	99 e0       	ldi	r25, 0x09	; 9
     816:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     820:	e0 ea       	ldi	r30, 0xA0	; 160
     822:	f9 e0       	ldi	r31, 0x09	; 9
     824:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     826:	85 ff       	sbrs	r24, 5
     828:	fd cf       	rjmp	.-6      	; 0x824 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     82a:	81 e2       	ldi	r24, 0x21	; 33
     82c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     830:	e0 ea       	ldi	r30, 0xA0	; 160
     832:	f9 e0       	ldi	r31, 0x09	; 9
     834:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     836:	86 ff       	sbrs	r24, 6
     838:	fd cf       	rjmp	.-6      	; 0x834 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
     83e:	80 e4       	ldi	r24, 0x40	; 64
     840:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     842:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 ea       	ldi	r24, 0xA0	; 160
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     852:	8b e2       	ldi	r24, 0x2B	; 43
     854:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     856:	be 01       	movw	r22, r28
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	80 ea       	ldi	r24, 0xA0	; 160
     85e:	99 e0       	ldi	r25, 0x09	; 9
     860:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     86a:	e0 ea       	ldi	r30, 0xA0	; 160
     86c:	f9 e0       	ldi	r31, 0x09	; 9
     86e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     870:	85 ff       	sbrs	r24, 5
     872:	fd cf       	rjmp	.-6      	; 0x86e <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     874:	8f ea       	ldi	r24, 0xAF	; 175
     876:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     87a:	e0 ea       	ldi	r30, 0xA0	; 160
     87c:	f9 e0       	ldi	r31, 0x09	; 9
     87e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     880:	86 ff       	sbrs	r24, 6
     882:	fd cf       	rjmp	.-6      	; 0x87e <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     884:	e0 ea       	ldi	r30, 0xA0	; 160
     886:	f9 e0       	ldi	r31, 0x09	; 9
     888:	80 e4       	ldi	r24, 0x40	; 64
     88a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     88c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	80 ea       	ldi	r24, 0xA0	; 160
     896:	99 e0       	ldi	r25, 0x09	; 9
     898:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	bf 90       	pop	r11
     8b0:	08 95       	ret

000008b2 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	1f 92       	push	r1
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	08 2f       	mov	r16, r24
     8c4:	f6 2e       	mov	r15, r22
     8c6:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8c8:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8cc:	0f 70       	andi	r16, 0x0F	; 15
     8ce:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8d0:	8b e2       	ldi	r24, 0x2B	; 43
     8d2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8d4:	be 01       	movw	r22, r28
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	80 ea       	ldi	r24, 0xA0	; 160
     8dc:	99 e0       	ldi	r25, 0x09	; 9
     8de:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8e8:	e0 ea       	ldi	r30, 0xA0	; 160
     8ea:	f9 e0       	ldi	r31, 0x09	; 9
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8ee:	95 ff       	sbrs	r25, 5
     8f0:	fd cf       	rjmp	.-6      	; 0x8ec <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8f2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8f6:	e0 ea       	ldi	r30, 0xA0	; 160
     8f8:	f9 e0       	ldi	r31, 0x09	; 9
     8fa:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8fc:	86 ff       	sbrs	r24, 6
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     900:	e0 ea       	ldi	r30, 0xA0	; 160
     902:	f9 e0       	ldi	r31, 0x09	; 9
     904:	80 e4       	ldi	r24, 0x40	; 64
     906:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     908:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	99 e0       	ldi	r25, 0x09	; 9
     914:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     918:	0f 2d       	mov	r16, r15
     91a:	0f 77       	andi	r16, 0x7F	; 127
     91c:	02 95       	swap	r16
     91e:	0f 70       	andi	r16, 0x0F	; 15
     920:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	80 ea       	ldi	r24, 0xA0	; 160
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     93a:	e0 ea       	ldi	r30, 0xA0	; 160
     93c:	f9 e0       	ldi	r31, 0x09	; 9
     93e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     940:	85 ff       	sbrs	r24, 5
     942:	fd cf       	rjmp	.-6      	; 0x93e <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     944:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     948:	e0 ea       	ldi	r30, 0xA0	; 160
     94a:	f9 e0       	ldi	r31, 0x09	; 9
     94c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94e:	86 ff       	sbrs	r24, 6
     950:	fd cf       	rjmp	.-6      	; 0x94c <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     952:	e0 ea       	ldi	r30, 0xA0	; 160
     954:	f9 e0       	ldi	r31, 0x09	; 9
     956:	80 e4       	ldi	r24, 0x40	; 64
     958:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     95a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     95c:	be 01       	movw	r22, r28
     95e:	6f 5f       	subi	r22, 0xFF	; 255
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	99 e0       	ldi	r25, 0x09	; 9
     966:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     96a:	0f 2d       	mov	r16, r15
     96c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     96e:	8b e2       	ldi	r24, 0x2B	; 43
     970:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     972:	be 01       	movw	r22, r28
     974:	6f 5f       	subi	r22, 0xFF	; 255
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	80 ea       	ldi	r24, 0xA0	; 160
     97a:	99 e0       	ldi	r25, 0x09	; 9
     97c:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     986:	e0 ea       	ldi	r30, 0xA0	; 160
     988:	f9 e0       	ldi	r31, 0x09	; 9
     98a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     98c:	85 ff       	sbrs	r24, 5
     98e:	fd cf       	rjmp	.-6      	; 0x98a <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     990:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     994:	e0 ea       	ldi	r30, 0xA0	; 160
     996:	f9 e0       	ldi	r31, 0x09	; 9
     998:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     99a:	86 ff       	sbrs	r24, 6
     99c:	fd cf       	rjmp	.-6      	; 0x998 <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     99e:	e0 ea       	ldi	r30, 0xA0	; 160
     9a0:	f9 e0       	ldi	r31, 0x09	; 9
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9a6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a8:	be 01       	movw	r22, r28
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	80 ea       	ldi	r24, 0xA0	; 160
     9b0:	99 e0       	ldi	r25, 0x09	; 9
     9b2:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9b6:	8b e2       	ldi	r24, 0x2B	; 43
     9b8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9ba:	be 01       	movw	r22, r28
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	80 ea       	ldi	r24, 0xA0	; 160
     9c2:	99 e0       	ldi	r25, 0x09	; 9
     9c4:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ce:	e0 ea       	ldi	r30, 0xA0	; 160
     9d0:	f9 e0       	ldi	r31, 0x09	; 9
     9d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9d4:	85 ff       	sbrs	r24, 5
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9d8:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9dc:	e0 ea       	ldi	r30, 0xA0	; 160
     9de:	f9 e0       	ldi	r31, 0x09	; 9
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9e2:	86 ff       	sbrs	r24, 6
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9e6:	e0 ea       	ldi	r30, 0xA0	; 160
     9e8:	f9 e0       	ldi	r31, 0x09	; 9
     9ea:	80 e4       	ldi	r24, 0x40	; 64
     9ec:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9ee:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	80 ea       	ldi	r24, 0xA0	; 160
     9fe:	99 e0       	ldi	r25, 0x09	; 9
     a00:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     a04:	0f 90       	pop	r0
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	08 95       	ret

00000a12 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a20:	80 e5       	ldi	r24, 0x50	; 80
     a22:	90 e2       	ldi	r25, 0x20	; 32
     a24:	0e 94 75 14 	call	0x28ea	; 0x28ea <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a28:	68 dd       	rcall	.-1328   	; 0x4fa <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a2e:	be 01       	movw	r22, r28
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	80 ea       	ldi	r24, 0xA0	; 160
     a36:	99 e0       	ldi	r25, 0x09	; 9
     a38:	0e 94 49 14 	call	0x2892	; 0x2892 <usart_spi_select_device>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a42:	e0 ea       	ldi	r30, 0xA0	; 160
     a44:	f9 e0       	ldi	r31, 0x09	; 9
     a46:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a48:	85 ff       	sbrs	r24, 5
     a4a:	fd cf       	rjmp	.-6      	; 0xa46 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a52:	e0 ea       	ldi	r30, 0xA0	; 160
     a54:	f9 e0       	ldi	r31, 0x09	; 9
     a56:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a58:	86 ff       	sbrs	r24, 6
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a5c:	e0 ea       	ldi	r30, 0xA0	; 160
     a5e:	f9 e0       	ldi	r31, 0x09	; 9
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a64:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a66:	be 01       	movw	r22, r28
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	99 e0       	ldi	r25, 0x09	; 9
     a70:	0e 94 5f 14 	call	0x28be	; 0x28be <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a74:	00 e0       	ldi	r16, 0x00	; 0
     a76:	0a c0       	rjmp	.+20     	; 0xa8c <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	61 2f       	mov	r22, r17
     a7c:	80 2f       	mov	r24, r16
     a7e:	19 df       	rcall	.-462    	; 0x8b2 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a80:	1f 5f       	subi	r17, 0xFF	; 255
     a82:	10 38       	cpi	r17, 0x80	; 128
     a84:	c9 f7       	brne	.-14     	; 0xa78 <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a86:	0f 5f       	subi	r16, 0xFF	; 255
     a88:	04 30       	cpi	r16, 0x04	; 4
     a8a:	11 f0       	breq	.+4      	; 0xa90 <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	f4 cf       	rjmp	.-24     	; 0xa78 <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     aa6:	88 23       	and	r24, r24
     aa8:	54 f1       	brlt	.+84     	; 0xafe <gfx_mono_st7565r_draw_pixel+0x62>
     aaa:	60 32       	cpi	r22, 0x20	; 32
     aac:	40 f5       	brcc	.+80     	; 0xafe <gfx_mono_st7565r_draw_pixel+0x62>
     aae:	d4 2f       	mov	r29, r20
     ab0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     ab2:	f6 2e       	mov	r15, r22
     ab4:	f6 94       	lsr	r15
     ab6:	f6 94       	lsr	r15
     ab8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	f8 9e       	mul	r15, r24
     ac0:	60 19       	sub	r22, r0
     ac2:	71 09       	sbc	r23, r1
     ac4:	11 24       	eor	r1, r1
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	8c 01       	movw	r16, r24
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <gfx_mono_st7565r_draw_pixel+0x36>
     ace:	00 0f       	add	r16, r16
     ad0:	11 1f       	adc	r17, r17
     ad2:	6a 95       	dec	r22
     ad4:	e2 f7       	brpl	.-8      	; 0xace <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ad6:	6c 2f       	mov	r22, r28
     ad8:	8f 2d       	mov	r24, r15
     ada:	0e 94 88 14 	call	0x2910	; 0x2910 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     ade:	d1 30       	cpi	r29, 0x01	; 1
     ae0:	21 f0       	breq	.+8      	; 0xaea <gfx_mono_st7565r_draw_pixel+0x4e>
     ae2:	28 f0       	brcs	.+10     	; 0xaee <gfx_mono_st7565r_draw_pixel+0x52>
     ae4:	d2 30       	cpi	r29, 0x02	; 2
     ae6:	31 f0       	breq	.+12     	; 0xaf4 <gfx_mono_st7565r_draw_pixel+0x58>
     ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     aea:	80 2b       	or	r24, r16
		break;
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     aee:	00 95       	com	r16
     af0:	80 23       	and	r24, r16
		break;
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     af4:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     af6:	48 2f       	mov	r20, r24
     af8:	6c 2f       	mov	r22, r28
     afa:	8f 2d       	mov	r24, r15
     afc:	da de       	rcall	.-588    	; 0x8b2 <gfx_mono_st7565r_put_byte>
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	08 95       	ret

00000b0a <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     b0a:	0c 94 88 14 	jmp	0x2910	; 0x2910 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     b0e:	08 95       	ret

00000b10 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     b22:	d9 01       	movw	r26, r18
     b24:	c8 01       	movw	r24, r16
     b26:	b6 95       	lsr	r27
     b28:	a7 95       	ror	r26
     b2a:	97 95       	ror	r25
     b2c:	87 95       	ror	r24
     b2e:	48 17       	cp	r20, r24
     b30:	59 07       	cpc	r21, r25
     b32:	6a 07       	cpc	r22, r26
     b34:	7b 07       	cpc	r23, r27
     b36:	78 f4       	brcc	.+30     	; 0xb56 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     b38:	6a 01       	movw	r12, r20
     b3a:	7b 01       	movw	r14, r22
     b3c:	cc 0c       	add	r12, r12
     b3e:	dd 1c       	adc	r13, r13
     b40:	ee 1c       	adc	r14, r14
     b42:	ff 1c       	adc	r15, r15
     b44:	c9 01       	movw	r24, r18
     b46:	b8 01       	movw	r22, r16
     b48:	a7 01       	movw	r20, r14
     b4a:	96 01       	movw	r18, r12
     b4c:	0e 94 32 18 	call	0x3064	; 0x3064 <__udivmodsi4>
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	31 09       	sbc	r19, r1
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     b5a:	83 2f       	mov	r24, r19
     b5c:	8f 70       	andi	r24, 0x0F	; 15
     b5e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b60:	2e 83       	std	Y+6, r18	; 0x06
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	08 95       	ret

00000b74 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b74:	df 92       	push	r13
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	1f 92       	push	r1
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	7c 01       	movw	r14, r24
     b8a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	09 f4       	brne	.+2      	; 0xb92 <usart_init_spi+0x1e>
     b90:	cf c1       	rjmp	.+926    	; 0xf30 <usart_init_spi+0x3bc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b92:	80 3c       	cpi	r24, 0xC0	; 192
     b94:	91 05       	cpc	r25, r1
     b96:	29 f4       	brne	.+10     	; 0xba2 <usart_init_spi+0x2e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b98:	60 e1       	ldi	r22, 0x10	; 16
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     ba0:	c7 c1       	rjmp	.+910    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	e8 16       	cp	r14, r24
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	f8 06       	cpc	r15, r24
     baa:	29 f4       	brne	.+10     	; 0xbb6 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     bb4:	bd c1       	rjmp	.+890    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     bb6:	e1 14       	cp	r14, r1
     bb8:	e1 e0       	ldi	r30, 0x01	; 1
     bba:	fe 06       	cpc	r15, r30
     bbc:	29 f4       	brne	.+10     	; 0xbc8 <usart_init_spi+0x54>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     bc6:	b4 c1       	rjmp	.+872    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     bc8:	f0 e8       	ldi	r31, 0x80	; 128
     bca:	ef 16       	cp	r14, r31
     bcc:	f3 e0       	ldi	r31, 0x03	; 3
     bce:	ff 06       	cpc	r15, r31
     bd0:	29 f4       	brne	.+10     	; 0xbdc <usart_init_spi+0x68>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     bda:	aa c1       	rjmp	.+852    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     bdc:	30 e9       	ldi	r19, 0x90	; 144
     bde:	e3 16       	cp	r14, r19
     be0:	33 e0       	ldi	r19, 0x03	; 3
     be2:	f3 06       	cpc	r15, r19
     be4:	29 f4       	brne	.+10     	; 0xbf0 <usart_init_spi+0x7c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     bee:	a0 c1       	rjmp	.+832    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     bf0:	e1 14       	cp	r14, r1
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	f8 06       	cpc	r15, r24
     bf6:	29 f4       	brne	.+10     	; 0xc02 <usart_init_spi+0x8e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     bf8:	62 e0       	ldi	r22, 0x02	; 2
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c00:	97 c1       	rjmp	.+814    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     c02:	e0 e4       	ldi	r30, 0x40	; 64
     c04:	ee 16       	cp	r14, r30
     c06:	e2 e0       	ldi	r30, 0x02	; 2
     c08:	fe 06       	cpc	r15, r30
     c0a:	29 f4       	brne	.+10     	; 0xc16 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     c0c:	62 e0       	ldi	r22, 0x02	; 2
     c0e:	82 e0       	ldi	r24, 0x02	; 2
     c10:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c14:	8d c1       	rjmp	.+794    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     c16:	f0 e2       	ldi	r31, 0x20	; 32
     c18:	ef 16       	cp	r14, r31
     c1a:	f3 e0       	ldi	r31, 0x03	; 3
     c1c:	ff 06       	cpc	r15, r31
     c1e:	29 f4       	brne	.+10     	; 0xc2a <usart_init_spi+0xb6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c28:	83 c1       	rjmp	.+774    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     c2a:	e1 14       	cp	r14, r1
     c2c:	38 e0       	ldi	r19, 0x08	; 8
     c2e:	f3 06       	cpc	r15, r19
     c30:	29 f4       	brne	.+10     	; 0xc3c <usart_init_spi+0xc8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c3a:	7a c1       	rjmp	.+756    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     c3c:	e1 14       	cp	r14, r1
     c3e:	89 e0       	ldi	r24, 0x09	; 9
     c40:	f8 06       	cpc	r15, r24
     c42:	29 f4       	brne	.+10     	; 0xc4e <usart_init_spi+0xda>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c4c:	71 c1       	rjmp	.+738    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     c4e:	e1 14       	cp	r14, r1
     c50:	ea e0       	ldi	r30, 0x0A	; 10
     c52:	fe 06       	cpc	r15, r30
     c54:	29 f4       	brne	.+10     	; 0xc60 <usart_init_spi+0xec>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	85 e0       	ldi	r24, 0x05	; 5
     c5a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c5e:	68 c1       	rjmp	.+720    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     c60:	e1 14       	cp	r14, r1
     c62:	fb e0       	ldi	r31, 0x0B	; 11
     c64:	ff 06       	cpc	r15, r31
     c66:	29 f4       	brne	.+10     	; 0xc72 <usart_init_spi+0xfe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c70:	5f c1       	rjmp	.+702    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     c72:	30 e4       	ldi	r19, 0x40	; 64
     c74:	e3 16       	cp	r14, r19
     c76:	38 e0       	ldi	r19, 0x08	; 8
     c78:	f3 06       	cpc	r15, r19
     c7a:	29 f4       	brne	.+10     	; 0xc86 <usart_init_spi+0x112>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c84:	55 c1       	rjmp	.+682    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	e8 16       	cp	r14, r24
     c8a:	89 e0       	ldi	r24, 0x09	; 9
     c8c:	f8 06       	cpc	r15, r24
     c8e:	29 f4       	brne	.+10     	; 0xc9a <usart_init_spi+0x126>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     c98:	4b c1       	rjmp	.+662    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c9a:	e0 e4       	ldi	r30, 0x40	; 64
     c9c:	ee 16       	cp	r14, r30
     c9e:	ea e0       	ldi	r30, 0x0A	; 10
     ca0:	fe 06       	cpc	r15, r30
     ca2:	29 f4       	brne	.+10     	; 0xcae <usart_init_spi+0x13a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     ca4:	62 e0       	ldi	r22, 0x02	; 2
     ca6:	85 e0       	ldi	r24, 0x05	; 5
     ca8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     cac:	41 c1       	rjmp	.+642    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     cae:	f0 e9       	ldi	r31, 0x90	; 144
     cb0:	ef 16       	cp	r14, r31
     cb2:	f8 e0       	ldi	r31, 0x08	; 8
     cb4:	ff 06       	cpc	r15, r31
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <usart_init_spi+0x14e>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     cb8:	64 e0       	ldi	r22, 0x04	; 4
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     cc0:	37 c1       	rjmp	.+622    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     cc2:	30 e9       	ldi	r19, 0x90	; 144
     cc4:	e3 16       	cp	r14, r19
     cc6:	39 e0       	ldi	r19, 0x09	; 9
     cc8:	f3 06       	cpc	r15, r19
     cca:	29 f4       	brne	.+10     	; 0xcd6 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     ccc:	64 e0       	ldi	r22, 0x04	; 4
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     cd4:	2d c1       	rjmp	.+602    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     cd6:	80 e9       	ldi	r24, 0x90	; 144
     cd8:	e8 16       	cp	r14, r24
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	f8 06       	cpc	r15, r24
     cde:	29 f4       	brne	.+10     	; 0xcea <usart_init_spi+0x176>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     ce0:	64 e0       	ldi	r22, 0x04	; 4
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     ce8:	23 c1       	rjmp	.+582    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     cea:	e0 e9       	ldi	r30, 0x90	; 144
     cec:	ee 16       	cp	r14, r30
     cee:	eb e0       	ldi	r30, 0x0B	; 11
     cf0:	fe 06       	cpc	r15, r30
     cf2:	29 f4       	brne	.+10     	; 0xcfe <usart_init_spi+0x18a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     cf4:	64 e0       	ldi	r22, 0x04	; 4
     cf6:	86 e0       	ldi	r24, 0x06	; 6
     cf8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     cfc:	19 c1       	rjmp	.+562    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     cfe:	f0 ec       	ldi	r31, 0xC0	; 192
     d00:	ef 16       	cp	r14, r31
     d02:	f8 e0       	ldi	r31, 0x08	; 8
     d04:	ff 06       	cpc	r15, r31
     d06:	29 f4       	brne	.+10     	; 0xd12 <usart_init_spi+0x19e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     d08:	68 e0       	ldi	r22, 0x08	; 8
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d10:	0f c1       	rjmp	.+542    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     d12:	30 ec       	ldi	r19, 0xC0	; 192
     d14:	e3 16       	cp	r14, r19
     d16:	39 e0       	ldi	r19, 0x09	; 9
     d18:	f3 06       	cpc	r15, r19
     d1a:	29 f4       	brne	.+10     	; 0xd26 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     d1c:	68 e0       	ldi	r22, 0x08	; 8
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d24:	05 c1       	rjmp	.+522    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     d26:	80 ea       	ldi	r24, 0xA0	; 160
     d28:	e8 16       	cp	r14, r24
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	f8 06       	cpc	r15, r24
     d2e:	69 f4       	brne	.+26     	; 0xd4a <usart_init_spi+0x1d6>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     d30:	60 e1       	ldi	r22, 0x10	; 16
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     d38:	e0 ea       	ldi	r30, 0xA0	; 160
     d3a:	f8 e0       	ldi	r31, 0x08	; 8
     d3c:	84 81       	ldd	r24, Z+4	; 0x04
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     d42:	f8 01       	movw	r30, r16
     d44:	24 81       	ldd	r18, Z+4	; 0x04
     d46:	22 50       	subi	r18, 0x02	; 2
     d48:	53 c0       	rjmp	.+166    	; 0xdf0 <usart_init_spi+0x27c>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     d4a:	f0 ea       	ldi	r31, 0xA0	; 160
     d4c:	ef 16       	cp	r14, r31
     d4e:	f9 e0       	ldi	r31, 0x09	; 9
     d50:	ff 06       	cpc	r15, r31
     d52:	29 f4       	brne	.+10     	; 0xd5e <usart_init_spi+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     d54:	60 e1       	ldi	r22, 0x10	; 16
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d5c:	e9 c0       	rjmp	.+466    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     d5e:	30 ea       	ldi	r19, 0xA0	; 160
     d60:	e3 16       	cp	r14, r19
     d62:	3a e0       	ldi	r19, 0x0A	; 10
     d64:	f3 06       	cpc	r15, r19
     d66:	29 f4       	brne	.+10     	; 0xd72 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d68:	60 e1       	ldi	r22, 0x10	; 16
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d70:	df c0       	rjmp	.+446    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     d72:	80 ea       	ldi	r24, 0xA0	; 160
     d74:	e8 16       	cp	r14, r24
     d76:	8b e0       	ldi	r24, 0x0B	; 11
     d78:	f8 06       	cpc	r15, r24
     d7a:	29 f4       	brne	.+10     	; 0xd86 <usart_init_spi+0x212>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     d7c:	60 e1       	ldi	r22, 0x10	; 16
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d84:	d5 c0       	rjmp	.+426    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     d86:	e0 eb       	ldi	r30, 0xB0	; 176
     d88:	ee 16       	cp	r14, r30
     d8a:	e8 e0       	ldi	r30, 0x08	; 8
     d8c:	fe 06       	cpc	r15, r30
     d8e:	29 f4       	brne	.+10     	; 0xd9a <usart_init_spi+0x226>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     d90:	60 e2       	ldi	r22, 0x20	; 32
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     d98:	cb c0       	rjmp	.+406    	; 0xf30 <usart_init_spi+0x3bc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d9a:	f0 eb       	ldi	r31, 0xB0	; 176
     d9c:	ef 16       	cp	r14, r31
     d9e:	f9 e0       	ldi	r31, 0x09	; 9
     da0:	ff 06       	cpc	r15, r31
     da2:	29 f4       	brne	.+10     	; 0xdae <usart_init_spi+0x23a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     da4:	60 e2       	ldi	r22, 0x20	; 32
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     dac:	c1 c0       	rjmp	.+386    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     dae:	30 e8       	ldi	r19, 0x80	; 128
     db0:	e3 16       	cp	r14, r19
     db2:	34 e0       	ldi	r19, 0x04	; 4
     db4:	f3 06       	cpc	r15, r19
     db6:	29 f4       	brne	.+10     	; 0xdc2 <usart_init_spi+0x24e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     db8:	60 e4       	ldi	r22, 0x40	; 64
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     dc0:	b7 c0       	rjmp	.+366    	; 0xf30 <usart_init_spi+0x3bc>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     dc2:	80 ea       	ldi	r24, 0xA0	; 160
     dc4:	e8 16       	cp	r14, r24
     dc6:	84 e0       	ldi	r24, 0x04	; 4
     dc8:	f8 06       	cpc	r15, r24
     dca:	29 f4       	brne	.+10     	; 0xdd6 <usart_init_spi+0x262>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     dcc:	60 e4       	ldi	r22, 0x40	; 64
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	0e 94 18 15 	call	0x2a30	; 0x2a30 <sysclk_enable_module>
     dd4:	ad c0       	rjmp	.+346    	; 0xf30 <usart_init_spi+0x3bc>
     dd6:	f7 01       	movw	r30, r14
     dd8:	84 81       	ldd	r24, Z+4	; 0x04
     dda:	8f 7e       	andi	r24, 0xEF	; 239
     ddc:	84 83       	std	Z+4, r24	; 0x04
     dde:	fb 01       	movw	r30, r22
     de0:	24 81       	ldd	r18, Z+4	; 0x04
     de2:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     de4:	c7 01       	movw	r24, r14
     de6:	f0 ea       	ldi	r31, 0xA0	; 160
     de8:	ef 16       	cp	r14, r31
     dea:	f8 e0       	ldi	r31, 0x08	; 8
     dec:	ff 06       	cpc	r15, r31
     dee:	49 f4       	brne	.+18     	; 0xe02 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     df0:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     df4:	84 fd       	sbrc	r24, 4
     df6:	a5 c0       	rjmp	.+330    	; 0xf42 <usart_init_spi+0x3ce>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     df8:	0f 2e       	mov	r0, r31
     dfa:	f1 e1       	ldi	r31, 0x11	; 17
     dfc:	df 2e       	mov	r13, r31
     dfe:	f0 2d       	mov	r31, r0
     e00:	a4 c0       	rjmp	.+328    	; 0xf4a <usart_init_spi+0x3d6>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     e02:	80 3b       	cpi	r24, 0xB0	; 176
     e04:	38 e0       	ldi	r19, 0x08	; 8
     e06:	93 07       	cpc	r25, r19
     e08:	91 f0       	breq	.+36     	; 0xe2e <usart_init_spi+0x2ba>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     e0a:	80 3a       	cpi	r24, 0xA0	; 160
     e0c:	e9 e0       	ldi	r30, 0x09	; 9
     e0e:	9e 07       	cpc	r25, r30
     e10:	49 f4       	brne	.+18     	; 0xe24 <usart_init_spi+0x2b0>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     e12:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     e16:	34 fd       	sbrc	r19, 4
     e18:	9b c0       	rjmp	.+310    	; 0xf50 <usart_init_spi+0x3dc>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     e1a:	0f 2e       	mov	r0, r31
     e1c:	f9 e1       	ldi	r31, 0x19	; 25
     e1e:	df 2e       	mov	r13, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	16 c0       	rjmp	.+44     	; 0xe50 <usart_init_spi+0x2dc>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     e24:	80 3b       	cpi	r24, 0xB0	; 176
     e26:	f9 e0       	ldi	r31, 0x09	; 9
     e28:	9f 07       	cpc	r25, r31
     e2a:	f1 f0       	breq	.+60     	; 0xe68 <usart_init_spi+0x2f4>
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <usart_init_spi+0x2c2>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     e2e:	0f 2e       	mov	r0, r31
     e30:	f5 e1       	ldi	r31, 0x15	; 21
     e32:	df 2e       	mov	r13, r31
     e34:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     e36:	80 3a       	cpi	r24, 0xA0	; 160
     e38:	3a e0       	ldi	r19, 0x0A	; 10
     e3a:	93 07       	cpc	r25, r19
     e3c:	49 f4       	brne	.+18     	; 0xe50 <usart_init_spi+0x2dc>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     e3e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     e42:	84 fd       	sbrc	r24, 4
     e44:	8a c0       	rjmp	.+276    	; 0xf5a <usart_init_spi+0x3e6>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     e46:	0f 2e       	mov	r0, r31
     e48:	f1 e2       	ldi	r31, 0x21	; 33
     e4a:	df 2e       	mov	r13, r31
     e4c:	f0 2d       	mov	r31, r0
     e4e:	15 c0       	rjmp	.+42     	; 0xe7a <usart_init_spi+0x306>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     e50:	80 3a       	cpi	r24, 0xA0	; 160
     e52:	9b 40       	sbci	r25, 0x0B	; 11
     e54:	91 f4       	brne	.+36     	; 0xe7a <usart_init_spi+0x306>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     e56:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     e5a:	84 fd       	sbrc	r24, 4
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <usart_init_spi+0x2fe>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     e5e:	0f 2e       	mov	r0, r31
     e60:	f9 e2       	ldi	r31, 0x29	; 41
     e62:	df 2e       	mov	r13, r31
     e64:	f0 2d       	mov	r31, r0
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <usart_init_spi+0x306>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     e68:	0f 2e       	mov	r0, r31
     e6a:	fd e1       	ldi	r31, 0x1D	; 29
     e6c:	df 2e       	mov	r13, r31
     e6e:	f0 2d       	mov	r31, r0
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <usart_init_spi+0x306>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     e72:	0f 2e       	mov	r0, r31
     e74:	fd e2       	ldi	r31, 0x2D	; 45
     e76:	df 2e       	mov	r13, r31
     e78:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     e7a:	ed 2d       	mov	r30, r13
     e7c:	e6 95       	lsr	r30
     e7e:	e6 95       	lsr	r30
     e80:	e6 95       	lsr	r30
     e82:	30 e2       	ldi	r19, 0x20	; 32
     e84:	e3 9f       	mul	r30, r19
     e86:	f0 01       	movw	r30, r0
     e88:	11 24       	eor	r1, r1
     e8a:	fa 5f       	subi	r31, 0xFA	; 250
     e8c:	3d 2d       	mov	r19, r13
     e8e:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	03 2e       	mov	r0, r19
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <usart_init_spi+0x328>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <usart_init_spi+0x324>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     ea0:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	10 f0       	brcs	.+4      	; 0xeaa <usart_init_spi+0x336>
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <usart_init_spi+0x338>
     eaa:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     eac:	df 01       	movw	r26, r30
     eae:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     eb0:	a3 0f       	add	r26, r19
     eb2:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     eb4:	9f b7       	in	r25, 0x3f	; 63
     eb6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     eb8:	f8 94       	cli
	return flags;
     eba:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     ebc:	2c 91       	ld	r18, X
     ebe:	27 70       	andi	r18, 0x07	; 7
     ec0:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     ec2:	9c 91       	ld	r25, X
     ec4:	94 2b       	or	r25, r20
     ec6:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ec8:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     eca:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     ecc:	f7 01       	movw	r30, r14
     ece:	85 81       	ldd	r24, Z+5	; 0x05
     ed0:	80 6c       	ori	r24, 0xC0	; 192
     ed2:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     ed4:	f8 01       	movw	r30, r16
     ed6:	84 81       	ldd	r24, Z+4	; 0x04
     ed8:	8d 7f       	andi	r24, 0xFD	; 253
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	29 f4       	brne	.+10     	; 0xee8 <usart_init_spi+0x374>
		usart->CTRLC |= USART_UCPHA_bm;
     ede:	f7 01       	movw	r30, r14
     ee0:	85 81       	ldd	r24, Z+5	; 0x05
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	85 83       	std	Z+5, r24	; 0x05
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <usart_init_spi+0x37c>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     ee8:	f7 01       	movw	r30, r14
     eea:	85 81       	ldd	r24, Z+5	; 0x05
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	85 83       	std	Z+5, r24	; 0x05
	}
	if (opt->data_order) {
     ef0:	f8 01       	movw	r30, r16
     ef2:	85 81       	ldd	r24, Z+5	; 0x05
     ef4:	88 23       	and	r24, r24
     ef6:	29 f0       	breq	.+10     	; 0xf02 <usart_init_spi+0x38e>
		(usart)->CTRLC |= USART_DORD_bm;
     ef8:	f7 01       	movw	r30, r14
     efa:	85 81       	ldd	r24, Z+5	; 0x05
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	85 83       	std	Z+5, r24	; 0x05
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <usart_init_spi+0x396>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     f02:	f7 01       	movw	r30, r14
     f04:	85 81       	ldd	r24, Z+5	; 0x05
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	85 83       	std	Z+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     f0a:	f8 01       	movw	r30, r16
     f0c:	40 81       	ld	r20, Z
     f0e:	51 81       	ldd	r21, Z+1	; 0x01
     f10:	62 81       	ldd	r22, Z+2	; 0x02
     f12:	73 81       	ldd	r23, Z+3	; 0x03
     f14:	00 e8       	ldi	r16, 0x80	; 128
     f16:	14 e8       	ldi	r17, 0x84	; 132
     f18:	2e e1       	ldi	r18, 0x1E	; 30
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	c7 01       	movw	r24, r14
     f1e:	f8 dd       	rcall	.-1040   	; 0xb10 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     f20:	f7 01       	movw	r30, r14
     f22:	84 81       	ldd	r24, Z+4	; 0x04
     f24:	88 60       	ori	r24, 0x08	; 8
     f26:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     f28:	84 81       	ldd	r24, Z+4	; 0x04
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     f2e:	1a c0       	rjmp	.+52     	; 0xf64 <usart_init_spi+0x3f0>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     f30:	f7 01       	movw	r30, r14
     f32:	84 81       	ldd	r24, Z+4	; 0x04
     f34:	8f 7e       	andi	r24, 0xEF	; 239
     f36:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     f38:	f8 01       	movw	r30, r16
     f3a:	24 81       	ldd	r18, Z+4	; 0x04
     f3c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     f3e:	c7 01       	movw	r24, r14
     f40:	60 cf       	rjmp	.-320    	; 0xe02 <usart_init_spi+0x28e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     f42:	0f 2e       	mov	r0, r31
     f44:	f5 e1       	ldi	r31, 0x15	; 21
     f46:	df 2e       	mov	r13, r31
     f48:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     f4a:	80 ea       	ldi	r24, 0xA0	; 160
     f4c:	98 e0       	ldi	r25, 0x08	; 8
     f4e:	6a cf       	rjmp	.-300    	; 0xe24 <usart_init_spi+0x2b0>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     f50:	0f 2e       	mov	r0, r31
     f52:	fd e1       	ldi	r31, 0x1D	; 29
     f54:	df 2e       	mov	r13, r31
     f56:	f0 2d       	mov	r31, r0
     f58:	7b cf       	rjmp	.-266    	; 0xe50 <usart_init_spi+0x2dc>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     f5a:	0f 2e       	mov	r0, r31
     f5c:	f5 e2       	ldi	r31, 0x25	; 37
     f5e:	df 2e       	mov	r13, r31
     f60:	f0 2d       	mov	r31, r0
     f62:	8b cf       	rjmp	.-234    	; 0xe7a <usart_init_spi+0x306>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     f64:	0f 90       	pop	r0
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	08 95       	ret

00000f76 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     f76:	fc 01       	movw	r30, r24
     f78:	03 96       	adiw	r24, 0x03	; 3
     f7a:	81 83       	std	Z+1, r24	; 0x01
     f7c:	92 83       	std	Z+2, r25	; 0x02
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	23 83       	std	Z+3, r18	; 0x03
     f84:	34 83       	std	Z+4, r19	; 0x04
     f86:	85 83       	std	Z+5, r24	; 0x05
     f88:	96 83       	std	Z+6, r25	; 0x06
     f8a:	87 83       	std	Z+7, r24	; 0x07
     f8c:	90 87       	std	Z+8, r25	; 0x08
     f8e:	10 82       	st	Z, r1
     f90:	08 95       	ret

00000f92 <vListInitialiseItem>:
     f92:	fc 01       	movw	r30, r24
     f94:	10 86       	std	Z+8, r1	; 0x08
     f96:	11 86       	std	Z+9, r1	; 0x09
     f98:	08 95       	ret

00000f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     fa0:	48 81       	ld	r20, Y
     fa2:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     fa4:	4f 3f       	cpi	r20, 0xFF	; 255
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	52 07       	cpc	r21, r18
     faa:	21 f4       	brne	.+8      	; 0xfb4 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     fac:	fc 01       	movw	r30, r24
     fae:	a7 81       	ldd	r26, Z+7	; 0x07
     fb0:	b0 85       	ldd	r27, Z+8	; 0x08
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     fb4:	dc 01       	movw	r26, r24
     fb6:	13 96       	adiw	r26, 0x03	; 3
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <vListInsert+0x22>
     fba:	df 01       	movw	r26, r30
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	ed 91       	ld	r30, X+
     fc0:	fc 91       	ld	r31, X
     fc2:	13 97       	sbiw	r26, 0x03	; 3
     fc4:	20 81       	ld	r18, Z
     fc6:	31 81       	ldd	r19, Z+1	; 0x01
     fc8:	42 17       	cp	r20, r18
     fca:	53 07       	cpc	r21, r19
     fcc:	b0 f7       	brcc	.-20     	; 0xfba <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	ed 91       	ld	r30, X+
     fd2:	fc 91       	ld	r31, X
     fd4:	13 97       	sbiw	r26, 0x03	; 3
     fd6:	ea 83       	std	Y+2, r30	; 0x02
     fd8:	fb 83       	std	Y+3, r31	; 0x03
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     fda:	c4 83       	std	Z+4, r28	; 0x04
     fdc:	d5 83       	std	Z+5, r29	; 0x05
    pxNewListItem->pxPrevious = pxIterator;
     fde:	ac 83       	std	Y+4, r26	; 0x04
     fe0:	bd 83       	std	Y+5, r27	; 0x05
    pxIterator->pxNext = pxNewListItem;
     fe2:	12 96       	adiw	r26, 0x02	; 2
     fe4:	cd 93       	st	X+, r28
     fe6:	dc 93       	st	X, r29
     fe8:	13 97       	sbiw	r26, 0x03	; 3

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     fea:	88 87       	std	Y+8, r24	; 0x08
     fec:	99 87       	std	Y+9, r25	; 0x09

    ( pxList->uxNumberOfItems )++;
     fee:	fc 01       	movw	r30, r24
     ff0:	20 81       	ld	r18, Z
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	20 83       	st	Z, r18
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1002:	a0 85       	ldd	r26, Z+8	; 0x08
    1004:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1006:	c2 81       	ldd	r28, Z+2	; 0x02
    1008:	d3 81       	ldd	r29, Z+3	; 0x03
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	95 81       	ldd	r25, Z+5	; 0x05
    100e:	8c 83       	std	Y+4, r24	; 0x04
    1010:	9d 83       	std	Y+5, r25	; 0x05
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1012:	c4 81       	ldd	r28, Z+4	; 0x04
    1014:	d5 81       	ldd	r29, Z+5	; 0x05
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	8a 83       	std	Y+2, r24	; 0x02
    101c:	9b 83       	std	Y+3, r25	; 0x03

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	12 97       	sbiw	r26, 0x02	; 2
    1026:	e8 17       	cp	r30, r24
    1028:	f9 07       	cpc	r31, r25
    102a:	31 f4       	brne	.+12     	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    102c:	84 81       	ldd	r24, Z+4	; 0x04
    102e:	95 81       	ldd	r25, Z+5	; 0x05
    1030:	11 96       	adiw	r26, 0x01	; 1
    1032:	8d 93       	st	X+, r24
    1034:	9c 93       	st	X, r25
    1036:	12 97       	sbiw	r26, 0x02	; 2
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1038:	10 86       	std	Z+8, r1	; 0x08
    103a:	11 86       	std	Z+9, r1	; 0x09
    ( pxList->uxNumberOfItems )--;
    103c:	8c 91       	ld	r24, X
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    1042:	8c 91       	ld	r24, X
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    1050:	71 e1       	ldi	r23, 0x11	; 17
    1052:	fc 01       	movw	r30, r24
    1054:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    1056:	31 97       	sbiw	r30, 0x01	; 1
    1058:	62 e2       	ldi	r22, 0x22	; 34
    105a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	23 e3       	ldi	r18, 0x33	; 51
    1060:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    1062:	01 2e       	mov	r0, r17
    1064:	00 0c       	add	r0, r0
    1066:	22 0b       	sbc	r18, r18
    1068:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    106a:	31 97       	sbiw	r30, 0x01	; 1
    106c:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    106e:	31 97       	sbiw	r30, 0x01	; 1
    1070:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    1076:	31 97       	sbiw	r30, 0x01	; 1
    1078:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    107a:	31 97       	sbiw	r30, 0x01	; 1
    107c:	20 e8       	ldi	r18, 0x80	; 128
    107e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    1080:	31 97       	sbiw	r30, 0x01	; 1
    1082:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    1084:	31 97       	sbiw	r30, 0x01	; 1
    1086:	22 e0       	ldi	r18, 0x02	; 2
    1088:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    108a:	31 97       	sbiw	r30, 0x01	; 1
    108c:	23 e0       	ldi	r18, 0x03	; 3
    108e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	24 e0       	ldi	r18, 0x04	; 4
    1094:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    1096:	31 97       	sbiw	r30, 0x01	; 1
    1098:	25 e0       	ldi	r18, 0x05	; 5
    109a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	26 e0       	ldi	r18, 0x06	; 6
    10a0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    10a2:	31 97       	sbiw	r30, 0x01	; 1
    10a4:	27 e0       	ldi	r18, 0x07	; 7
    10a6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    10a8:	31 97       	sbiw	r30, 0x01	; 1
    10aa:	28 e0       	ldi	r18, 0x08	; 8
    10ac:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    10b0:	29 e0       	ldi	r18, 0x09	; 9
    10b2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    10b4:	31 97       	sbiw	r30, 0x01	; 1
    10b6:	20 e1       	ldi	r18, 0x10	; 16
    10b8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    10ba:	31 97       	sbiw	r30, 0x01	; 1
    10bc:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    10be:	31 97       	sbiw	r30, 0x01	; 1
    10c0:	22 e1       	ldi	r18, 0x12	; 18
    10c2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    10c4:	31 97       	sbiw	r30, 0x01	; 1
    10c6:	23 e1       	ldi	r18, 0x13	; 19
    10c8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	24 e1       	ldi	r18, 0x14	; 20
    10ce:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	25 e1       	ldi	r18, 0x15	; 21
    10d4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    10d6:	31 97       	sbiw	r30, 0x01	; 1
    10d8:	26 e1       	ldi	r18, 0x16	; 22
    10da:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    10dc:	31 97       	sbiw	r30, 0x01	; 1
    10de:	27 e1       	ldi	r18, 0x17	; 23
    10e0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	28 e1       	ldi	r18, 0x18	; 24
    10e6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    10e8:	31 97       	sbiw	r30, 0x01	; 1
    10ea:	29 e1       	ldi	r18, 0x19	; 25
    10ec:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    10ee:	31 97       	sbiw	r30, 0x01	; 1
    10f0:	20 e2       	ldi	r18, 0x20	; 32
    10f2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	21 e2       	ldi	r18, 0x21	; 33
    10f8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    10fa:	31 97       	sbiw	r30, 0x01	; 1
    10fc:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	23 e2       	ldi	r18, 0x23	; 35
    1102:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    110c:	31 97       	sbiw	r30, 0x01	; 1
    110e:	26 e2       	ldi	r18, 0x26	; 38
    1110:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	27 e2       	ldi	r18, 0x27	; 39
    1116:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	28 e2       	ldi	r18, 0x28	; 40
    111c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    111e:	31 97       	sbiw	r30, 0x01	; 1
    1120:	29 e2       	ldi	r18, 0x29	; 41
    1122:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	20 e3       	ldi	r18, 0x30	; 48
    1128:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	21 e3       	ldi	r18, 0x31	; 49
    112e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    1130:	87 97       	sbiw	r24, 0x27	; 39
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    1138:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    113a:	e0 e7       	ldi	r30, 0x70	; 112
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	83 81       	ldd	r24, Z+3	; 0x03
    1140:	8a 7f       	andi	r24, 0xFA	; 250
    1142:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    1144:	e0 e0       	ldi	r30, 0x00	; 0
    1146:	f8 e0       	ldi	r31, 0x08	; 8
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	9a ef       	ldi	r25, 0xFA	; 250
    114c:	86 a3       	std	Z+38, r24	; 0x26
    114e:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    1154:	a0 ea       	ldi	r26, 0xA0	; 160
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	8c 91       	ld	r24, X
    115c:	12 97       	sbiw	r26, 0x02	; 2
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    1164:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    1166:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    1168:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    116c:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1170:	0d 90       	ld	r0, X+
    1172:	0d be       	out	0x3d, r0	; 61
    1174:	0d 90       	ld	r0, X+
    1176:	0e be       	out	0x3e, r0	; 62
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	df 90       	pop	r13
    119e:	cf 90       	pop	r12
    11a0:	bf 90       	pop	r11
    11a2:	af 90       	pop	r10
    11a4:	9f 90       	pop	r9
    11a6:	8f 90       	pop	r8
    11a8:	7f 90       	pop	r7
    11aa:	6f 90       	pop	r6
    11ac:	5f 90       	pop	r5
    11ae:	4f 90       	pop	r4
    11b0:	3f 90       	pop	r3
    11b2:	2f 90       	pop	r2
    11b4:	1f 90       	pop	r1
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    11bc:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret

000011c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    11c2:	0f 92       	push	r0
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	0f 92       	push	r0
    11ca:	1f 92       	push	r1
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 92       	push	r2
    11d0:	3f 92       	push	r3
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	8f 92       	push	r8
    11dc:	9f 92       	push	r9
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	2f 93       	push	r18
    11f0:	3f 93       	push	r19
    11f2:	4f 93       	push	r20
    11f4:	5f 93       	push	r21
    11f6:	6f 93       	push	r22
    11f8:	7f 93       	push	r23
    11fa:	8f 93       	push	r24
    11fc:	9f 93       	push	r25
    11fe:	af 93       	push	r26
    1200:	bf 93       	push	r27
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    120e:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1212:	0d b6       	in	r0, 0x3d	; 61
    1214:	0d 92       	st	X+, r0
    1216:	0e b6       	in	r0, 0x3e	; 62
    1218:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    121a:	62 d7       	rcall	.+3780   	; 0x20e0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    121c:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1220:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1224:	0d 90       	ld	r0, X+
    1226:	0d be       	out	0x3d, r0	; 61
    1228:	0d 90       	ld	r0, X+
    122a:	0e be       	out	0x3e, r0	; 62
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	9f 90       	pop	r9
    125a:	8f 90       	pop	r8
    125c:	7f 90       	pop	r7
    125e:	6f 90       	pop	r6
    1260:	5f 90       	pop	r5
    1262:	4f 90       	pop	r4
    1264:	3f 90       	pop	r3
    1266:	2f 90       	pop	r2
    1268:	1f 90       	pop	r1
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0

    asm volatile ( "ret" );
    1270:	08 95       	ret

00001272 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	1f 92       	push	r1
    127c:	11 24       	eor	r1, r1
    127e:	2f 92       	push	r2
    1280:	3f 92       	push	r3
    1282:	4f 92       	push	r4
    1284:	5f 92       	push	r5
    1286:	6f 92       	push	r6
    1288:	7f 92       	push	r7
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
    12ba:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    12be:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    12c2:	0d b6       	in	r0, 0x3d	; 61
    12c4:	0d 92       	st	X+, r0
    12c6:	0e b6       	in	r0, 0x3e	; 62
    12c8:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    12ca:	07 d5       	rcall	.+2574   	; 0x1cda <xTaskIncrementTick>
    12cc:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    12ce:	08 d7       	rcall	.+3600   	; 0x20e0 <vTaskSwitchContext>
    12d0:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
        }
        portRESTORE_CONTEXT();
    12d4:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    12d8:	0d 90       	ld	r0, X+
    12da:	0d be       	out	0x3d, r0	; 61
    12dc:	0d 90       	ld	r0, X+
    12de:	0e be       	out	0x3e, r0	; 62
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	3f 90       	pop	r3
    131a:	2f 90       	pop	r2
    131c:	1f 90       	pop	r1
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	18 95       	reti

00001326 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	ec 01       	movw	r28, r24
    void * pvReturn;

    vTaskSuspendAll();
    132c:	c6 d4       	rcall	.+2444   	; 0x1cba <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    132e:	ce 01       	movw	r24, r28
    1330:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1334:	ec 01       	movw	r28, r24
    1336:	e9 d5       	rcall	.+3026   	; 0x1f0a <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
    1338:	ce 01       	movw	r24, r28
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    if( pv )
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <vPortFree+0x14>
    1348:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    134a:	b7 d4       	rcall	.+2414   	; 0x1cba <vTaskSuspendAll>
        {
            free( pv );
    134c:	ce 01       	movw	r24, r28
    134e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    1352:	db d5       	rcall	.+2998   	; 0x1f0a <xTaskResumeAll>
    }
}
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	0f 92       	push	r0
    1360:	fc 01       	movw	r30, r24
    1362:	92 8d       	ldd	r25, Z+26	; 0x1a
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	91 11       	cpse	r25, r1
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	08 95       	ret

00001370 <prvCopyDataToQueue>:
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    1378:	ec 01       	movw	r28, r24
    137a:	04 2f       	mov	r16, r20
    137c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    137e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1380:	44 23       	and	r20, r20
    1382:	b9 f1       	breq	.+110    	; 0x13f2 <prvCopyDataToQueue+0x82>
    1384:	01 11       	cpse	r16, r1
    1386:	16 c0       	rjmp	.+44     	; 0x13b4 <prvCopyDataToQueue+0x44>
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	0e 94 7d 19 	call	0x32fa	; 0x32fa <memcpy>
    1392:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	82 0f       	add	r24, r18
    139a:	91 1d       	adc	r25, r1
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	82 17       	cp	r24, r18
    13a6:	93 07       	cpc	r25, r19
    13a8:	20 f1       	brcs	.+72     	; 0x13f2 <prvCopyDataToQueue+0x82>
    13aa:	88 81       	ld	r24, Y
    13ac:	99 81       	ldd	r25, Y+1	; 0x01
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	9b 83       	std	Y+3, r25	; 0x03
    13b2:	1f c0       	rjmp	.+62     	; 0x13f2 <prvCopyDataToQueue+0x82>
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ba:	0e 94 7d 19 	call	0x32fa	; 0x32fa <memcpy>
    13be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	91 95       	neg	r25
    13c4:	81 95       	neg	r24
    13c6:	91 09       	sbc	r25, r1
    13c8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ca:	3f 81       	ldd	r19, Y+7	; 0x07
    13cc:	28 0f       	add	r18, r24
    13ce:	39 1f       	adc	r19, r25
    13d0:	2e 83       	std	Y+6, r18	; 0x06
    13d2:	3f 83       	std	Y+7, r19	; 0x07
    13d4:	48 81       	ld	r20, Y
    13d6:	59 81       	ldd	r21, Y+1	; 0x01
    13d8:	24 17       	cp	r18, r20
    13da:	35 07       	cpc	r19, r21
    13dc:	30 f4       	brcc	.+12     	; 0x13ea <prvCopyDataToQueue+0x7a>
    13de:	2c 81       	ldd	r18, Y+4	; 0x04
    13e0:	3d 81       	ldd	r19, Y+5	; 0x05
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	8e 83       	std	Y+6, r24	; 0x06
    13e8:	9f 83       	std	Y+7, r25	; 0x07
    13ea:	02 30       	cpi	r16, 0x02	; 2
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <prvCopyDataToQueue+0x82>
    13ee:	11 11       	cpse	r17, r1
    13f0:	11 50       	subi	r17, 0x01	; 1
    13f2:	1f 5f       	subi	r17, 0xFF	; 255
    13f4:	1a 8f       	std	Y+26, r17	; 0x1a
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <prvCopyDataFromQueue>:
    1402:	fc 01       	movw	r30, r24
    1404:	44 8d       	ldd	r20, Z+28	; 0x1c
    1406:	44 23       	and	r20, r20
    1408:	a9 f0       	breq	.+42     	; 0x1434 <prvCopyDataFromQueue+0x32>
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	26 81       	ldd	r18, Z+6	; 0x06
    140e:	37 81       	ldd	r19, Z+7	; 0x07
    1410:	24 0f       	add	r18, r20
    1412:	35 1f       	adc	r19, r21
    1414:	26 83       	std	Z+6, r18	; 0x06
    1416:	37 83       	std	Z+7, r19	; 0x07
    1418:	84 81       	ldd	r24, Z+4	; 0x04
    141a:	95 81       	ldd	r25, Z+5	; 0x05
    141c:	28 17       	cp	r18, r24
    141e:	39 07       	cpc	r19, r25
    1420:	20 f0       	brcs	.+8      	; 0x142a <prvCopyDataFromQueue+0x28>
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	86 83       	std	Z+6, r24	; 0x06
    1428:	97 83       	std	Z+7, r25	; 0x07
    142a:	cb 01       	movw	r24, r22
    142c:	66 81       	ldd	r22, Z+6	; 0x06
    142e:	77 81       	ldd	r23, Z+7	; 0x07
    1430:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <memcpy>
    1434:	08 95       	ret

00001436 <prvUnlockQueue>:
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	8c 01       	movw	r16, r24
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	0f 92       	push	r0
    1448:	fc 01       	movw	r30, r24
    144a:	c6 8d       	ldd	r28, Z+30	; 0x1e
    144c:	1c 16       	cp	r1, r28
    144e:	9c f4       	brge	.+38     	; 0x1476 <prvUnlockQueue+0x40>
    1450:	81 89       	ldd	r24, Z+17	; 0x11
    1452:	81 11       	cpse	r24, r1
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <prvUnlockQueue+0x2c>
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <prvUnlockQueue+0x40>
    1458:	f8 01       	movw	r30, r16
    145a:	81 89       	ldd	r24, Z+17	; 0x11
    145c:	81 11       	cpse	r24, r1
    145e:	05 c0       	rjmp	.+10     	; 0x146a <prvUnlockQueue+0x34>
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <prvUnlockQueue+0x40>
    1462:	78 01       	movw	r14, r16
    1464:	f1 e1       	ldi	r31, 0x11	; 17
    1466:	ef 0e       	add	r14, r31
    1468:	f1 1c       	adc	r15, r1
    146a:	c7 01       	movw	r24, r14
    146c:	f8 d6       	rcall	.+3568   	; 0x225e <xTaskRemoveFromEventList>
    146e:	81 11       	cpse	r24, r1
    1470:	ef d7       	rcall	.+4062   	; 0x2450 <vTaskMissedYield>
    1472:	c1 50       	subi	r28, 0x01	; 1
    1474:	89 f7       	brne	.-30     	; 0x1458 <prvUnlockQueue+0x22>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	f8 01       	movw	r30, r16
    147a:	86 8f       	std	Z+30, r24	; 0x1e
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	0f 92       	push	r0
    1486:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1488:	1c 16       	cp	r1, r28
    148a:	9c f4       	brge	.+38     	; 0x14b2 <prvUnlockQueue+0x7c>
    148c:	80 85       	ldd	r24, Z+8	; 0x08
    148e:	81 11       	cpse	r24, r1
    1490:	06 c0       	rjmp	.+12     	; 0x149e <prvUnlockQueue+0x68>
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <prvUnlockQueue+0x7c>
    1494:	f8 01       	movw	r30, r16
    1496:	80 85       	ldd	r24, Z+8	; 0x08
    1498:	81 11       	cpse	r24, r1
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <prvUnlockQueue+0x70>
    149c:	0a c0       	rjmp	.+20     	; 0x14b2 <prvUnlockQueue+0x7c>
    149e:	78 01       	movw	r14, r16
    14a0:	f8 e0       	ldi	r31, 0x08	; 8
    14a2:	ef 0e       	add	r14, r31
    14a4:	f1 1c       	adc	r15, r1
    14a6:	c7 01       	movw	r24, r14
    14a8:	da d6       	rcall	.+3508   	; 0x225e <xTaskRemoveFromEventList>
    14aa:	81 11       	cpse	r24, r1
    14ac:	d1 d7       	rcall	.+4002   	; 0x2450 <vTaskMissedYield>
    14ae:	c1 50       	subi	r28, 0x01	; 1
    14b0:	89 f7       	brne	.-30     	; 0x1494 <prvUnlockQueue+0x5e>
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	f8 01       	movw	r30, r16
    14b6:	85 8f       	std	Z+29, r24	; 0x1d
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	08 95       	ret

000014c8 <xQueueGenericReset>:
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	fc 01       	movw	r30, r24
    14d6:	36 2f       	mov	r19, r22
    14d8:	89 2b       	or	r24, r25
    14da:	09 f4       	brne	.+2      	; 0x14de <xQueueGenericReset+0x16>
    14dc:	48 c0       	rjmp	.+144    	; 0x156e <xQueueGenericReset+0xa6>
    14de:	23 8d       	ldd	r18, Z+27	; 0x1b
    14e0:	22 23       	and	r18, r18
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <xQueueGenericReset+0x1e>
    14e4:	46 c0       	rjmp	.+140    	; 0x1572 <xQueueGenericReset+0xaa>
    14e6:	02 2f       	mov	r16, r18
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	44 8d       	ldd	r20, Z+28	; 0x1c
    14ec:	e4 2e       	mov	r14, r20
    14ee:	f1 2c       	mov	r15, r1
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	9f ef       	ldi	r25, 0xFF	; 255
    14f4:	b8 01       	movw	r22, r16
    14f6:	0e 94 1e 18 	call	0x303c	; 0x303c <__udivmodhi4>
    14fa:	6e 15       	cp	r22, r14
    14fc:	7f 05       	cpc	r23, r15
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <xQueueGenericReset+0x3a>
    1500:	3a c0       	rjmp	.+116    	; 0x1576 <xQueueGenericReset+0xae>
    1502:	ef 01       	movw	r28, r30
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	0f 92       	push	r0
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	cb 01       	movw	r24, r22
    1510:	24 9f       	mul	r18, r20
    1512:	80 0d       	add	r24, r0
    1514:	91 1d       	adc	r25, r1
    1516:	11 24       	eor	r1, r1
    1518:	84 83       	std	Z+4, r24	; 0x04
    151a:	95 83       	std	Z+5, r25	; 0x05
    151c:	12 8e       	std	Z+26, r1	; 0x1a
    151e:	62 83       	std	Z+2, r22	; 0x02
    1520:	73 83       	std	Z+3, r23	; 0x03
    1522:	01 50       	subi	r16, 0x01	; 1
    1524:	11 09       	sbc	r17, r1
    1526:	0e 9d       	mul	r16, r14
    1528:	c0 01       	movw	r24, r0
    152a:	0f 9d       	mul	r16, r15
    152c:	90 0d       	add	r25, r0
    152e:	1e 9d       	mul	r17, r14
    1530:	90 0d       	add	r25, r0
    1532:	11 24       	eor	r1, r1
    1534:	86 0f       	add	r24, r22
    1536:	97 1f       	adc	r25, r23
    1538:	86 83       	std	Z+6, r24	; 0x06
    153a:	97 83       	std	Z+7, r25	; 0x07
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	85 8f       	std	Z+29, r24	; 0x1d
    1540:	86 8f       	std	Z+30, r24	; 0x1e
    1542:	31 11       	cpse	r19, r1
    1544:	0a c0       	rjmp	.+20     	; 0x155a <xQueueGenericReset+0x92>
    1546:	80 85       	ldd	r24, Z+8	; 0x08
    1548:	88 23       	and	r24, r24
    154a:	69 f0       	breq	.+26     	; 0x1566 <xQueueGenericReset+0x9e>
    154c:	cf 01       	movw	r24, r30
    154e:	08 96       	adiw	r24, 0x08	; 8
    1550:	86 d6       	rcall	.+3340   	; 0x225e <xTaskRemoveFromEventList>
    1552:	88 23       	and	r24, r24
    1554:	41 f0       	breq	.+16     	; 0x1566 <xQueueGenericReset+0x9e>
    1556:	35 de       	rcall	.-918    	; 0x11c2 <vPortYield>
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <xQueueGenericReset+0x9e>
    155a:	cf 01       	movw	r24, r30
    155c:	08 96       	adiw	r24, 0x08	; 8
    155e:	0b dd       	rcall	.-1514   	; 0xf76 <vListInitialise>
    1560:	ce 01       	movw	r24, r28
    1562:	41 96       	adiw	r24, 0x11	; 17
    1564:	08 dd       	rcall	.-1520   	; 0xf76 <vListInitialise>
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	05 c0       	rjmp	.+10     	; 0x1578 <xQueueGenericReset+0xb0>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <xQueueGenericReset+0xb0>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <xQueueGenericReset+0xb0>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	08 95       	ret

00001586 <xQueueGenericCreate>:
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	28 2f       	mov	r18, r24
    1590:	36 2f       	mov	r19, r22
    1592:	88 23       	and	r24, r24
    1594:	51 f1       	breq	.+84     	; 0x15ea <xQueueGenericCreate+0x64>
    1596:	68 2f       	mov	r22, r24
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	9f ef       	ldi	r25, 0xFF	; 255
    159e:	0e 94 1e 18 	call	0x303c	; 0x303c <__udivmodhi4>
    15a2:	83 2f       	mov	r24, r19
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	68 17       	cp	r22, r24
    15a8:	79 07       	cpc	r23, r25
    15aa:	10 f1       	brcs	.+68     	; 0x15f0 <xQueueGenericCreate+0x6a>
    15ac:	23 9f       	mul	r18, r19
    15ae:	c0 01       	movw	r24, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	81 3e       	cpi	r24, 0xE1	; 225
    15b4:	4f ef       	ldi	r20, 0xFF	; 255
    15b6:	94 07       	cpc	r25, r20
    15b8:	f0 f4       	brcc	.+60     	; 0x15f6 <xQueueGenericCreate+0x70>
    15ba:	d3 2f       	mov	r29, r19
    15bc:	c2 2f       	mov	r28, r18
    15be:	4f 96       	adiw	r24, 0x1f	; 31
    15c0:	b2 de       	rcall	.-668    	; 0x1326 <pvPortMalloc>
    15c2:	8c 01       	movw	r16, r24
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	c9 f0       	breq	.+50     	; 0x15fa <xQueueGenericCreate+0x74>
    15c8:	d1 11       	cpse	r29, r1
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <xQueueGenericCreate+0x4e>
    15cc:	fc 01       	movw	r30, r24
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <xQueueGenericCreate+0x56>
    15d4:	4f 96       	adiw	r24, 0x1f	; 31
    15d6:	f8 01       	movw	r30, r16
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	f8 01       	movw	r30, r16
    15de:	c3 8f       	std	Z+27, r28	; 0x1b
    15e0:	d4 8f       	std	Z+28, r29	; 0x1c
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	c8 01       	movw	r24, r16
    15e6:	70 df       	rcall	.-288    	; 0x14c8 <xQueueGenericReset>
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <xQueueGenericCreate+0x74>
    15ea:	00 e0       	ldi	r16, 0x00	; 0
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <xQueueGenericCreate+0x74>
    15f0:	00 e0       	ldi	r16, 0x00	; 0
    15f2:	10 e0       	ldi	r17, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <xQueueGenericCreate+0x74>
    15f6:	00 e0       	ldi	r16, 0x00	; 0
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	c8 01       	movw	r24, r16
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	08 95       	ret

00001606 <xQueueGenericSend>:
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	25 97       	sbiw	r28, 0x05	; 5
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	8c 01       	movw	r16, r24
    1626:	6b 01       	movw	r12, r22
    1628:	4c 83       	std	Y+4, r20	; 0x04
    162a:	5d 83       	std	Y+5, r21	; 0x05
    162c:	a2 2e       	mov	r10, r18
    162e:	b1 2c       	mov	r11, r1
    1630:	7c 01       	movw	r14, r24
    1632:	88 e0       	ldi	r24, 0x08	; 8
    1634:	e8 0e       	add	r14, r24
    1636:	f1 1c       	adc	r15, r1
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	0f 92       	push	r0
    163e:	f8 01       	movw	r30, r16
    1640:	92 8d       	ldd	r25, Z+26	; 0x1a
    1642:	83 8d       	ldd	r24, Z+27	; 0x1b
    1644:	98 17       	cp	r25, r24
    1646:	18 f0       	brcs	.+6      	; 0x164e <xQueueGenericSend+0x48>
    1648:	f2 e0       	ldi	r31, 0x02	; 2
    164a:	af 12       	cpse	r10, r31
    164c:	15 c0       	rjmp	.+42     	; 0x1678 <xQueueGenericSend+0x72>
    164e:	4a 2d       	mov	r20, r10
    1650:	b6 01       	movw	r22, r12
    1652:	c8 01       	movw	r24, r16
    1654:	8d de       	rcall	.-742    	; 0x1370 <prvCopyDataToQueue>
    1656:	f8 01       	movw	r30, r16
    1658:	91 89       	ldd	r25, Z+17	; 0x11
    165a:	99 23       	and	r25, r25
    165c:	39 f0       	breq	.+14     	; 0x166c <xQueueGenericSend+0x66>
    165e:	c8 01       	movw	r24, r16
    1660:	41 96       	adiw	r24, 0x11	; 17
    1662:	fd d5       	rcall	.+3066   	; 0x225e <xTaskRemoveFromEventList>
    1664:	88 23       	and	r24, r24
    1666:	21 f0       	breq	.+8      	; 0x1670 <xQueueGenericSend+0x6a>
    1668:	ac dd       	rcall	.-1192   	; 0x11c2 <vPortYield>
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <xQueueGenericSend+0x6a>
    166c:	81 11       	cpse	r24, r1
    166e:	a9 dd       	rcall	.-1198   	; 0x11c2 <vPortYield>
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	46 c0       	rjmp	.+140    	; 0x1704 <xQueueGenericSend+0xfe>
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	89 2b       	or	r24, r25
    167e:	21 f4       	brne	.+8      	; 0x1688 <xQueueGenericSend+0x82>
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	3e c0       	rjmp	.+124    	; 0x1704 <xQueueGenericSend+0xfe>
    1688:	b1 10       	cpse	r11, r1
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <xQueueGenericSend+0x90>
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	a4 d6       	rcall	.+3400   	; 0x23da <vTaskInternalSetTimeOutState>
    1692:	bb 24       	eor	r11, r11
    1694:	b3 94       	inc	r11
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f d3       	rcall	.+1566   	; 0x1cba <vTaskSuspendAll>
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	0f 92       	push	r0
    16a2:	f8 01       	movw	r30, r16
    16a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    16a6:	8f 3f       	cpi	r24, 0xFF	; 255
    16a8:	09 f4       	brne	.+2      	; 0x16ac <xQueueGenericSend+0xa6>
    16aa:	15 8e       	std	Z+29, r1	; 0x1d
    16ac:	f8 01       	movw	r30, r16
    16ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    16b0:	8f 3f       	cpi	r24, 0xFF	; 255
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <xQueueGenericSend+0xb0>
    16b4:	16 8e       	std	Z+30, r1	; 0x1e
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	be 01       	movw	r22, r28
    16bc:	6c 5f       	subi	r22, 0xFC	; 252
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	ce 01       	movw	r24, r28
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	95 d6       	rcall	.+3370   	; 0x23f0 <xTaskCheckForTimeOut>
    16c6:	81 11       	cpse	r24, r1
    16c8:	19 c0       	rjmp	.+50     	; 0x16fc <xQueueGenericSend+0xf6>
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	0f 92       	push	r0
    16d0:	f8 01       	movw	r30, r16
    16d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    16da:	98 13       	cpse	r25, r24
    16dc:	0b c0       	rjmp	.+22     	; 0x16f4 <xQueueGenericSend+0xee>
    16de:	6c 81       	ldd	r22, Y+4	; 0x04
    16e0:	7d 81       	ldd	r23, Y+5	; 0x05
    16e2:	c7 01       	movw	r24, r14
    16e4:	63 d5       	rcall	.+2758   	; 0x21ac <vTaskPlaceOnEventList>
    16e6:	c8 01       	movw	r24, r16
    16e8:	a6 de       	rcall	.-692    	; 0x1436 <prvUnlockQueue>
    16ea:	0f d4       	rcall	.+2078   	; 0x1f0a <xTaskResumeAll>
    16ec:	81 11       	cpse	r24, r1
    16ee:	a4 cf       	rjmp	.-184    	; 0x1638 <xQueueGenericSend+0x32>
    16f0:	68 dd       	rcall	.-1328   	; 0x11c2 <vPortYield>
    16f2:	a2 cf       	rjmp	.-188    	; 0x1638 <xQueueGenericSend+0x32>
    16f4:	c8 01       	movw	r24, r16
    16f6:	9f de       	rcall	.-706    	; 0x1436 <prvUnlockQueue>
    16f8:	08 d4       	rcall	.+2064   	; 0x1f0a <xTaskResumeAll>
    16fa:	9e cf       	rjmp	.-196    	; 0x1638 <xQueueGenericSend+0x32>
    16fc:	c8 01       	movw	r24, r16
    16fe:	9b de       	rcall	.-714    	; 0x1436 <prvUnlockQueue>
    1700:	04 d4       	rcall	.+2056   	; 0x1f0a <xTaskResumeAll>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	25 96       	adiw	r28, 0x05	; 5
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	bf 90       	pop	r11
    171c:	af 90       	pop	r10
    171e:	08 95       	ret

00001720 <xQueueReceive>:
    1720:	af 92       	push	r10
    1722:	bf 92       	push	r11
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	25 97       	sbiw	r28, 0x05	; 5
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	8c 01       	movw	r16, r24
    1740:	5b 01       	movw	r10, r22
    1742:	4c 83       	std	Y+4, r20	; 0x04
    1744:	5d 83       	std	Y+5, r21	; 0x05
    1746:	e1 2c       	mov	r14, r1
    1748:	6c 01       	movw	r12, r24
    174a:	81 e1       	ldi	r24, 0x11	; 17
    174c:	c8 0e       	add	r12, r24
    174e:	d1 1c       	adc	r13, r1
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	0f 92       	push	r0
    1756:	f8 01       	movw	r30, r16
    1758:	f2 8c       	ldd	r15, Z+26	; 0x1a
    175a:	ff 20       	and	r15, r15
    175c:	91 f0       	breq	.+36     	; 0x1782 <xQueueReceive+0x62>
    175e:	b5 01       	movw	r22, r10
    1760:	c8 01       	movw	r24, r16
    1762:	4f de       	rcall	.-866    	; 0x1402 <prvCopyDataFromQueue>
    1764:	fa 94       	dec	r15
    1766:	f8 01       	movw	r30, r16
    1768:	f2 8e       	std	Z+26, r15	; 0x1a
    176a:	80 85       	ldd	r24, Z+8	; 0x08
    176c:	88 23       	and	r24, r24
    176e:	29 f0       	breq	.+10     	; 0x177a <xQueueReceive+0x5a>
    1770:	c8 01       	movw	r24, r16
    1772:	08 96       	adiw	r24, 0x08	; 8
    1774:	74 d5       	rcall	.+2792   	; 0x225e <xTaskRemoveFromEventList>
    1776:	81 11       	cpse	r24, r1
    1778:	24 dd       	rcall	.-1464   	; 0x11c2 <vPortYield>
    177a:	0f 90       	pop	r0
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	45 c0       	rjmp	.+138    	; 0x180c <xQueueReceive+0xec>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	89 2b       	or	r24, r25
    1788:	21 f4       	brne	.+8      	; 0x1792 <xQueueReceive+0x72>
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	3d c0       	rjmp	.+122    	; 0x180c <xQueueReceive+0xec>
    1792:	e1 10       	cpse	r14, r1
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <xQueueReceive+0x80>
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	1f d6       	rcall	.+3134   	; 0x23da <vTaskInternalSetTimeOutState>
    179c:	ee 24       	eor	r14, r14
    179e:	e3 94       	inc	r14
    17a0:	0f 90       	pop	r0
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	8a d2       	rcall	.+1300   	; 0x1cba <vTaskSuspendAll>
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	0f 92       	push	r0
    17ac:	f8 01       	movw	r30, r16
    17ae:	85 8d       	ldd	r24, Z+29	; 0x1d
    17b0:	8f 3f       	cpi	r24, 0xFF	; 255
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <xQueueReceive+0x96>
    17b4:	15 8e       	std	Z+29, r1	; 0x1d
    17b6:	f8 01       	movw	r30, r16
    17b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    17ba:	8f 3f       	cpi	r24, 0xFF	; 255
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <xQueueReceive+0xa0>
    17be:	16 8e       	std	Z+30, r1	; 0x1e
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	be 01       	movw	r22, r28
    17c6:	6c 5f       	subi	r22, 0xFC	; 252
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	ce 01       	movw	r24, r28
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	10 d6       	rcall	.+3104   	; 0x23f0 <xTaskCheckForTimeOut>
    17d0:	81 11       	cpse	r24, r1
    17d2:	13 c0       	rjmp	.+38     	; 0x17fa <xQueueReceive+0xda>
    17d4:	c8 01       	movw	r24, r16
    17d6:	c1 dd       	rcall	.-1150   	; 0x135a <prvIsQueueEmpty>
    17d8:	88 23       	and	r24, r24
    17da:	59 f0       	breq	.+22     	; 0x17f2 <xQueueReceive+0xd2>
    17dc:	6c 81       	ldd	r22, Y+4	; 0x04
    17de:	7d 81       	ldd	r23, Y+5	; 0x05
    17e0:	c6 01       	movw	r24, r12
    17e2:	e4 d4       	rcall	.+2504   	; 0x21ac <vTaskPlaceOnEventList>
    17e4:	c8 01       	movw	r24, r16
    17e6:	27 de       	rcall	.-946    	; 0x1436 <prvUnlockQueue>
    17e8:	90 d3       	rcall	.+1824   	; 0x1f0a <xTaskResumeAll>
    17ea:	81 11       	cpse	r24, r1
    17ec:	b1 cf       	rjmp	.-158    	; 0x1750 <xQueueReceive+0x30>
    17ee:	e9 dc       	rcall	.-1582   	; 0x11c2 <vPortYield>
    17f0:	af cf       	rjmp	.-162    	; 0x1750 <xQueueReceive+0x30>
    17f2:	c8 01       	movw	r24, r16
    17f4:	20 de       	rcall	.-960    	; 0x1436 <prvUnlockQueue>
    17f6:	89 d3       	rcall	.+1810   	; 0x1f0a <xTaskResumeAll>
    17f8:	ab cf       	rjmp	.-170    	; 0x1750 <xQueueReceive+0x30>
    17fa:	c8 01       	movw	r24, r16
    17fc:	1c de       	rcall	.-968    	; 0x1436 <prvUnlockQueue>
    17fe:	85 d3       	rcall	.+1802   	; 0x1f0a <xTaskResumeAll>
    1800:	c8 01       	movw	r24, r16
    1802:	ab dd       	rcall	.-1194   	; 0x135a <prvIsQueueEmpty>
    1804:	88 23       	and	r24, r24
    1806:	09 f4       	brne	.+2      	; 0x180a <xQueueReceive+0xea>
    1808:	a3 cf       	rjmp	.-186    	; 0x1750 <xQueueReceive+0x30>
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	25 96       	adiw	r28, 0x05	; 5
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	08 95       	ret

00001828 <xQueueSemaphoreTake>:
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	25 97       	sbiw	r28, 0x05	; 5
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	8c 01       	movw	r16, r24
    1842:	6c 83       	std	Y+4, r22	; 0x04
    1844:	7d 83       	std	Y+5, r23	; 0x05
    1846:	d1 2c       	mov	r13, r1
    1848:	7c 01       	movw	r14, r24
    184a:	81 e1       	ldi	r24, 0x11	; 17
    184c:	e8 0e       	add	r14, r24
    184e:	f1 1c       	adc	r15, r1
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	0f 92       	push	r0
    1856:	f8 01       	movw	r30, r16
    1858:	82 8d       	ldd	r24, Z+26	; 0x1a
    185a:	88 23       	and	r24, r24
    185c:	71 f0       	breq	.+28     	; 0x187a <xQueueSemaphoreTake+0x52>
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	82 8f       	std	Z+26, r24	; 0x1a
    1862:	80 85       	ldd	r24, Z+8	; 0x08
    1864:	88 23       	and	r24, r24
    1866:	29 f0       	breq	.+10     	; 0x1872 <xQueueSemaphoreTake+0x4a>
    1868:	c8 01       	movw	r24, r16
    186a:	08 96       	adiw	r24, 0x08	; 8
    186c:	f8 d4       	rcall	.+2544   	; 0x225e <xTaskRemoveFromEventList>
    186e:	81 11       	cpse	r24, r1
    1870:	a8 dc       	rcall	.-1712   	; 0x11c2 <vPortYield>
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	45 c0       	rjmp	.+138    	; 0x1904 <xQueueSemaphoreTake+0xdc>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	89 2b       	or	r24, r25
    1880:	21 f4       	brne	.+8      	; 0x188a <xQueueSemaphoreTake+0x62>
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	3d c0       	rjmp	.+122    	; 0x1904 <xQueueSemaphoreTake+0xdc>
    188a:	d1 10       	cpse	r13, r1
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <xQueueSemaphoreTake+0x70>
    188e:	ce 01       	movw	r24, r28
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	a3 d5       	rcall	.+2886   	; 0x23da <vTaskInternalSetTimeOutState>
    1894:	dd 24       	eor	r13, r13
    1896:	d3 94       	inc	r13
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0e d2       	rcall	.+1052   	; 0x1cba <vTaskSuspendAll>
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	0f 92       	push	r0
    18a4:	f8 01       	movw	r30, r16
    18a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    18a8:	8f 3f       	cpi	r24, 0xFF	; 255
    18aa:	09 f4       	brne	.+2      	; 0x18ae <xQueueSemaphoreTake+0x86>
    18ac:	15 8e       	std	Z+29, r1	; 0x1d
    18ae:	f8 01       	movw	r30, r16
    18b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    18b2:	8f 3f       	cpi	r24, 0xFF	; 255
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <xQueueSemaphoreTake+0x90>
    18b6:	16 8e       	std	Z+30, r1	; 0x1e
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	be 01       	movw	r22, r28
    18be:	6c 5f       	subi	r22, 0xFC	; 252
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	ce 01       	movw	r24, r28
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	94 d5       	rcall	.+2856   	; 0x23f0 <xTaskCheckForTimeOut>
    18c8:	81 11       	cpse	r24, r1
    18ca:	13 c0       	rjmp	.+38     	; 0x18f2 <xQueueSemaphoreTake+0xca>
    18cc:	c8 01       	movw	r24, r16
    18ce:	45 dd       	rcall	.-1398   	; 0x135a <prvIsQueueEmpty>
    18d0:	88 23       	and	r24, r24
    18d2:	59 f0       	breq	.+22     	; 0x18ea <xQueueSemaphoreTake+0xc2>
    18d4:	6c 81       	ldd	r22, Y+4	; 0x04
    18d6:	7d 81       	ldd	r23, Y+5	; 0x05
    18d8:	c7 01       	movw	r24, r14
    18da:	68 d4       	rcall	.+2256   	; 0x21ac <vTaskPlaceOnEventList>
    18dc:	c8 01       	movw	r24, r16
    18de:	ab dd       	rcall	.-1194   	; 0x1436 <prvUnlockQueue>
    18e0:	14 d3       	rcall	.+1576   	; 0x1f0a <xTaskResumeAll>
    18e2:	81 11       	cpse	r24, r1
    18e4:	b5 cf       	rjmp	.-150    	; 0x1850 <xQueueSemaphoreTake+0x28>
    18e6:	6d dc       	rcall	.-1830   	; 0x11c2 <vPortYield>
    18e8:	b3 cf       	rjmp	.-154    	; 0x1850 <xQueueSemaphoreTake+0x28>
    18ea:	c8 01       	movw	r24, r16
    18ec:	a4 dd       	rcall	.-1208   	; 0x1436 <prvUnlockQueue>
    18ee:	0d d3       	rcall	.+1562   	; 0x1f0a <xTaskResumeAll>
    18f0:	af cf       	rjmp	.-162    	; 0x1850 <xQueueSemaphoreTake+0x28>
    18f2:	c8 01       	movw	r24, r16
    18f4:	a0 dd       	rcall	.-1216   	; 0x1436 <prvUnlockQueue>
    18f6:	09 d3       	rcall	.+1554   	; 0x1f0a <xTaskResumeAll>
    18f8:	c8 01       	movw	r24, r16
    18fa:	2f dd       	rcall	.-1442   	; 0x135a <prvIsQueueEmpty>
    18fc:	88 23       	and	r24, r24
    18fe:	09 f4       	brne	.+2      	; 0x1902 <xQueueSemaphoreTake+0xda>
    1900:	a7 cf       	rjmp	.-178    	; 0x1850 <xQueueSemaphoreTake+0x28>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	25 96       	adiw	r28, 0x05	; 5
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	df 90       	pop	r13
    1918:	08 95       	ret

0000191a <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	0f 92       	push	r0
    1926:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1928:	8f 3f       	cpi	r24, 0xFF	; 255
    192a:	09 f4       	brne	.+2      	; 0x192e <vQueueWaitForMessageRestricted+0x14>
    192c:	1d 8e       	std	Y+29, r1	; 0x1d
    192e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1930:	8f 3f       	cpi	r24, 0xFF	; 255
    1932:	09 f4       	brne	.+2      	; 0x1936 <vQueueWaitForMessageRestricted+0x1c>
    1934:	1e 8e       	std	Y+30, r1	; 0x1e
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    193a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    193c:	81 11       	cpse	r24, r1
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1940:	ce 01       	movw	r24, r28
    1942:	41 96       	adiw	r24, 0x11	; 17
    1944:	44 d4       	rcall	.+2184   	; 0x21ce <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1946:	ce 01       	movw	r24, r28
    1948:	76 dd       	rcall	.-1300   	; 0x1436 <prvUnlockQueue>
    }
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    1950:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <pxDelayedTaskList>
    1954:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    1958:	80 81       	ld	r24, Z
    195a:	81 11       	cpse	r24, r1
    195c:	07 c0       	rjmp	.+14     	; 0x196c <prvResetNextTaskUnblockTime+0x1c>
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <xNextTaskUnblockTime>
    1966:	90 93 54 22 	sts	0x2254, r25	; 0x802254 <xNextTaskUnblockTime+0x1>
    196a:	08 95       	ret
    196c:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <pxDelayedTaskList>
    1970:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    1974:	05 80       	ldd	r0, Z+5	; 0x05
    1976:	f6 81       	ldd	r31, Z+6	; 0x06
    1978:	e0 2d       	mov	r30, r0
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <xNextTaskUnblockTime>
    1982:	90 93 54 22 	sts	0x2254, r25	; 0x802254 <xNextTaskUnblockTime+0x1>
    1986:	08 95       	ret

00001988 <prvIdleTask>:
    1988:	ce e7       	ldi	r28, 0x7E	; 126
    198a:	d2 e2       	ldi	r29, 0x22	; 34
    198c:	88 81       	ld	r24, Y
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	e8 f3       	brcs	.-6      	; 0x198c <prvIdleTask+0x4>
    1992:	17 dc       	rcall	.-2002   	; 0x11c2 <vPortYield>
    1994:	fb cf       	rjmp	.-10     	; 0x198c <prvIdleTask+0x4>

00001996 <prvAddCurrentTaskToDelayedList>:
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	00 91 5c 22 	lds	r16, 0x225C	; 0x80225c <xTickCount>
    19a4:	10 91 5d 22 	lds	r17, 0x225D	; 0x80225d <xTickCount+0x1>
    19a8:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxCurrentTCB>
    19ac:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	24 db       	rcall	.-2488   	; 0xffc <uxListRemove>
    19b4:	c0 0f       	add	r28, r16
    19b6:	d1 1f       	adc	r29, r17
    19b8:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxCurrentTCB>
    19bc:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    19c0:	c2 83       	std	Z+2, r28	; 0x02
    19c2:	d3 83       	std	Z+3, r29	; 0x03
    19c4:	c0 17       	cp	r28, r16
    19c6:	d1 07       	cpc	r29, r17
    19c8:	60 f4       	brcc	.+24     	; 0x19e2 <prvAddCurrentTaskToDelayedList+0x4c>
    19ca:	60 91 ab 22 	lds	r22, 0x22AB	; 0x8022ab <pxCurrentTCB>
    19ce:	70 91 ac 22 	lds	r23, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    19d2:	80 91 68 22 	lds	r24, 0x2268	; 0x802268 <pxOverflowDelayedTaskList>
    19d6:	90 91 69 22 	lds	r25, 0x2269	; 0x802269 <pxOverflowDelayedTaskList+0x1>
    19da:	6e 5f       	subi	r22, 0xFE	; 254
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	dd da       	rcall	.-2630   	; 0xf9a <vListInsert>
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <prvAddCurrentTaskToDelayedList+0x78>
    19e2:	60 91 ab 22 	lds	r22, 0x22AB	; 0x8022ab <pxCurrentTCB>
    19e6:	70 91 ac 22 	lds	r23, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    19ea:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <pxDelayedTaskList>
    19ee:	90 91 6b 22 	lds	r25, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    19f2:	6e 5f       	subi	r22, 0xFE	; 254
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	d1 da       	rcall	.-2654   	; 0xf9a <vListInsert>
    19f8:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <xNextTaskUnblockTime>
    19fc:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <xNextTaskUnblockTime+0x1>
    1a00:	c8 17       	cp	r28, r24
    1a02:	d9 07       	cpc	r29, r25
    1a04:	20 f4       	brcc	.+8      	; 0x1a0e <prvAddCurrentTaskToDelayedList+0x78>
    1a06:	c0 93 53 22 	sts	0x2253, r28	; 0x802253 <xNextTaskUnblockTime>
    1a0a:	d0 93 54 22 	sts	0x2254, r29	; 0x802254 <xNextTaskUnblockTime+0x1>
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <xTaskCreate>:
    1a18:	4f 92       	push	r4
    1a1a:	5f 92       	push	r5
    1a1c:	6f 92       	push	r6
    1a1e:	7f 92       	push	r7
    1a20:	8f 92       	push	r8
    1a22:	9f 92       	push	r9
    1a24:	af 92       	push	r10
    1a26:	bf 92       	push	r11
    1a28:	cf 92       	push	r12
    1a2a:	df 92       	push	r13
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	4c 01       	movw	r8, r24
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	5a 01       	movw	r10, r20
    1a3e:	29 01       	movw	r4, r18
    1a40:	ca 01       	movw	r24, r20
    1a42:	71 dc       	rcall	.-1822   	; 0x1326 <pvPortMalloc>
    1a44:	3c 01       	movw	r6, r24
    1a46:	89 2b       	or	r24, r25
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <xTaskCreate+0x34>
    1a4a:	f8 c0       	rjmp	.+496    	; 0x1c3c <xTaskCreate+0x224>
    1a4c:	86 e2       	ldi	r24, 0x26	; 38
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	6a dc       	rcall	.-1836   	; 0x1326 <pvPortMalloc>
    1a52:	ec 01       	movw	r28, r24
    1a54:	89 2b       	or	r24, r25
    1a56:	59 f0       	breq	.+22     	; 0x1a6e <xTaskCreate+0x56>
    1a58:	6f 8a       	std	Y+23, r6	; 0x17
    1a5a:	78 8e       	std	Y+24, r7	; 0x18
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	a8 1a       	sub	r10, r24
    1a60:	b1 08       	sbc	r11, r1
    1a62:	a6 0c       	add	r10, r6
    1a64:	b7 1c       	adc	r11, r7
    1a66:	c1 14       	cp	r12, r1
    1a68:	d1 04       	cpc	r13, r1
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <xTaskCreate+0x5c>
    1a6c:	1f c0       	rjmp	.+62     	; 0x1aac <xTaskCreate+0x94>
    1a6e:	c3 01       	movw	r24, r6
    1a70:	67 dc       	rcall	.-1842   	; 0x1340 <vPortFree>
    1a72:	e4 c0       	rjmp	.+456    	; 0x1c3c <xTaskCreate+0x224>
    1a74:	d6 01       	movw	r26, r12
    1a76:	8c 91       	ld	r24, X
    1a78:	89 8f       	std	Y+25, r24	; 0x19
    1a7a:	8c 91       	ld	r24, X
    1a7c:	88 23       	and	r24, r24
    1a7e:	a1 f0       	breq	.+40     	; 0x1aa8 <xTaskCreate+0x90>
    1a80:	ae 01       	movw	r20, r28
    1a82:	46 5e       	subi	r20, 0xE6	; 230
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	f6 01       	movw	r30, r12
    1a88:	31 96       	adiw	r30, 0x01	; 1
    1a8a:	b8 e0       	ldi	r27, 0x08	; 8
    1a8c:	cb 0e       	add	r12, r27
    1a8e:	d1 1c       	adc	r13, r1
    1a90:	cf 01       	movw	r24, r30
    1a92:	21 91       	ld	r18, Z+
    1a94:	da 01       	movw	r26, r20
    1a96:	2d 93       	st	X+, r18
    1a98:	ad 01       	movw	r20, r26
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	8c 91       	ld	r24, X
    1a9e:	88 23       	and	r24, r24
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <xTaskCreate+0x90>
    1aa2:	ce 16       	cp	r12, r30
    1aa4:	df 06       	cpc	r13, r31
    1aa6:	a1 f7       	brne	.-24     	; 0x1a90 <xTaskCreate+0x78>
    1aa8:	18 a2       	std	Y+32, r1	; 0x20
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <xTaskCreate+0x96>
    1aac:	19 8e       	std	Y+25, r1	; 0x19
    1aae:	05 30       	cpi	r16, 0x05	; 5
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <xTaskCreate+0x9c>
    1ab2:	04 e0       	ldi	r16, 0x04	; 4
    1ab4:	0e 8b       	std	Y+22, r16	; 0x16
    1ab6:	6e 01       	movw	r12, r28
    1ab8:	b2 e0       	ldi	r27, 0x02	; 2
    1aba:	cb 0e       	add	r12, r27
    1abc:	d1 1c       	adc	r13, r1
    1abe:	c6 01       	movw	r24, r12
    1ac0:	68 da       	rcall	.-2864   	; 0xf92 <vListInitialiseItem>
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	0c 96       	adiw	r24, 0x0c	; 12
    1ac6:	65 da       	rcall	.-2870   	; 0xf92 <vListInitialiseItem>
    1ac8:	c8 87       	std	Y+8, r28	; 0x08
    1aca:	d9 87       	std	Y+9, r29	; 0x09
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	80 1b       	sub	r24, r16
    1ad2:	91 09       	sbc	r25, r1
    1ad4:	8c 87       	std	Y+12, r24	; 0x0c
    1ad6:	9d 87       	std	Y+13, r25	; 0x0d
    1ad8:	ca 8b       	std	Y+18, r28	; 0x12
    1ada:	db 8b       	std	Y+19, r29	; 0x13
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	fe 01       	movw	r30, r28
    1ae0:	b1 96       	adiw	r30, 0x21	; 33
    1ae2:	df 01       	movw	r26, r30
    1ae4:	1d 92       	st	X+, r1
    1ae6:	8a 95       	dec	r24
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <xTaskCreate+0xcc>
    1aea:	1d a2       	std	Y+37, r1	; 0x25
    1aec:	a2 01       	movw	r20, r4
    1aee:	b4 01       	movw	r22, r8
    1af0:	c5 01       	movw	r24, r10
    1af2:	ab da       	rcall	.-2730   	; 0x104a <pxPortInitialiseStack>
    1af4:	88 83       	st	Y, r24
    1af6:	99 83       	std	Y+1, r25	; 0x01
    1af8:	e1 14       	cp	r14, r1
    1afa:	f1 04       	cpc	r15, r1
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <xTaskCreate+0xec>
    1afe:	f7 01       	movw	r30, r14
    1b00:	c0 83       	st	Z, r28
    1b02:	d1 83       	std	Z+1, r29	; 0x01
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	0f 92       	push	r0
    1b0a:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <uxCurrentNumberOfTasks>
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	80 93 5e 22 	sts	0x225E, r24	; 0x80225e <uxCurrentNumberOfTasks>
    1b14:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1b18:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1b1c:	89 2b       	or	r24, r25
    1b1e:	69 f5       	brne	.+90     	; 0x1b7a <xTaskCreate+0x162>
    1b20:	c0 93 ab 22 	sts	0x22AB, r28	; 0x8022ab <pxCurrentTCB>
    1b24:	d0 93 ac 22 	sts	0x22AC, r29	; 0x8022ac <pxCurrentTCB+0x1>
    1b28:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <uxCurrentNumberOfTasks>
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	a9 f5       	brne	.+106    	; 0x1b9a <xTaskCreate+0x182>
    1b30:	0e e7       	ldi	r16, 0x7E	; 126
    1b32:	12 e2       	ldi	r17, 0x22	; 34
    1b34:	0f 2e       	mov	r0, r31
    1b36:	fb ea       	ldi	r31, 0xAB	; 171
    1b38:	ef 2e       	mov	r14, r31
    1b3a:	f2 e2       	ldi	r31, 0x22	; 34
    1b3c:	ff 2e       	mov	r15, r31
    1b3e:	f0 2d       	mov	r31, r0
    1b40:	c8 01       	movw	r24, r16
    1b42:	19 da       	rcall	.-3022   	; 0xf76 <vListInitialise>
    1b44:	07 5f       	subi	r16, 0xF7	; 247
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	0e 15       	cp	r16, r14
    1b4a:	1f 05       	cpc	r17, r15
    1b4c:	c9 f7       	brne	.-14     	; 0x1b40 <xTaskCreate+0x128>
    1b4e:	85 e7       	ldi	r24, 0x75	; 117
    1b50:	92 e2       	ldi	r25, 0x22	; 34
    1b52:	11 da       	rcall	.-3038   	; 0xf76 <vListInitialise>
    1b54:	8c e6       	ldi	r24, 0x6C	; 108
    1b56:	92 e2       	ldi	r25, 0x22	; 34
    1b58:	0e da       	rcall	.-3044   	; 0xf76 <vListInitialise>
    1b5a:	8f e5       	ldi	r24, 0x5F	; 95
    1b5c:	92 e2       	ldi	r25, 0x22	; 34
    1b5e:	0b da       	rcall	.-3050   	; 0xf76 <vListInitialise>
    1b60:	85 e7       	ldi	r24, 0x75	; 117
    1b62:	92 e2       	ldi	r25, 0x22	; 34
    1b64:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <pxDelayedTaskList>
    1b68:	90 93 6b 22 	sts	0x226B, r25	; 0x80226b <pxDelayedTaskList+0x1>
    1b6c:	8c e6       	ldi	r24, 0x6C	; 108
    1b6e:	92 e2       	ldi	r25, 0x22	; 34
    1b70:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <pxOverflowDelayedTaskList>
    1b74:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <pxOverflowDelayedTaskList+0x1>
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <xTaskCreate+0x182>
    1b7a:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <xSchedulerRunning>
    1b7e:	81 11       	cpse	r24, r1
    1b80:	0c c0       	rjmp	.+24     	; 0x1b9a <xTaskCreate+0x182>
    1b82:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1b86:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1b8a:	96 89       	ldd	r25, Z+22	; 0x16
    1b8c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b8e:	89 17       	cp	r24, r25
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <xTaskCreate+0x182>
    1b92:	c0 93 ab 22 	sts	0x22AB, r28	; 0x8022ab <pxCurrentTCB>
    1b96:	d0 93 ac 22 	sts	0x22AC, r29	; 0x8022ac <pxCurrentTCB+0x1>
    1b9a:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <uxTaskNumber>
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <uxTaskNumber>
    1ba4:	8e 89       	ldd	r24, Y+22	; 0x16
    1ba6:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <uxTopReadyPriority>
    1baa:	98 17       	cp	r25, r24
    1bac:	10 f4       	brcc	.+4      	; 0x1bb2 <xTaskCreate+0x19a>
    1bae:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <uxTopReadyPriority>
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	ee 0f       	add	r30, r30
    1bb8:	ff 1f       	adc	r31, r31
    1bba:	ee 0f       	add	r30, r30
    1bbc:	ff 1f       	adc	r31, r31
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	8e 0f       	add	r24, r30
    1bc4:	9f 1f       	adc	r25, r31
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	e2 58       	subi	r30, 0x82	; 130
    1bca:	fd 4d       	sbci	r31, 0xDD	; 221
    1bcc:	01 80       	ldd	r0, Z+1	; 0x01
    1bce:	f2 81       	ldd	r31, Z+2	; 0x02
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	ec 83       	std	Y+4, r30	; 0x04
    1bd4:	fd 83       	std	Y+5, r31	; 0x05
    1bd6:	84 81       	ldd	r24, Z+4	; 0x04
    1bd8:	95 81       	ldd	r25, Z+5	; 0x05
    1bda:	8e 83       	std	Y+6, r24	; 0x06
    1bdc:	9f 83       	std	Y+7, r25	; 0x07
    1bde:	a4 81       	ldd	r26, Z+4	; 0x04
    1be0:	b5 81       	ldd	r27, Z+5	; 0x05
    1be2:	12 96       	adiw	r26, 0x02	; 2
    1be4:	cd 92       	st	X+, r12
    1be6:	dc 92       	st	X, r13
    1be8:	13 97       	sbiw	r26, 0x03	; 3
    1bea:	c4 82       	std	Z+4, r12	; 0x04
    1bec:	d5 82       	std	Z+5, r13	; 0x05
    1bee:	ee 89       	ldd	r30, Y+22	; 0x16
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	cf 01       	movw	r24, r30
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	e8 0f       	add	r30, r24
    1c02:	f9 1f       	adc	r31, r25
    1c04:	e2 58       	subi	r30, 0x82	; 130
    1c06:	fd 4d       	sbci	r31, 0xDD	; 221
    1c08:	ea 87       	std	Y+10, r30	; 0x0a
    1c0a:	fb 87       	std	Y+11, r31	; 0x0b
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 83       	st	Z, r24
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	80 91 5a 22 	lds	r24, 0x225A	; 0x80225a <xSchedulerRunning>
    1c1a:	88 23       	and	r24, r24
    1c1c:	59 f0       	breq	.+22     	; 0x1c34 <xTaskCreate+0x21c>
    1c1e:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1c22:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1c26:	96 89       	ldd	r25, Z+22	; 0x16
    1c28:	8e 89       	ldd	r24, Y+22	; 0x16
    1c2a:	98 17       	cp	r25, r24
    1c2c:	28 f4       	brcc	.+10     	; 0x1c38 <xTaskCreate+0x220>
    1c2e:	c9 da       	rcall	.-2670   	; 0x11c2 <vPortYield>
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	05 c0       	rjmp	.+10     	; 0x1c3e <xTaskCreate+0x226>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <xTaskCreate+0x226>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <xTaskCreate+0x226>
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	bf 90       	pop	r11
    1c50:	af 90       	pop	r10
    1c52:	9f 90       	pop	r9
    1c54:	8f 90       	pop	r8
    1c56:	7f 90       	pop	r7
    1c58:	6f 90       	pop	r6
    1c5a:	5f 90       	pop	r5
    1c5c:	4f 90       	pop	r4
    1c5e:	08 95       	ret

00001c60 <vTaskStartScheduler>:
    1c60:	ef 92       	push	r14
    1c62:	ff 92       	push	r15
    1c64:	0f 93       	push	r16
    1c66:	0f 2e       	mov	r0, r31
    1c68:	f1 e5       	ldi	r31, 0x51	; 81
    1c6a:	ef 2e       	mov	r14, r31
    1c6c:	f2 e2       	ldi	r31, 0x22	; 34
    1c6e:	ff 2e       	mov	r15, r31
    1c70:	f0 2d       	mov	r31, r0
    1c72:	00 e0       	ldi	r16, 0x00	; 0
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	45 e5       	ldi	r20, 0x55	; 85
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	6e e0       	ldi	r22, 0x0E	; 14
    1c7e:	70 e2       	ldi	r23, 0x20	; 32
    1c80:	84 ec       	ldi	r24, 0xC4	; 196
    1c82:	9c e0       	ldi	r25, 0x0C	; 12
    1c84:	c9 de       	rcall	.-622    	; 0x1a18 <xTaskCreate>
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 f4       	brne	.+36     	; 0x1cae <vTaskStartScheduler+0x4e>
    1c8a:	99 d5       	rcall	.+2866   	; 0x27be <xTimerCreateTimerTask>
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	79 f4       	brne	.+30     	; 0x1cae <vTaskStartScheduler+0x4e>
    1c90:	f8 94       	cli
    1c92:	8f ef       	ldi	r24, 0xFF	; 255
    1c94:	9f ef       	ldi	r25, 0xFF	; 255
    1c96:	80 93 53 22 	sts	0x2253, r24	; 0x802253 <xNextTaskUnblockTime>
    1c9a:	90 93 54 22 	sts	0x2254, r25	; 0x802254 <xNextTaskUnblockTime+0x1>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	80 93 5a 22 	sts	0x225A, r24	; 0x80225a <xSchedulerRunning>
    1ca4:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <xTickCount>
    1ca8:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <xTickCount+0x1>
    1cac:	45 da       	rcall	.-2934   	; 0x1138 <xPortStartScheduler>
    1cae:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <uxTopUsedPriority>
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	08 95       	ret

00001cba <vTaskSuspendAll>:
    1cba:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	80 93 50 22 	sts	0x2250, r24	; 0x802250 <uxSchedulerSuspended>
    1cc4:	08 95       	ret

00001cc6 <xTaskGetTickCount>:
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	0f 92       	push	r0
    1ccc:	80 91 5c 22 	lds	r24, 0x225C	; 0x80225c <xTickCount>
    1cd0:	90 91 5d 22 	lds	r25, 0x225D	; 0x80225d <xTickCount+0x1>
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	08 95       	ret

00001cda <xTaskIncrementTick>:
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	01 c1       	rjmp	.+514    	; 0x1eec <xTaskIncrementTick+0x212>
    1cea:	c0 91 5c 22 	lds	r28, 0x225C	; 0x80225c <xTickCount>
    1cee:	d0 91 5d 22 	lds	r29, 0x225D	; 0x80225d <xTickCount+0x1>
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	0f 5f       	subi	r16, 0xFF	; 255
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	00 93 5c 22 	sts	0x225C, r16	; 0x80225c <xTickCount>
    1cfc:	10 93 5d 22 	sts	0x225D, r17	; 0x80225d <xTickCount+0x1>
    1d00:	01 15       	cp	r16, r1
    1d02:	11 05       	cpc	r17, r1
    1d04:	b1 f4       	brne	.+44     	; 0x1d32 <xTaskIncrementTick+0x58>
    1d06:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <pxDelayedTaskList>
    1d0a:	90 91 6b 22 	lds	r25, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    1d0e:	20 91 68 22 	lds	r18, 0x2268	; 0x802268 <pxOverflowDelayedTaskList>
    1d12:	30 91 69 22 	lds	r19, 0x2269	; 0x802269 <pxOverflowDelayedTaskList+0x1>
    1d16:	20 93 6a 22 	sts	0x226A, r18	; 0x80226a <pxDelayedTaskList>
    1d1a:	30 93 6b 22 	sts	0x226B, r19	; 0x80226b <pxDelayedTaskList+0x1>
    1d1e:	80 93 68 22 	sts	0x2268, r24	; 0x802268 <pxOverflowDelayedTaskList>
    1d22:	90 93 69 22 	sts	0x2269, r25	; 0x802269 <pxOverflowDelayedTaskList+0x1>
    1d26:	80 91 56 22 	lds	r24, 0x2256	; 0x802256 <xNumOfOverflows>
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	80 93 56 22 	sts	0x2256, r24	; 0x802256 <xNumOfOverflows>
    1d30:	0f de       	rcall	.-994    	; 0x1950 <prvResetNextTaskUnblockTime>
    1d32:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <xNextTaskUnblockTime>
    1d36:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <xNextTaskUnblockTime+0x1>
    1d3a:	08 17       	cp	r16, r24
    1d3c:	19 07       	cpc	r17, r25
    1d3e:	10 f4       	brcc	.+4      	; 0x1d44 <xTaskIncrementTick+0x6a>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	b8 c0       	rjmp	.+368    	; 0x1eb4 <xTaskIncrementTick+0x1da>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <pxDelayedTaskList>
    1d4a:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    1d4e:	90 81       	ld	r25, Z
    1d50:	91 11       	cpse	r25, r1
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <xTaskIncrementTick+0x88>
    1d54:	2f ef       	ldi	r18, 0xFF	; 255
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	20 93 53 22 	sts	0x2253, r18	; 0x802253 <xNextTaskUnblockTime>
    1d5c:	30 93 54 22 	sts	0x2254, r19	; 0x802254 <xNextTaskUnblockTime+0x1>
    1d60:	a9 c0       	rjmp	.+338    	; 0x1eb4 <xTaskIncrementTick+0x1da>
    1d62:	e0 91 6a 22 	lds	r30, 0x226A	; 0x80226a <pxDelayedTaskList>
    1d66:	f0 91 6b 22 	lds	r31, 0x226B	; 0x80226b <pxDelayedTaskList+0x1>
    1d6a:	05 80       	ldd	r0, Z+5	; 0x05
    1d6c:	f6 81       	ldd	r31, Z+6	; 0x06
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	06 80       	ldd	r0, Z+6	; 0x06
    1d72:	f7 81       	ldd	r31, Z+7	; 0x07
    1d74:	e0 2d       	mov	r30, r0
    1d76:	22 81       	ldd	r18, Z+2	; 0x02
    1d78:	33 81       	ldd	r19, Z+3	; 0x03
    1d7a:	02 17       	cp	r16, r18
    1d7c:	13 07       	cpc	r17, r19
    1d7e:	28 f4       	brcc	.+10     	; 0x1d8a <xTaskIncrementTick+0xb0>
    1d80:	20 93 53 22 	sts	0x2253, r18	; 0x802253 <xNextTaskUnblockTime>
    1d84:	30 93 54 22 	sts	0x2254, r19	; 0x802254 <xNextTaskUnblockTime+0x1>
    1d88:	95 c0       	rjmp	.+298    	; 0x1eb4 <xTaskIncrementTick+0x1da>
    1d8a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d8c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d8e:	24 81       	ldd	r18, Z+4	; 0x04
    1d90:	35 81       	ldd	r19, Z+5	; 0x05
    1d92:	46 81       	ldd	r20, Z+6	; 0x06
    1d94:	57 81       	ldd	r21, Z+7	; 0x07
    1d96:	e9 01       	movw	r28, r18
    1d98:	4c 83       	std	Y+4, r20	; 0x04
    1d9a:	5d 83       	std	Y+5, r21	; 0x05
    1d9c:	26 81       	ldd	r18, Z+6	; 0x06
    1d9e:	37 81       	ldd	r19, Z+7	; 0x07
    1da0:	44 81       	ldd	r20, Z+4	; 0x04
    1da2:	55 81       	ldd	r21, Z+5	; 0x05
    1da4:	e9 01       	movw	r28, r18
    1da6:	4a 83       	std	Y+2, r20	; 0x02
    1da8:	5b 83       	std	Y+3, r21	; 0x03
    1daa:	af 01       	movw	r20, r30
    1dac:	4e 5f       	subi	r20, 0xFE	; 254
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	2d 91       	ld	r18, X+
    1db4:	3c 91       	ld	r19, X
    1db6:	12 97       	sbiw	r26, 0x02	; 2
    1db8:	24 17       	cp	r18, r20
    1dba:	35 07       	cpc	r19, r21
    1dbc:	31 f4       	brne	.+12     	; 0x1dca <xTaskIncrementTick+0xf0>
    1dbe:	26 81       	ldd	r18, Z+6	; 0x06
    1dc0:	37 81       	ldd	r19, Z+7	; 0x07
    1dc2:	11 96       	adiw	r26, 0x01	; 1
    1dc4:	2d 93       	st	X+, r18
    1dc6:	3c 93       	st	X, r19
    1dc8:	12 97       	sbiw	r26, 0x02	; 2
    1dca:	12 86       	std	Z+10, r1	; 0x0a
    1dcc:	13 86       	std	Z+11, r1	; 0x0b
    1dce:	9c 91       	ld	r25, X
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	9c 93       	st	X, r25
    1dd4:	a4 89       	ldd	r26, Z+20	; 0x14
    1dd6:	b5 89       	ldd	r27, Z+21	; 0x15
    1dd8:	10 97       	sbiw	r26, 0x00	; 0
    1dda:	19 f1       	breq	.+70     	; 0x1e22 <xTaskIncrementTick+0x148>
    1ddc:	26 85       	ldd	r18, Z+14	; 0x0e
    1dde:	37 85       	ldd	r19, Z+15	; 0x0f
    1de0:	60 89       	ldd	r22, Z+16	; 0x10
    1de2:	71 89       	ldd	r23, Z+17	; 0x11
    1de4:	e9 01       	movw	r28, r18
    1de6:	6c 83       	std	Y+4, r22	; 0x04
    1de8:	7d 83       	std	Y+5, r23	; 0x05
    1dea:	20 89       	ldd	r18, Z+16	; 0x10
    1dec:	31 89       	ldd	r19, Z+17	; 0x11
    1dee:	66 85       	ldd	r22, Z+14	; 0x0e
    1df0:	77 85       	ldd	r23, Z+15	; 0x0f
    1df2:	e9 01       	movw	r28, r18
    1df4:	6a 83       	std	Y+2, r22	; 0x02
    1df6:	7b 83       	std	Y+3, r23	; 0x03
    1df8:	11 96       	adiw	r26, 0x01	; 1
    1dfa:	6d 91       	ld	r22, X+
    1dfc:	7c 91       	ld	r23, X
    1dfe:	12 97       	sbiw	r26, 0x02	; 2
    1e00:	9f 01       	movw	r18, r30
    1e02:	24 5f       	subi	r18, 0xF4	; 244
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	62 17       	cp	r22, r18
    1e08:	73 07       	cpc	r23, r19
    1e0a:	31 f4       	brne	.+12     	; 0x1e18 <xTaskIncrementTick+0x13e>
    1e0c:	20 89       	ldd	r18, Z+16	; 0x10
    1e0e:	31 89       	ldd	r19, Z+17	; 0x11
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	2d 93       	st	X+, r18
    1e14:	3c 93       	st	X, r19
    1e16:	12 97       	sbiw	r26, 0x02	; 2
    1e18:	14 8a       	std	Z+20, r1	; 0x14
    1e1a:	15 8a       	std	Z+21, r1	; 0x15
    1e1c:	9c 91       	ld	r25, X
    1e1e:	91 50       	subi	r25, 0x01	; 1
    1e20:	9c 93       	st	X, r25
    1e22:	26 89       	ldd	r18, Z+22	; 0x16
    1e24:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <uxTopReadyPriority>
    1e28:	92 17       	cp	r25, r18
    1e2a:	10 f4       	brcc	.+4      	; 0x1e30 <xTaskIncrementTick+0x156>
    1e2c:	20 93 5b 22 	sts	0x225B, r18	; 0x80225b <uxTopReadyPriority>
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	d9 01       	movw	r26, r18
    1e34:	aa 0f       	add	r26, r26
    1e36:	bb 1f       	adc	r27, r27
    1e38:	aa 0f       	add	r26, r26
    1e3a:	bb 1f       	adc	r27, r27
    1e3c:	aa 0f       	add	r26, r26
    1e3e:	bb 1f       	adc	r27, r27
    1e40:	2a 0f       	add	r18, r26
    1e42:	3b 1f       	adc	r19, r27
    1e44:	d9 01       	movw	r26, r18
    1e46:	a2 58       	subi	r26, 0x82	; 130
    1e48:	bd 4d       	sbci	r27, 0xDD	; 221
    1e4a:	11 96       	adiw	r26, 0x01	; 1
    1e4c:	0d 90       	ld	r0, X+
    1e4e:	bc 91       	ld	r27, X
    1e50:	a0 2d       	mov	r26, r0
    1e52:	a4 83       	std	Z+4, r26	; 0x04
    1e54:	b5 83       	std	Z+5, r27	; 0x05
    1e56:	14 96       	adiw	r26, 0x04	; 4
    1e58:	2d 91       	ld	r18, X+
    1e5a:	3c 91       	ld	r19, X
    1e5c:	15 97       	sbiw	r26, 0x05	; 5
    1e5e:	26 83       	std	Z+6, r18	; 0x06
    1e60:	37 83       	std	Z+7, r19	; 0x07
    1e62:	14 96       	adiw	r26, 0x04	; 4
    1e64:	2d 91       	ld	r18, X+
    1e66:	3c 91       	ld	r19, X
    1e68:	15 97       	sbiw	r26, 0x05	; 5
    1e6a:	e9 01       	movw	r28, r18
    1e6c:	4a 83       	std	Y+2, r20	; 0x02
    1e6e:	5b 83       	std	Y+3, r21	; 0x03
    1e70:	14 96       	adiw	r26, 0x04	; 4
    1e72:	4d 93       	st	X+, r20
    1e74:	5c 93       	st	X, r21
    1e76:	15 97       	sbiw	r26, 0x05	; 5
    1e78:	a6 89       	ldd	r26, Z+22	; 0x16
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	9d 01       	movw	r18, r26
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	22 0f       	add	r18, r18
    1e84:	33 1f       	adc	r19, r19
    1e86:	22 0f       	add	r18, r18
    1e88:	33 1f       	adc	r19, r19
    1e8a:	a2 0f       	add	r26, r18
    1e8c:	b3 1f       	adc	r27, r19
    1e8e:	a2 58       	subi	r26, 0x82	; 130
    1e90:	bd 4d       	sbci	r27, 0xDD	; 221
    1e92:	a2 87       	std	Z+10, r26	; 0x0a
    1e94:	b3 87       	std	Z+11, r27	; 0x0b
    1e96:	9c 91       	ld	r25, X
    1e98:	9f 5f       	subi	r25, 0xFF	; 255
    1e9a:	9c 93       	st	X, r25
    1e9c:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1ea0:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1ea4:	26 89       	ldd	r18, Z+22	; 0x16
    1ea6:	56 96       	adiw	r26, 0x16	; 22
    1ea8:	9c 91       	ld	r25, X
    1eaa:	29 17       	cp	r18, r25
    1eac:	08 f4       	brcc	.+2      	; 0x1eb0 <xTaskIncrementTick+0x1d6>
    1eae:	4b cf       	rjmp	.-362    	; 0x1d46 <xTaskIncrementTick+0x6c>
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	49 cf       	rjmp	.-366    	; 0x1d46 <xTaskIncrementTick+0x6c>
    1eb4:	e0 91 ab 22 	lds	r30, 0x22AB	; 0x8022ab <pxCurrentTCB>
    1eb8:	f0 91 ac 22 	lds	r31, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    1ebc:	26 89       	ldd	r18, Z+22	; 0x16
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	ee 0f       	add	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	2e 0f       	add	r18, r30
    1ed0:	3f 1f       	adc	r19, r31
    1ed2:	f9 01       	movw	r30, r18
    1ed4:	e2 58       	subi	r30, 0x82	; 130
    1ed6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ed8:	90 81       	ld	r25, Z
    1eda:	92 30       	cpi	r25, 0x02	; 2
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <xTaskIncrementTick+0x206>
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 91 57 22 	lds	r25, 0x2257	; 0x802257 <xYieldPending>
    1ee4:	99 23       	and	r25, r25
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <xTaskIncrementTick+0x226>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <xTaskIncrementTick+0x226>
    1eec:	80 91 58 22 	lds	r24, 0x2258	; 0x802258 <xPendedTicks>
    1ef0:	90 91 59 22 	lds	r25, 0x2259	; 0x802259 <xPendedTicks+0x1>
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	80 93 58 22 	sts	0x2258, r24	; 0x802258 <xPendedTicks>
    1efa:	90 93 59 22 	sts	0x2259, r25	; 0x802259 <xPendedTicks+0x1>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	08 95       	ret

00001f0a <xTaskResumeAll>:
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	0f 92       	push	r0
    1f16:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    1f1a:	81 50       	subi	r24, 0x01	; 1
    1f1c:	80 93 50 22 	sts	0x2250, r24	; 0x802250 <uxSchedulerSuspended>
    1f20:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    1f24:	81 11       	cpse	r24, r1
    1f26:	c3 c0       	rjmp	.+390    	; 0x20ae <xTaskResumeAll+0x1a4>
    1f28:	80 91 5e 22 	lds	r24, 0x225E	; 0x80225e <uxCurrentNumberOfTasks>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	9b c0       	rjmp	.+310    	; 0x2066 <xTaskResumeAll+0x15c>
    1f30:	c1 c0       	rjmp	.+386    	; 0x20b4 <xTaskResumeAll+0x1aa>
    1f32:	db 01       	movw	r26, r22
    1f34:	15 96       	adiw	r26, 0x05	; 5
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	16 97       	sbiw	r26, 0x06	; 6
    1f3c:	06 80       	ldd	r0, Z+6	; 0x06
    1f3e:	f7 81       	ldd	r31, Z+7	; 0x07
    1f40:	e0 2d       	mov	r30, r0
    1f42:	a4 89       	ldd	r26, Z+20	; 0x14
    1f44:	b5 89       	ldd	r27, Z+21	; 0x15
    1f46:	86 85       	ldd	r24, Z+14	; 0x0e
    1f48:	97 85       	ldd	r25, Z+15	; 0x0f
    1f4a:	20 89       	ldd	r18, Z+16	; 0x10
    1f4c:	31 89       	ldd	r19, Z+17	; 0x11
    1f4e:	ec 01       	movw	r28, r24
    1f50:	2c 83       	std	Y+4, r18	; 0x04
    1f52:	3d 83       	std	Y+5, r19	; 0x05
    1f54:	80 89       	ldd	r24, Z+16	; 0x10
    1f56:	91 89       	ldd	r25, Z+17	; 0x11
    1f58:	26 85       	ldd	r18, Z+14	; 0x0e
    1f5a:	37 85       	ldd	r19, Z+15	; 0x0f
    1f5c:	ec 01       	movw	r28, r24
    1f5e:	2a 83       	std	Y+2, r18	; 0x02
    1f60:	3b 83       	std	Y+3, r19	; 0x03
    1f62:	cf 01       	movw	r24, r30
    1f64:	0c 96       	adiw	r24, 0x0c	; 12
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	2d 91       	ld	r18, X+
    1f6a:	3c 91       	ld	r19, X
    1f6c:	12 97       	sbiw	r26, 0x02	; 2
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	31 f4       	brne	.+12     	; 0x1f80 <xTaskResumeAll+0x76>
    1f74:	80 89       	ldd	r24, Z+16	; 0x10
    1f76:	91 89       	ldd	r25, Z+17	; 0x11
    1f78:	11 96       	adiw	r26, 0x01	; 1
    1f7a:	8d 93       	st	X+, r24
    1f7c:	9c 93       	st	X, r25
    1f7e:	12 97       	sbiw	r26, 0x02	; 2
    1f80:	14 8a       	std	Z+20, r1	; 0x14
    1f82:	15 8a       	std	Z+21, r1	; 0x15
    1f84:	8c 91       	ld	r24, X
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	8c 93       	st	X, r24
    1f8a:	a2 85       	ldd	r26, Z+10	; 0x0a
    1f8c:	b3 85       	ldd	r27, Z+11	; 0x0b
    1f8e:	84 81       	ldd	r24, Z+4	; 0x04
    1f90:	95 81       	ldd	r25, Z+5	; 0x05
    1f92:	26 81       	ldd	r18, Z+6	; 0x06
    1f94:	37 81       	ldd	r19, Z+7	; 0x07
    1f96:	ec 01       	movw	r28, r24
    1f98:	2c 83       	std	Y+4, r18	; 0x04
    1f9a:	3d 83       	std	Y+5, r19	; 0x05
    1f9c:	86 81       	ldd	r24, Z+6	; 0x06
    1f9e:	97 81       	ldd	r25, Z+7	; 0x07
    1fa0:	24 81       	ldd	r18, Z+4	; 0x04
    1fa2:	35 81       	ldd	r19, Z+5	; 0x05
    1fa4:	ec 01       	movw	r28, r24
    1fa6:	2a 83       	std	Y+2, r18	; 0x02
    1fa8:	3b 83       	std	Y+3, r19	; 0x03
    1faa:	9f 01       	movw	r18, r30
    1fac:	2e 5f       	subi	r18, 0xFE	; 254
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	8d 91       	ld	r24, X+
    1fb4:	9c 91       	ld	r25, X
    1fb6:	12 97       	sbiw	r26, 0x02	; 2
    1fb8:	82 17       	cp	r24, r18
    1fba:	93 07       	cpc	r25, r19
    1fbc:	31 f4       	brne	.+12     	; 0x1fca <xTaskResumeAll+0xc0>
    1fbe:	86 81       	ldd	r24, Z+6	; 0x06
    1fc0:	97 81       	ldd	r25, Z+7	; 0x07
    1fc2:	11 96       	adiw	r26, 0x01	; 1
    1fc4:	8d 93       	st	X+, r24
    1fc6:	9c 93       	st	X, r25
    1fc8:	12 97       	sbiw	r26, 0x02	; 2
    1fca:	12 86       	std	Z+10, r1	; 0x0a
    1fcc:	13 86       	std	Z+11, r1	; 0x0b
    1fce:	8c 91       	ld	r24, X
    1fd0:	81 50       	subi	r24, 0x01	; 1
    1fd2:	8c 93       	st	X, r24
    1fd4:	86 89       	ldd	r24, Z+22	; 0x16
    1fd6:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <uxTopReadyPriority>
    1fda:	98 17       	cp	r25, r24
    1fdc:	10 f4       	brcc	.+4      	; 0x1fe2 <xTaskResumeAll+0xd8>
    1fde:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <uxTopReadyPriority>
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	aa 0f       	add	r26, r26
    1fe8:	bb 1f       	adc	r27, r27
    1fea:	aa 0f       	add	r26, r26
    1fec:	bb 1f       	adc	r27, r27
    1fee:	aa 0f       	add	r26, r26
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	8a 0f       	add	r24, r26
    1ff4:	9b 1f       	adc	r25, r27
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	a2 58       	subi	r26, 0x82	; 130
    1ffa:	bd 4d       	sbci	r27, 0xDD	; 221
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	0d 90       	ld	r0, X+
    2000:	bc 91       	ld	r27, X
    2002:	a0 2d       	mov	r26, r0
    2004:	a4 83       	std	Z+4, r26	; 0x04
    2006:	b5 83       	std	Z+5, r27	; 0x05
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	8d 91       	ld	r24, X+
    200c:	9c 91       	ld	r25, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	86 83       	std	Z+6, r24	; 0x06
    2012:	97 83       	std	Z+7, r25	; 0x07
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	8d 91       	ld	r24, X+
    2018:	9c 91       	ld	r25, X
    201a:	15 97       	sbiw	r26, 0x05	; 5
    201c:	ec 01       	movw	r28, r24
    201e:	2a 83       	std	Y+2, r18	; 0x02
    2020:	3b 83       	std	Y+3, r19	; 0x03
    2022:	14 96       	adiw	r26, 0x04	; 4
    2024:	2d 93       	st	X+, r18
    2026:	3c 93       	st	X, r19
    2028:	15 97       	sbiw	r26, 0x05	; 5
    202a:	a6 89       	ldd	r26, Z+22	; 0x16
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	cd 01       	movw	r24, r26
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	a8 0f       	add	r26, r24
    203e:	b9 1f       	adc	r27, r25
    2040:	a2 58       	subi	r26, 0x82	; 130
    2042:	bd 4d       	sbci	r27, 0xDD	; 221
    2044:	a2 87       	std	Z+10, r26	; 0x0a
    2046:	b3 87       	std	Z+11, r27	; 0x0b
    2048:	8c 91       	ld	r24, X
    204a:	8f 5f       	subi	r24, 0xFF	; 255
    204c:	8c 93       	st	X, r24
    204e:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    2052:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    2056:	96 89       	ldd	r25, Z+22	; 0x16
    2058:	56 96       	adiw	r26, 0x16	; 22
    205a:	8c 91       	ld	r24, X
    205c:	98 17       	cp	r25, r24
    205e:	40 f0       	brcs	.+16     	; 0x2070 <xTaskResumeAll+0x166>
    2060:	40 93 57 22 	sts	0x2257, r20	; 0x802257 <xYieldPending>
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <xTaskResumeAll+0x166>
    2066:	e0 e0       	ldi	r30, 0x00	; 0
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	6f e5       	ldi	r22, 0x5F	; 95
    206c:	72 e2       	ldi	r23, 0x22	; 34
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	db 01       	movw	r26, r22
    2072:	8c 91       	ld	r24, X
    2074:	81 11       	cpse	r24, r1
    2076:	5d cf       	rjmp	.-326    	; 0x1f32 <xTaskResumeAll+0x28>
    2078:	ef 2b       	or	r30, r31
    207a:	09 f0       	breq	.+2      	; 0x207e <xTaskResumeAll+0x174>
    207c:	69 dc       	rcall	.-1838   	; 0x1950 <prvResetNextTaskUnblockTime>
    207e:	c0 91 58 22 	lds	r28, 0x2258	; 0x802258 <xPendedTicks>
    2082:	d0 91 59 22 	lds	r29, 0x2259	; 0x802259 <xPendedTicks+0x1>
    2086:	20 97       	sbiw	r28, 0x00	; 0
    2088:	59 f0       	breq	.+22     	; 0x20a0 <xTaskResumeAll+0x196>
    208a:	11 e0       	ldi	r17, 0x01	; 1
    208c:	26 de       	rcall	.-948    	; 0x1cda <xTaskIncrementTick>
    208e:	81 11       	cpse	r24, r1
    2090:	10 93 57 22 	sts	0x2257, r17	; 0x802257 <xYieldPending>
    2094:	21 97       	sbiw	r28, 0x01	; 1
    2096:	d1 f7       	brne	.-12     	; 0x208c <xTaskResumeAll+0x182>
    2098:	10 92 58 22 	sts	0x2258, r1	; 0x802258 <xPendedTicks>
    209c:	10 92 59 22 	sts	0x2259, r1	; 0x802259 <xPendedTicks+0x1>
    20a0:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <xYieldPending>
    20a4:	88 23       	and	r24, r24
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <xTaskResumeAll+0x1a8>
    20a8:	8c d8       	rcall	.-3816   	; 0x11c2 <vPortYield>
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <xTaskResumeAll+0x1aa>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <xTaskResumeAll+0x1aa>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	08 95       	ret

000020c0 <vTaskDelay>:
    20c0:	cf 93       	push	r28
    20c2:	df 93       	push	r29
    20c4:	ec 01       	movw	r28, r24
    20c6:	89 2b       	or	r24, r25
    20c8:	39 f0       	breq	.+14     	; 0x20d8 <vTaskDelay+0x18>
    20ca:	f7 dd       	rcall	.-1042   	; 0x1cba <vTaskSuspendAll>
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	ce 01       	movw	r24, r28
    20d0:	62 dc       	rcall	.-1852   	; 0x1996 <prvAddCurrentTaskToDelayedList>
    20d2:	1b df       	rcall	.-458    	; 0x1f0a <xTaskResumeAll>
    20d4:	81 11       	cpse	r24, r1
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <vTaskDelay+0x1a>
    20d8:	74 d8       	rcall	.-3864   	; 0x11c2 <vPortYield>
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	08 95       	ret

000020e0 <vTaskSwitchContext>:
    20e0:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    20e4:	88 23       	and	r24, r24
    20e6:	21 f0       	breq	.+8      	; 0x20f0 <vTaskSwitchContext+0x10>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <xYieldPending>
    20ee:	08 95       	ret
    20f0:	10 92 57 22 	sts	0x2257, r1	; 0x802257 <xYieldPending>
    20f4:	20 91 5b 22 	lds	r18, 0x225B	; 0x80225b <uxTopReadyPriority>
    20f8:	82 2f       	mov	r24, r18
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e8 0f       	add	r30, r24
    210c:	f9 1f       	adc	r31, r25
    210e:	e2 58       	subi	r30, 0x82	; 130
    2110:	fd 4d       	sbci	r31, 0xDD	; 221
    2112:	30 81       	ld	r19, Z
    2114:	31 11       	cpse	r19, r1
    2116:	11 c0       	rjmp	.+34     	; 0x213a <vTaskSwitchContext+0x5a>
    2118:	21 50       	subi	r18, 0x01	; 1
    211a:	82 2f       	mov	r24, r18
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	fc 01       	movw	r30, r24
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	ee 0f       	add	r30, r30
    212a:	ff 1f       	adc	r31, r31
    212c:	e8 0f       	add	r30, r24
    212e:	f9 1f       	adc	r31, r25
    2130:	e2 58       	subi	r30, 0x82	; 130
    2132:	fd 4d       	sbci	r31, 0xDD	; 221
    2134:	30 81       	ld	r19, Z
    2136:	33 23       	and	r19, r19
    2138:	79 f3       	breq	.-34     	; 0x2118 <vTaskSwitchContext+0x38>
    213a:	ac 01       	movw	r20, r24
    213c:	44 0f       	add	r20, r20
    213e:	55 1f       	adc	r21, r21
    2140:	44 0f       	add	r20, r20
    2142:	55 1f       	adc	r21, r21
    2144:	44 0f       	add	r20, r20
    2146:	55 1f       	adc	r21, r21
    2148:	48 0f       	add	r20, r24
    214a:	59 1f       	adc	r21, r25
    214c:	da 01       	movw	r26, r20
    214e:	a2 58       	subi	r26, 0x82	; 130
    2150:	bd 4d       	sbci	r27, 0xDD	; 221
    2152:	11 96       	adiw	r26, 0x01	; 1
    2154:	ed 91       	ld	r30, X+
    2156:	fc 91       	ld	r31, X
    2158:	12 97       	sbiw	r26, 0x02	; 2
    215a:	02 80       	ldd	r0, Z+2	; 0x02
    215c:	f3 81       	ldd	r31, Z+3	; 0x03
    215e:	e0 2d       	mov	r30, r0
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	ed 93       	st	X+, r30
    2164:	fc 93       	st	X, r31
    2166:	12 97       	sbiw	r26, 0x02	; 2
    2168:	4f 57       	subi	r20, 0x7F	; 127
    216a:	5d 4d       	sbci	r21, 0xDD	; 221
    216c:	e4 17       	cp	r30, r20
    216e:	f5 07       	cpc	r31, r21
    2170:	29 f4       	brne	.+10     	; 0x217c <vTaskSwitchContext+0x9c>
    2172:	42 81       	ldd	r20, Z+2	; 0x02
    2174:	53 81       	ldd	r21, Z+3	; 0x03
    2176:	fd 01       	movw	r30, r26
    2178:	41 83       	std	Z+1, r20	; 0x01
    217a:	52 83       	std	Z+2, r21	; 0x02
    217c:	fc 01       	movw	r30, r24
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	8e 0f       	add	r24, r30
    218c:	9f 1f       	adc	r25, r31
    218e:	fc 01       	movw	r30, r24
    2190:	e2 58       	subi	r30, 0x82	; 130
    2192:	fd 4d       	sbci	r31, 0xDD	; 221
    2194:	01 80       	ldd	r0, Z+1	; 0x01
    2196:	f2 81       	ldd	r31, Z+2	; 0x02
    2198:	e0 2d       	mov	r30, r0
    219a:	86 81       	ldd	r24, Z+6	; 0x06
    219c:	97 81       	ldd	r25, Z+7	; 0x07
    219e:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <pxCurrentTCB>
    21a2:	90 93 ac 22 	sts	0x22AC, r25	; 0x8022ac <pxCurrentTCB+0x1>
    21a6:	20 93 5b 22 	sts	0x225B, r18	; 0x80225b <uxTopReadyPriority>
    21aa:	08 95       	ret

000021ac <vTaskPlaceOnEventList>:
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	eb 01       	movw	r28, r22
    21b2:	60 91 ab 22 	lds	r22, 0x22AB	; 0x8022ab <pxCurrentTCB>
    21b6:	70 91 ac 22 	lds	r23, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    21ba:	64 5f       	subi	r22, 0xF4	; 244
    21bc:	7f 4f       	sbci	r23, 0xFF	; 255
    21be:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInsert>
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	ce 01       	movw	r24, r28
    21c6:	e7 db       	rcall	.-2098   	; 0x1996 <prvAddCurrentTaskToDelayedList>
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <vTaskPlaceOnEventListRestricted>:
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29
    21d6:	fc 01       	movw	r30, r24
    21d8:	8b 01       	movw	r16, r22
    21da:	a1 81       	ldd	r26, Z+1	; 0x01
    21dc:	b2 81       	ldd	r27, Z+2	; 0x02
    21de:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxCurrentTCB>
    21e2:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    21e6:	ec 01       	movw	r28, r24
    21e8:	ae 87       	std	Y+14, r26	; 0x0e
    21ea:	bf 87       	std	Y+15, r27	; 0x0f
    21ec:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <pxCurrentTCB>
    21f0:	90 91 ac 22 	lds	r25, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    21f4:	14 96       	adiw	r26, 0x04	; 4
    21f6:	2d 91       	ld	r18, X+
    21f8:	3c 91       	ld	r19, X
    21fa:	15 97       	sbiw	r26, 0x05	; 5
    21fc:	ec 01       	movw	r28, r24
    21fe:	28 8b       	std	Y+16, r18	; 0x10
    2200:	39 8b       	std	Y+17, r19	; 0x11
    2202:	14 96       	adiw	r26, 0x04	; 4
    2204:	8d 91       	ld	r24, X+
    2206:	9c 91       	ld	r25, X
    2208:	15 97       	sbiw	r26, 0x05	; 5
    220a:	20 91 ab 22 	lds	r18, 0x22AB	; 0x8022ab <pxCurrentTCB>
    220e:	30 91 ac 22 	lds	r19, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    2212:	24 5f       	subi	r18, 0xF4	; 244
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	ec 01       	movw	r28, r24
    2218:	2a 83       	std	Y+2, r18	; 0x02
    221a:	3b 83       	std	Y+3, r19	; 0x03
    221c:	20 91 ab 22 	lds	r18, 0x22AB	; 0x8022ab <pxCurrentTCB>
    2220:	30 91 ac 22 	lds	r19, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    2224:	24 5f       	subi	r18, 0xF4	; 244
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	14 96       	adiw	r26, 0x04	; 4
    222a:	2d 93       	st	X+, r18
    222c:	3c 93       	st	X, r19
    222e:	15 97       	sbiw	r26, 0x05	; 5
    2230:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    2234:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    2238:	54 96       	adiw	r26, 0x14	; 20
    223a:	ed 93       	st	X+, r30
    223c:	fc 93       	st	X, r31
    223e:	55 97       	sbiw	r26, 0x15	; 21
    2240:	90 81       	ld	r25, Z
    2242:	9f 5f       	subi	r25, 0xFF	; 255
    2244:	90 83       	st	Z, r25
    2246:	44 23       	and	r20, r20
    2248:	11 f0       	breq	.+4      	; 0x224e <vTaskPlaceOnEventListRestricted+0x80>
    224a:	0f ef       	ldi	r16, 0xFF	; 255
    224c:	1f ef       	ldi	r17, 0xFF	; 255
    224e:	64 2f       	mov	r22, r20
    2250:	c8 01       	movw	r24, r16
    2252:	a1 db       	rcall	.-2238   	; 0x1996 <prvAddCurrentTaskToDelayedList>
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <xTaskRemoveFromEventList>:
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	dc 01       	movw	r26, r24
    2264:	15 96       	adiw	r26, 0x05	; 5
    2266:	ed 91       	ld	r30, X+
    2268:	fc 91       	ld	r31, X
    226a:	16 97       	sbiw	r26, 0x06	; 6
    226c:	06 80       	ldd	r0, Z+6	; 0x06
    226e:	f7 81       	ldd	r31, Z+7	; 0x07
    2270:	e0 2d       	mov	r30, r0
    2272:	a4 89       	ldd	r26, Z+20	; 0x14
    2274:	b5 89       	ldd	r27, Z+21	; 0x15
    2276:	c6 85       	ldd	r28, Z+14	; 0x0e
    2278:	d7 85       	ldd	r29, Z+15	; 0x0f
    227a:	80 89       	ldd	r24, Z+16	; 0x10
    227c:	91 89       	ldd	r25, Z+17	; 0x11
    227e:	8c 83       	std	Y+4, r24	; 0x04
    2280:	9d 83       	std	Y+5, r25	; 0x05
    2282:	c0 89       	ldd	r28, Z+16	; 0x10
    2284:	d1 89       	ldd	r29, Z+17	; 0x11
    2286:	86 85       	ldd	r24, Z+14	; 0x0e
    2288:	97 85       	ldd	r25, Z+15	; 0x0f
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	9b 83       	std	Y+3, r25	; 0x03
    228e:	9f 01       	movw	r18, r30
    2290:	24 5f       	subi	r18, 0xF4	; 244
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	11 96       	adiw	r26, 0x01	; 1
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	12 97       	sbiw	r26, 0x02	; 2
    229c:	82 17       	cp	r24, r18
    229e:	93 07       	cpc	r25, r19
    22a0:	31 f4       	brne	.+12     	; 0x22ae <xTaskRemoveFromEventList+0x50>
    22a2:	80 89       	ldd	r24, Z+16	; 0x10
    22a4:	91 89       	ldd	r25, Z+17	; 0x11
    22a6:	11 96       	adiw	r26, 0x01	; 1
    22a8:	8d 93       	st	X+, r24
    22aa:	9c 93       	st	X, r25
    22ac:	12 97       	sbiw	r26, 0x02	; 2
    22ae:	14 8a       	std	Z+20, r1	; 0x14
    22b0:	15 8a       	std	Z+21, r1	; 0x15
    22b2:	8c 91       	ld	r24, X
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	8c 93       	st	X, r24
    22b8:	80 91 50 22 	lds	r24, 0x2250	; 0x802250 <uxSchedulerSuspended>
    22bc:	81 11       	cpse	r24, r1
    22be:	60 c0       	rjmp	.+192    	; 0x2380 <xTaskRemoveFromEventList+0x122>
    22c0:	a2 85       	ldd	r26, Z+10	; 0x0a
    22c2:	b3 85       	ldd	r27, Z+11	; 0x0b
    22c4:	c4 81       	ldd	r28, Z+4	; 0x04
    22c6:	d5 81       	ldd	r29, Z+5	; 0x05
    22c8:	86 81       	ldd	r24, Z+6	; 0x06
    22ca:	97 81       	ldd	r25, Z+7	; 0x07
    22cc:	8c 83       	std	Y+4, r24	; 0x04
    22ce:	9d 83       	std	Y+5, r25	; 0x05
    22d0:	c6 81       	ldd	r28, Z+6	; 0x06
    22d2:	d7 81       	ldd	r29, Z+7	; 0x07
    22d4:	84 81       	ldd	r24, Z+4	; 0x04
    22d6:	95 81       	ldd	r25, Z+5	; 0x05
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	9b 83       	std	Y+3, r25	; 0x03
    22dc:	9f 01       	movw	r18, r30
    22de:	2e 5f       	subi	r18, 0xFE	; 254
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	11 96       	adiw	r26, 0x01	; 1
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	12 97       	sbiw	r26, 0x02	; 2
    22ea:	82 17       	cp	r24, r18
    22ec:	93 07       	cpc	r25, r19
    22ee:	31 f4       	brne	.+12     	; 0x22fc <xTaskRemoveFromEventList+0x9e>
    22f0:	86 81       	ldd	r24, Z+6	; 0x06
    22f2:	97 81       	ldd	r25, Z+7	; 0x07
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	8d 93       	st	X+, r24
    22f8:	9c 93       	st	X, r25
    22fa:	12 97       	sbiw	r26, 0x02	; 2
    22fc:	12 86       	std	Z+10, r1	; 0x0a
    22fe:	13 86       	std	Z+11, r1	; 0x0b
    2300:	8c 91       	ld	r24, X
    2302:	81 50       	subi	r24, 0x01	; 1
    2304:	8c 93       	st	X, r24
    2306:	86 89       	ldd	r24, Z+22	; 0x16
    2308:	90 91 5b 22 	lds	r25, 0x225B	; 0x80225b <uxTopReadyPriority>
    230c:	98 17       	cp	r25, r24
    230e:	10 f4       	brcc	.+4      	; 0x2314 <xTaskRemoveFromEventList+0xb6>
    2310:	80 93 5b 22 	sts	0x225B, r24	; 0x80225b <uxTopReadyPriority>
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	dc 01       	movw	r26, r24
    2318:	aa 0f       	add	r26, r26
    231a:	bb 1f       	adc	r27, r27
    231c:	aa 0f       	add	r26, r26
    231e:	bb 1f       	adc	r27, r27
    2320:	aa 0f       	add	r26, r26
    2322:	bb 1f       	adc	r27, r27
    2324:	8a 0f       	add	r24, r26
    2326:	9b 1f       	adc	r25, r27
    2328:	dc 01       	movw	r26, r24
    232a:	a2 58       	subi	r26, 0x82	; 130
    232c:	bd 4d       	sbci	r27, 0xDD	; 221
    232e:	11 96       	adiw	r26, 0x01	; 1
    2330:	0d 90       	ld	r0, X+
    2332:	bc 91       	ld	r27, X
    2334:	a0 2d       	mov	r26, r0
    2336:	a4 83       	std	Z+4, r26	; 0x04
    2338:	b5 83       	std	Z+5, r27	; 0x05
    233a:	14 96       	adiw	r26, 0x04	; 4
    233c:	8d 91       	ld	r24, X+
    233e:	9c 91       	ld	r25, X
    2340:	15 97       	sbiw	r26, 0x05	; 5
    2342:	86 83       	std	Z+6, r24	; 0x06
    2344:	97 83       	std	Z+7, r25	; 0x07
    2346:	14 96       	adiw	r26, 0x04	; 4
    2348:	cd 91       	ld	r28, X+
    234a:	dc 91       	ld	r29, X
    234c:	15 97       	sbiw	r26, 0x05	; 5
    234e:	2a 83       	std	Y+2, r18	; 0x02
    2350:	3b 83       	std	Y+3, r19	; 0x03
    2352:	14 96       	adiw	r26, 0x04	; 4
    2354:	2d 93       	st	X+, r18
    2356:	3c 93       	st	X, r19
    2358:	15 97       	sbiw	r26, 0x05	; 5
    235a:	a6 89       	ldd	r26, Z+22	; 0x16
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	cd 01       	movw	r24, r26
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	a8 0f       	add	r26, r24
    236e:	b9 1f       	adc	r27, r25
    2370:	a2 58       	subi	r26, 0x82	; 130
    2372:	bd 4d       	sbci	r27, 0xDD	; 221
    2374:	a2 87       	std	Z+10, r26	; 0x0a
    2376:	b3 87       	std	Z+11, r27	; 0x0b
    2378:	8c 91       	ld	r24, X
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	8c 93       	st	X, r24
    237e:	1c c0       	rjmp	.+56     	; 0x23b8 <xTaskRemoveFromEventList+0x15a>
    2380:	4f e5       	ldi	r20, 0x5F	; 95
    2382:	52 e2       	ldi	r21, 0x22	; 34
    2384:	da 01       	movw	r26, r20
    2386:	11 96       	adiw	r26, 0x01	; 1
    2388:	cd 91       	ld	r28, X+
    238a:	dc 91       	ld	r29, X
    238c:	12 97       	sbiw	r26, 0x02	; 2
    238e:	c6 87       	std	Z+14, r28	; 0x0e
    2390:	d7 87       	std	Z+15, r29	; 0x0f
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	80 8b       	std	Z+16, r24	; 0x10
    2398:	91 8b       	std	Z+17, r25	; 0x11
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	dc 01       	movw	r26, r24
    23a0:	12 96       	adiw	r26, 0x02	; 2
    23a2:	2d 93       	st	X+, r18
    23a4:	3c 93       	st	X, r19
    23a6:	13 97       	sbiw	r26, 0x03	; 3
    23a8:	2c 83       	std	Y+4, r18	; 0x04
    23aa:	3d 83       	std	Y+5, r19	; 0x05
    23ac:	44 8b       	std	Z+20, r20	; 0x14
    23ae:	55 8b       	std	Z+21, r21	; 0x15
    23b0:	da 01       	movw	r26, r20
    23b2:	8c 91       	ld	r24, X
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	8c 93       	st	X, r24
    23b8:	a0 91 ab 22 	lds	r26, 0x22AB	; 0x8022ab <pxCurrentTCB>
    23bc:	b0 91 ac 22 	lds	r27, 0x22AC	; 0x8022ac <pxCurrentTCB+0x1>
    23c0:	96 89       	ldd	r25, Z+22	; 0x16
    23c2:	56 96       	adiw	r26, 0x16	; 22
    23c4:	8c 91       	ld	r24, X
    23c6:	89 17       	cp	r24, r25
    23c8:	20 f4       	brcc	.+8      	; 0x23d2 <xTaskRemoveFromEventList+0x174>
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <xYieldPending>
    23d0:	01 c0       	rjmp	.+2      	; 0x23d4 <xTaskRemoveFromEventList+0x176>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	df 91       	pop	r29
    23d6:	cf 91       	pop	r28
    23d8:	08 95       	ret

000023da <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    23da:	20 91 56 22 	lds	r18, 0x2256	; 0x802256 <xNumOfOverflows>
    23de:	fc 01       	movw	r30, r24
    23e0:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    23e2:	20 91 5c 22 	lds	r18, 0x225C	; 0x80225c <xTickCount>
    23e6:	30 91 5d 22 	lds	r19, 0x225D	; 0x80225d <xTickCount+0x1>
    23ea:	21 83       	std	Z+1, r18	; 0x01
    23ec:	32 83       	std	Z+2, r19	; 0x02
    23ee:	08 95       	ret

000023f0 <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    23f6:	20 91 5c 22 	lds	r18, 0x225C	; 0x80225c <xTickCount>
    23fa:	30 91 5d 22 	lds	r19, 0x225D	; 0x80225d <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    23fe:	dc 01       	movw	r26, r24
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	4d 91       	ld	r20, X+
    2404:	5c 91       	ld	r21, X
    2406:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2408:	e0 91 56 22 	lds	r30, 0x2256	; 0x802256 <xNumOfOverflows>
    240c:	fc 91       	ld	r31, X
    240e:	fe 17       	cp	r31, r30
    2410:	41 f0       	breq	.+16     	; 0x2422 <xTaskCheckForTimeOut+0x32>
    2412:	24 17       	cp	r18, r20
    2414:	35 07       	cpc	r19, r21
    2416:	28 f0       	brcs	.+10     	; 0x2422 <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    2418:	fb 01       	movw	r30, r22
    241a:	10 82       	st	Z, r1
    241c:	11 82       	std	Z+1, r1	; 0x01
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    241e:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    2420:	14 c0       	rjmp	.+40     	; 0x244a <xTaskCheckForTimeOut+0x5a>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    2422:	24 1b       	sub	r18, r20
    2424:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    2426:	db 01       	movw	r26, r22
    2428:	4d 91       	ld	r20, X+
    242a:	5c 91       	ld	r21, X
    242c:	24 17       	cp	r18, r20
    242e:	35 07       	cpc	r19, r21
    2430:	40 f4       	brcc	.+16     	; 0x2442 <xTaskCheckForTimeOut+0x52>
    2432:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    2434:	42 1b       	sub	r20, r18
    2436:	53 0b       	sbc	r21, r19
    2438:	40 83       	st	Z, r20
    243a:	51 83       	std	Z+1, r21	; 0x01
            vTaskInternalSetTimeOutState( pxTimeOut );
    243c:	ce df       	rcall	.-100    	; 0x23da <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	04 c0       	rjmp	.+8      	; 0x244a <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    2442:	fb 01       	movw	r30, r22
    2444:	10 82       	st	Z, r1
    2446:	11 82       	std	Z+1, r1	; 0x01
            xReturn = pdTRUE;
    2448:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    244a:	0f 90       	pop	r0
    244c:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    244e:	08 95       	ret

00002450 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <xYieldPending>
    2456:	08 95       	ret

00002458 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    2458:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    245a:	62 83       	std	Z+2, r22	; 0x02
    245c:	73 83       	std	Z+3, r23	; 0x03
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    245e:	80 87       	std	Z+8, r24	; 0x08
    2460:	91 87       	std	Z+9, r25	; 0x09

        if( xNextExpiryTime <= xTimeNow )
    2462:	46 17       	cp	r20, r22
    2464:	57 07       	cpc	r21, r23
    2466:	90 f0       	brcs	.+36     	; 0x248c <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2468:	42 1b       	sub	r20, r18
    246a:	53 0b       	sbc	r21, r19
    246c:	84 85       	ldd	r24, Z+12	; 0x0c
    246e:	95 85       	ldd	r25, Z+13	; 0x0d
    2470:	48 17       	cp	r20, r24
    2472:	59 07       	cpc	r21, r25
    2474:	e0 f4       	brcc	.+56     	; 0x24ae <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2476:	bf 01       	movw	r22, r30
    2478:	6e 5f       	subi	r22, 0xFE	; 254
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <pxOverflowTimerList>
    2480:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <pxOverflowTimerList+0x1>
    2484:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    248c:	42 17       	cp	r20, r18
    248e:	53 07       	cpc	r21, r19
    2490:	18 f4       	brcc	.+6      	; 0x2498 <prvInsertTimerInActiveList+0x40>
    2492:	62 17       	cp	r22, r18
    2494:	73 07       	cpc	r23, r19
    2496:	68 f4       	brcc	.+26     	; 0x24b2 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2498:	bf 01       	movw	r22, r30
    249a:	6e 5f       	subi	r22, 0xFE	; 254
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <pxCurrentTimerList>
    24a2:	90 91 b6 22 	lds	r25, 0x22B6	; 0x8022b6 <pxCurrentTimerList+0x1>
    24a6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    24b2:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    24b4:	08 95       	ret

000024b6 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	0f 93       	push	r16
    24bc:	1f 93       	push	r17
    24be:	cf 93       	push	r28
    24c0:	df 93       	push	r29
    24c2:	ec 01       	movw	r28, r24
    24c4:	8b 01       	movw	r16, r22
    24c6:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    24c8:	08 c0       	rjmp	.+16     	; 0x24da <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    24ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    24cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ce:	08 0f       	add	r16, r24
    24d0:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24d2:	e8 89       	ldd	r30, Y+16	; 0x10
    24d4:	f9 89       	ldd	r31, Y+17	; 0x11
    24d6:	ce 01       	movw	r24, r28
    24d8:	19 95       	eicall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    24da:	6c 85       	ldd	r22, Y+12	; 0x0c
    24dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24de:	60 0f       	add	r22, r16
    24e0:	71 1f       	adc	r23, r17
    24e2:	98 01       	movw	r18, r16
    24e4:	a7 01       	movw	r20, r14
    24e6:	ce 01       	movw	r24, r28
    24e8:	b7 df       	rcall	.-146    	; 0x2458 <prvInsertTimerInActiveList>
    24ea:	81 11       	cpse	r24, r1
    24ec:	ee cf       	rjmp	.-36     	; 0x24ca <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	08 95       	ret

000024fc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	cf 93       	push	r28
    2506:	df 93       	push	r29
    2508:	8c 01       	movw	r16, r24
    250a:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    250c:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTimerList>
    2510:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTimerList+0x1>
    2514:	05 80       	ldd	r0, Z+5	; 0x05
    2516:	f6 81       	ldd	r31, Z+6	; 0x06
    2518:	e0 2d       	mov	r30, r0
    251a:	c6 81       	ldd	r28, Z+6	; 0x06
    251c:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    251e:	ce 01       	movw	r24, r28
    2520:	02 96       	adiw	r24, 0x02	; 2
    2522:	0e 94 fe 07 	call	0xffc	; 0xffc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2526:	8a 89       	ldd	r24, Y+18	; 0x12
    2528:	82 ff       	sbrs	r24, 2
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    252c:	a7 01       	movw	r20, r14
    252e:	b8 01       	movw	r22, r16
    2530:	ce 01       	movw	r24, r28
    2532:	c1 df       	rcall	.-126    	; 0x24b6 <prvReloadTimer>
    2534:	02 c0       	rjmp	.+4      	; 0x253a <prvProcessExpiredTimer+0x3e>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    2536:	8e 7f       	andi	r24, 0xFE	; 254
    2538:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    253a:	e8 89       	ldd	r30, Y+16	; 0x10
    253c:	f9 89       	ldd	r31, Y+17	; 0x11
    253e:	ce 01       	movw	r24, r28
    2540:	19 95       	eicall
    }
    2542:	df 91       	pop	r29
    2544:	cf 91       	pop	r28
    2546:	1f 91       	pop	r17
    2548:	0f 91       	pop	r16
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	08 95       	ret

00002550 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    255a:	b5 db       	rcall	.-2198   	; 0x1cc6 <xTaskGetTickCount>
    255c:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    255e:	80 91 ad 22 	lds	r24, 0x22AD	; 0x8022ad <xLastTime.4412>
    2562:	90 91 ae 22 	lds	r25, 0x22AE	; 0x8022ae <xLastTime.4412+0x1>
    2566:	c8 17       	cp	r28, r24
    2568:	d9 07       	cpc	r29, r25
    256a:	30 f5       	brcc	.+76     	; 0x25b8 <prvSampleTimeNow+0x68>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    256c:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTimerList>
    2570:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTimerList+0x1>
    2574:	80 81       	ld	r24, Z
    2576:	88 23       	and	r24, r24
    2578:	79 f0       	breq	.+30     	; 0x2598 <prvSampleTimeNow+0x48>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    257a:	05 80       	ldd	r0, Z+5	; 0x05
    257c:	f6 81       	ldd	r31, Z+6	; 0x06
    257e:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    2580:	6f ef       	ldi	r22, 0xFF	; 255
    2582:	7f ef       	ldi	r23, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	b9 df       	rcall	.-142    	; 0x24fc <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    258a:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTimerList>
    258e:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTimerList+0x1>
    2592:	80 81       	ld	r24, Z
    2594:	81 11       	cpse	r24, r1
    2596:	f1 cf       	rjmp	.-30     	; 0x257a <prvSampleTimeNow+0x2a>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2598:	80 91 b3 22 	lds	r24, 0x22B3	; 0x8022b3 <pxOverflowTimerList>
    259c:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <pxOverflowTimerList+0x1>
    25a0:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <pxCurrentTimerList>
    25a4:	90 93 b6 22 	sts	0x22B6, r25	; 0x8022b6 <pxCurrentTimerList+0x1>
        pxOverflowTimerList = pxTemp;
    25a8:	e0 93 b3 22 	sts	0x22B3, r30	; 0x8022b3 <pxOverflowTimerList>
    25ac:	f0 93 b4 22 	sts	0x22B4, r31	; 0x8022b4 <pxOverflowTimerList+0x1>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	f8 01       	movw	r30, r16
    25b4:	80 83       	st	Z, r24
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <prvSampleTimeNow+0x6c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    25b8:	f8 01       	movw	r30, r16
    25ba:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    25bc:	c0 93 ad 22 	sts	0x22AD, r28	; 0x8022ad <xLastTime.4412>
    25c0:	d0 93 ae 22 	sts	0x22AE, r29	; 0x8022ae <xLastTime.4412+0x1>

        return xTimeNow;
    }
    25c4:	ce 01       	movw	r24, r28
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <prvTimerTask+0x6>
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <prvTimerTask+0x8>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    25dc:	ce 01       	movw	r24, r28
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	5c 01       	movw	r10, r24
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    25e2:	08 2f       	mov	r16, r24
    25e4:	1b 2d       	mov	r17, r11
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    25e6:	e0 91 b5 22 	lds	r30, 0x22B5	; 0x8022b5 <pxCurrentTimerList>
    25ea:	f0 91 b6 22 	lds	r31, 0x22B6	; 0x8022b6 <pxCurrentTimerList+0x1>
    25ee:	80 81       	ld	r24, Z

        if( *pxListWasEmpty == pdFALSE )
    25f0:	88 23       	and	r24, r24
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <prvTimerTask+0x26>
    25f4:	a9 c0       	rjmp	.+338    	; 0x2748 <prvTimerTask+0x178>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25f6:	05 80       	ldd	r0, Z+5	; 0x05
    25f8:	f6 81       	ldd	r31, Z+6	; 0x06
    25fa:	e0 2d       	mov	r30, r0
    25fc:	e0 80       	ld	r14, Z
    25fe:	f1 80       	ldd	r15, Z+1	; 0x01
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2600:	5c db       	rcall	.-2376   	; 0x1cba <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2602:	c5 01       	movw	r24, r10
    2604:	a5 df       	rcall	.-182    	; 0x2550 <prvSampleTimeNow>
    2606:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	81 11       	cpse	r24, r1
    260c:	17 c0       	rjmp	.+46     	; 0x263c <prvTimerTask+0x6c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    260e:	ce 14       	cp	r12, r14
    2610:	df 04       	cpc	r13, r15
                {
                    ( void ) xTaskResumeAll();
    2612:	28 f0       	brcs	.+10     	; 0x261e <prvTimerTask+0x4e>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2614:	7a dc       	rcall	.-1804   	; 0x1f0a <xTaskResumeAll>
    2616:	b6 01       	movw	r22, r12
    2618:	c7 01       	movw	r24, r14
    261a:	70 df       	rcall	.-288    	; 0x24fc <prvProcessExpiredTimer>
    261c:	88 c0       	rjmp	.+272    	; 0x272e <prvTimerTask+0x15e>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            if( xTimerListsWereSwitched == pdFALSE )
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    261e:	40 e0       	ldi	r20, 0x00	; 0
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2620:	b7 01       	movw	r22, r14
    2622:	6c 19       	sub	r22, r12
    2624:	7d 09       	sbc	r23, r13
    2626:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <xTimerQueue>
    262a:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <xTimerQueue+0x1>

                    if( xTaskResumeAll() == pdFALSE )
    262e:	75 d9       	rcall	.-3350   	; 0x191a <vQueueWaitForMessageRestricted>
    2630:	6c dc       	rcall	.-1832   	; 0x1f0a <xTaskResumeAll>
    2632:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2634:	7c c0       	rjmp	.+248    	; 0x272e <prvTimerTask+0x15e>
    2636:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    263a:	79 c0       	rjmp	.+242    	; 0x272e <prvTimerTask+0x15e>
    263c:	66 dc       	rcall	.-1844   	; 0x1f0a <xTaskResumeAll>
    263e:	77 c0       	rjmp	.+238    	; 0x272e <prvTimerTask+0x15e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	88 23       	and	r24, r24
    2644:	0c f4       	brge	.+2      	; 0x2648 <prvTimerTask+0x78>
    2646:	73 c0       	rjmp	.+230    	; 0x272e <prvTimerTask+0x15e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2648:	ec 80       	ldd	r14, Y+4	; 0x04
    264a:	fd 80       	ldd	r15, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    264c:	d7 01       	movw	r26, r14
    264e:	1a 96       	adiw	r26, 0x0a	; 10
    2650:	8d 91       	ld	r24, X+
    2652:	9c 91       	ld	r25, X
    2654:	1b 97       	sbiw	r26, 0x0b	; 11
    2656:	89 2b       	or	r24, r25
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2658:	21 f0       	breq	.+8      	; 0x2662 <prvTimerTask+0x92>
    265a:	c7 01       	movw	r24, r14
    265c:	02 96       	adiw	r24, 0x02	; 2
    265e:	0e 94 fe 07 	call	0xffc	; 0xffc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2662:	ce 01       	movw	r24, r28
    2664:	06 96       	adiw	r24, 0x06	; 6
    2666:	74 df       	rcall	.-280    	; 0x2550 <prvSampleTimeNow>
    2668:	6c 01       	movw	r12, r24

                switch( xMessage.xMessageID )
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	8e 2f       	mov	r24, r30
    266e:	ee 0f       	add	r30, r30
    2670:	99 0b       	sbc	r25, r25
    2672:	aa 0b       	sbc	r26, r26
    2674:	bb 0b       	sbc	r27, r27
    2676:	fc 01       	movw	r30, r24
    2678:	31 97       	sbiw	r30, 0x01	; 1
    267a:	e9 30       	cpi	r30, 0x09	; 9
    267c:	f1 05       	cpc	r31, r1
    267e:	08 f0       	brcs	.+2      	; 0x2682 <prvTimerTask+0xb2>
    2680:	56 c0       	rjmp	.+172    	; 0x272e <prvTimerTask+0x15e>
    2682:	88 27       	eor	r24, r24
    2684:	e2 50       	subi	r30, 0x02	; 2
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	8f 4f       	sbci	r24, 0xFF	; 255
    268a:	0e c5       	rjmp	.+2588   	; 0x30a8 <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    268c:	f7 01       	movw	r30, r14
    268e:	82 89       	ldd	r24, Z+18	; 0x12
    2690:	81 60       	ori	r24, 0x01	; 1

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2692:	82 8b       	std	Z+18, r24	; 0x12
    2694:	2a 81       	ldd	r18, Y+2	; 0x02
    2696:	3b 81       	ldd	r19, Y+3	; 0x03
    2698:	64 85       	ldd	r22, Z+12	; 0x0c
    269a:	75 85       	ldd	r23, Z+13	; 0x0d
    269c:	62 0f       	add	r22, r18
    269e:	73 1f       	adc	r23, r19
    26a0:	a6 01       	movw	r20, r12
    26a2:	c7 01       	movw	r24, r14
    26a4:	d9 de       	rcall	.-590    	; 0x2458 <prvInsertTimerInActiveList>
    26a6:	88 23       	and	r24, r24
    26a8:	09 f4       	brne	.+2      	; 0x26ac <prvTimerTask+0xdc>
    26aa:	41 c0       	rjmp	.+130    	; 0x272e <prvTimerTask+0x15e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    26ac:	d7 01       	movw	r26, r14
    26ae:	52 96       	adiw	r26, 0x12	; 18
    26b0:	8c 91       	ld	r24, X
    26b2:	52 97       	sbiw	r26, 0x12	; 18
    26b4:	82 ff       	sbrs	r24, 2
    26b6:	0c c0       	rjmp	.+24     	; 0x26d0 <prvTimerTask+0x100>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    26b8:	6a 81       	ldd	r22, Y+2	; 0x02
    26ba:	7b 81       	ldd	r23, Y+3	; 0x03
    26bc:	1c 96       	adiw	r26, 0x0c	; 12
    26be:	8d 91       	ld	r24, X+
    26c0:	9c 91       	ld	r25, X
    26c2:	1d 97       	sbiw	r26, 0x0d	; 13
    26c4:	68 0f       	add	r22, r24
    26c6:	79 1f       	adc	r23, r25
    26c8:	a6 01       	movw	r20, r12
    26ca:	c7 01       	movw	r24, r14
    26cc:	f4 de       	rcall	.-536    	; 0x24b6 <prvReloadTimer>
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <prvTimerTask+0x106>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    26d0:	8e 7f       	andi	r24, 0xFE	; 254
    26d2:	f7 01       	movw	r30, r14
    26d4:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26d6:	d7 01       	movw	r26, r14
    26d8:	50 96       	adiw	r26, 0x10	; 16
    26da:	ed 91       	ld	r30, X+
    26dc:	fc 91       	ld	r31, X
    26de:	51 97       	sbiw	r26, 0x11	; 17
    26e0:	c7 01       	movw	r24, r14
    26e2:	19 95       	eicall
    26e4:	24 c0       	rjmp	.+72     	; 0x272e <prvTimerTask+0x15e>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    26e6:	f7 01       	movw	r30, r14
    26e8:	82 89       	ldd	r24, Z+18	; 0x12
    26ea:	8e 7f       	andi	r24, 0xFE	; 254
    26ec:	82 8b       	std	Z+18, r24	; 0x12
    26ee:	1f c0       	rjmp	.+62     	; 0x272e <prvTimerTask+0x15e>
                        break;

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    26f0:	d7 01       	movw	r26, r14
    26f2:	52 96       	adiw	r26, 0x12	; 18
    26f4:	8c 91       	ld	r24, X
    26f6:	52 97       	sbiw	r26, 0x12	; 18
    26f8:	81 60       	ori	r24, 0x01	; 1
    26fa:	52 96       	adiw	r26, 0x12	; 18
    26fc:	8c 93       	st	X, r24
    26fe:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2700:	6a 81       	ldd	r22, Y+2	; 0x02
    2702:	7b 81       	ldd	r23, Y+3	; 0x03
    2704:	1c 96       	adiw	r26, 0x0c	; 12
    2706:	6d 93       	st	X+, r22
    2708:	7c 93       	st	X, r23
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    270a:	1d 97       	sbiw	r26, 0x0d	; 13
    270c:	6c 0d       	add	r22, r12
    270e:	7d 1d       	adc	r23, r13
    2710:	96 01       	movw	r18, r12
    2712:	a6 01       	movw	r20, r12
    2714:	c7 01       	movw	r24, r14
    2716:	a0 de       	rcall	.-704    	; 0x2458 <prvInsertTimerInActiveList>
    2718:	0a c0       	rjmp	.+20     	; 0x272e <prvTimerTask+0x15e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    271a:	f7 01       	movw	r30, r14
    271c:	82 89       	ldd	r24, Z+18	; 0x12
    271e:	81 fd       	sbrc	r24, 1
    2720:	04 c0       	rjmp	.+8      	; 0x272a <prvTimerTask+0x15a>
                                {
                                    vPortFree( pxTimer );
    2722:	c7 01       	movw	r24, r14
    2724:	0e 94 a0 09 	call	0x1340	; 0x1340 <vPortFree>
    2728:	02 c0       	rjmp	.+4      	; 0x272e <prvTimerTask+0x15e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    272a:	8e 7f       	andi	r24, 0xFE	; 254
    272c:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	60 2f       	mov	r22, r16
    2734:	71 2f       	mov	r23, r17
    2736:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <xTimerQueue>
    273a:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <xTimerQueue+0x1>
    273e:	0e 94 90 0b 	call	0x1720	; 0x1720 <xQueueReceive>
    2742:	81 11       	cpse	r24, r1
                                            BaseType_t xListWasEmpty )
    {
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2744:	7d cf       	rjmp	.-262    	; 0x2640 <prvTimerTask+0x70>
    2746:	4f cf       	rjmp	.-354    	; 0x25e6 <prvTimerTask+0x16>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2748:	b8 da       	rcall	.-2704   	; 0x1cba <vTaskSuspendAll>
    274a:	c5 01       	movw	r24, r10
    274c:	01 df       	rcall	.-510    	; 0x2550 <prvSampleTimeNow>
    274e:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	81 11       	cpse	r24, r1
    2754:	73 cf       	rjmp	.-282    	; 0x263c <prvTimerTask+0x6c>
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2756:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <pxOverflowTimerList>
    275a:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <pxOverflowTimerList+0x1>
    275e:	80 81       	ld	r24, Z
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	81 11       	cpse	r24, r1
    2764:	40 e0       	ldi	r20, 0x00	; 0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    2766:	e1 2c       	mov	r14, r1
    2768:	f1 2c       	mov	r15, r1
    276a:	5a cf       	rjmp	.-332    	; 0x2620 <prvTimerTask+0x50>

0000276c <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    2772:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <xTimerQueue>
    2776:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <xTimerQueue+0x1>
    277a:	89 2b       	or	r24, r25
    277c:	e9 f4       	brne	.+58     	; 0x27b8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    277e:	80 ec       	ldi	r24, 0xC0	; 192
    2780:	92 e2       	ldi	r25, 0x22	; 34
    2782:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    2786:	87 eb       	ldi	r24, 0xB7	; 183
    2788:	92 e2       	ldi	r25, 0x22	; 34
    278a:	0e 94 bb 07 	call	0xf76	; 0xf76 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    278e:	80 ec       	ldi	r24, 0xC0	; 192
    2790:	92 e2       	ldi	r25, 0x22	; 34
    2792:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <pxCurrentTimerList>
    2796:	90 93 b6 22 	sts	0x22B6, r25	; 0x8022b6 <pxCurrentTimerList+0x1>
                pxOverflowTimerList = &xActiveTimerList2;
    279a:	87 eb       	ldi	r24, 0xB7	; 183
    279c:	92 e2       	ldi	r25, 0x22	; 34
    279e:	80 93 b3 22 	sts	0x22B3, r24	; 0x8022b3 <pxOverflowTimerList>
    27a2:	90 93 b4 22 	sts	0x22B4, r25	; 0x8022b4 <pxOverflowTimerList+0x1>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	65 e0       	ldi	r22, 0x05	; 5
    27aa:	8a e0       	ldi	r24, 0x0A	; 10
    27ac:	0e 94 c3 0a 	call	0x1586	; 0x1586 <xQueueGenericCreate>
    27b0:	80 93 b1 22 	sts	0x22B1, r24	; 0x8022b1 <xTimerQueue>
    27b4:	90 93 b2 22 	sts	0x22B2, r25	; 0x8022b2 <xTimerQueue+0x1>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	08 95       	ret

000027be <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    27c4:	d3 df       	rcall	.-90     	; 0x276c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    27c6:	80 91 b1 22 	lds	r24, 0x22B1	; 0x8022b1 <xTimerQueue>
    27ca:	90 91 b2 22 	lds	r25, 0x22B2	; 0x8022b2 <xTimerQueue+0x1>
    27ce:	89 2b       	or	r24, r25
    27d0:	89 f0       	breq	.+34     	; 0x27f4 <xTimerCreateTimerTask+0x36>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
    27d2:	0f 2e       	mov	r0, r31
    27d4:	ff ea       	ldi	r31, 0xAF	; 175
    27d6:	ef 2e       	mov	r14, r31
    27d8:	f2 e2       	ldi	r31, 0x22	; 34
    27da:	ff 2e       	mov	r15, r31
    27dc:	f0 2d       	mov	r31, r0
    27de:	03 e0       	ldi	r16, 0x03	; 3
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	45 e5       	ldi	r20, 0x55	; 85
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	63 e1       	ldi	r22, 0x13	; 19
    27ea:	70 e2       	ldi	r23, 0x20	; 32
    27ec:	88 ee       	ldi	r24, 0xE8	; 232
    27ee:	92 e1       	ldi	r25, 0x12	; 18
    27f0:	13 d9       	rcall	.-3546   	; 0x1a18 <xTaskCreate>
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <xTimerCreateTimerTask+0x38>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    27f4:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	08 95       	ret

000027fe <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    27fe:	80 3a       	cpi	r24, 0xA0	; 160
    2800:	28 e0       	ldi	r18, 0x08	; 8
    2802:	92 07       	cpc	r25, r18
    2804:	21 f4       	brne	.+8      	; 0x280e <usart_spi_init+0x10>
    2806:	60 e1       	ldi	r22, 0x10	; 16
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	12 c1       	rjmp	.+548    	; 0x2a30 <sysclk_enable_module>
    280c:	08 95       	ret
    280e:	80 3b       	cpi	r24, 0xB0	; 176
    2810:	28 e0       	ldi	r18, 0x08	; 8
    2812:	92 07       	cpc	r25, r18
    2814:	21 f4       	brne	.+8      	; 0x281e <usart_spi_init+0x20>
    2816:	60 e2       	ldi	r22, 0x20	; 32
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	0a c1       	rjmp	.+532    	; 0x2a30 <sysclk_enable_module>
    281c:	08 95       	ret
    281e:	80 3a       	cpi	r24, 0xA0	; 160
    2820:	29 e0       	ldi	r18, 0x09	; 9
    2822:	92 07       	cpc	r25, r18
    2824:	21 f4       	brne	.+8      	; 0x282e <usart_spi_init+0x30>
    2826:	60 e1       	ldi	r22, 0x10	; 16
    2828:	84 e0       	ldi	r24, 0x04	; 4
    282a:	02 c1       	rjmp	.+516    	; 0x2a30 <sysclk_enable_module>
    282c:	08 95       	ret
    282e:	80 3b       	cpi	r24, 0xB0	; 176
    2830:	29 e0       	ldi	r18, 0x09	; 9
    2832:	92 07       	cpc	r25, r18
    2834:	21 f4       	brne	.+8      	; 0x283e <usart_spi_init+0x40>
    2836:	60 e2       	ldi	r22, 0x20	; 32
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	fa c0       	rjmp	.+500    	; 0x2a30 <sysclk_enable_module>
    283c:	08 95       	ret
    283e:	80 3a       	cpi	r24, 0xA0	; 160
    2840:	2a e0       	ldi	r18, 0x0A	; 10
    2842:	92 07       	cpc	r25, r18
    2844:	21 f4       	brne	.+8      	; 0x284e <usart_spi_init+0x50>
    2846:	60 e1       	ldi	r22, 0x10	; 16
    2848:	85 e0       	ldi	r24, 0x05	; 5
    284a:	f2 c0       	rjmp	.+484    	; 0x2a30 <sysclk_enable_module>
    284c:	08 95       	ret
    284e:	80 3a       	cpi	r24, 0xA0	; 160
    2850:	9b 40       	sbci	r25, 0x0B	; 11
    2852:	19 f4       	brne	.+6      	; 0x285a <usart_spi_init+0x5c>
    2854:	60 e1       	ldi	r22, 0x10	; 16
    2856:	86 e0       	ldi	r24, 0x06	; 6
    2858:	eb c0       	rjmp	.+470    	; 0x2a30 <sysclk_enable_module>
    285a:	08 95       	ret

0000285c <usart_spi_setup_device>:
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	00 d0       	rcall	.+0      	; 0x2866 <usart_spi_setup_device+0xa>
    2866:	00 d0       	rcall	.+0      	; 0x2868 <usart_spi_setup_device+0xc>
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	09 83       	std	Y+1, r16	; 0x01
    286e:	1a 83       	std	Y+2, r17	; 0x02
    2870:	2b 83       	std	Y+3, r18	; 0x03
    2872:	3c 83       	std	Y+4, r19	; 0x04
    2874:	4d 83       	std	Y+5, r20	; 0x05
    2876:	1e 82       	std	Y+6, r1	; 0x06
    2878:	be 01       	movw	r22, r28
    287a:	6f 5f       	subi	r22, 0xFF	; 255
    287c:	7f 4f       	sbci	r23, 0xFF	; 255
    287e:	0e 94 ba 05 	call	0xb74	; 0xb74 <usart_init_spi>
    2882:	26 96       	adiw	r28, 0x06	; 6
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    2892:	fb 01       	movw	r30, r22
    2894:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2896:	e8 2f       	mov	r30, r24
    2898:	e6 95       	lsr	r30
    289a:	e6 95       	lsr	r30
    289c:	e6 95       	lsr	r30
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	e4 9f       	mul	r30, r20
    28a2:	f0 01       	movw	r30, r0
    28a4:	11 24       	eor	r1, r1
    28a6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    28a8:	87 70       	andi	r24, 0x07	; 7
    28aa:	21 e0       	ldi	r18, 0x01	; 1
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	a9 01       	movw	r20, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <usart_spi_select_device+0x24>
    28b2:	44 0f       	add	r20, r20
    28b4:	55 1f       	adc	r21, r21
    28b6:	8a 95       	dec	r24
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28ba:	46 83       	std	Z+6, r20	; 0x06
    28bc:	08 95       	ret

000028be <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    28be:	fb 01       	movw	r30, r22
    28c0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    28c2:	e8 2f       	mov	r30, r24
    28c4:	e6 95       	lsr	r30
    28c6:	e6 95       	lsr	r30
    28c8:	e6 95       	lsr	r30
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	e4 9f       	mul	r30, r20
    28ce:	f0 01       	movw	r30, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    28d4:	87 70       	andi	r24, 0x07	; 7
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	a9 01       	movw	r20, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <usart_spi_deselect_device+0x24>
    28de:	44 0f       	add	r20, r20
    28e0:	55 1f       	adc	r21, r21
    28e2:	8a 95       	dec	r24
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    28e6:	45 83       	std	Z+5, r20	; 0x05
    28e8:	08 95       	ret

000028ea <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    28ea:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <fbpointer>
    28ee:	90 93 ca 22 	sts	0x22CA, r25	; 0x8022ca <fbpointer+0x1>
    28f2:	08 95       	ret

000028f4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    28f4:	20 91 c9 22 	lds	r18, 0x22C9	; 0x8022c9 <fbpointer>
    28f8:	30 91 ca 22 	lds	r19, 0x22CA	; 0x8022ca <fbpointer+0x1>
    28fc:	90 e8       	ldi	r25, 0x80	; 128
    28fe:	89 9f       	mul	r24, r25
    2900:	20 0d       	add	r18, r0
    2902:	31 1d       	adc	r19, r1
    2904:	11 24       	eor	r1, r1
    2906:	f9 01       	movw	r30, r18
    2908:	e6 0f       	add	r30, r22
    290a:	f1 1d       	adc	r31, r1
    290c:	40 83       	st	Z, r20
    290e:	08 95       	ret

00002910 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    2910:	20 91 c9 22 	lds	r18, 0x22C9	; 0x8022c9 <fbpointer>
    2914:	30 91 ca 22 	lds	r19, 0x22CA	; 0x8022ca <fbpointer+0x1>
    2918:	90 e8       	ldi	r25, 0x80	; 128
    291a:	89 9f       	mul	r24, r25
    291c:	20 0d       	add	r18, r0
    291e:	31 1d       	adc	r19, r1
    2920:	11 24       	eor	r1, r1
    2922:	f9 01       	movw	r30, r18
    2924:	e6 0f       	add	r30, r22
    2926:	f1 1d       	adc	r31, r1
}
    2928:	80 81       	ld	r24, Z
    292a:	08 95       	ret

0000292c <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    292c:	ff 92       	push	r15
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	e4 2f       	mov	r30, r20
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	e8 0f       	add	r30, r24
    293c:	f1 1d       	adc	r31, r1
    293e:	e1 38       	cpi	r30, 0x81	; 129
    2940:	f1 05       	cpc	r31, r1
    2942:	1c f0       	brlt	.+6      	; 0x294a <gfx_mono_generic_draw_horizontal_line+0x1e>
    2944:	c0 e8       	ldi	r28, 0x80	; 128
    2946:	4c 2f       	mov	r20, r28
    2948:	48 1b       	sub	r20, r24
    294a:	44 23       	and	r20, r20
    294c:	09 f4       	brne	.+2      	; 0x2950 <gfx_mono_generic_draw_horizontal_line+0x24>
    294e:	50 c0       	rjmp	.+160    	; 0x29f0 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2950:	d6 2f       	mov	r29, r22
    2952:	d6 95       	lsr	r29
    2954:	d6 95       	lsr	r29
    2956:	d6 95       	lsr	r29
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	98 e0       	ldi	r25, 0x08	; 8
    295c:	d9 9f       	mul	r29, r25
    295e:	60 19       	sub	r22, r0
    2960:	71 09       	sbc	r23, r1
    2962:	11 24       	eor	r1, r1
    2964:	e1 e0       	ldi	r30, 0x01	; 1
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	df 01       	movw	r26, r30
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <gfx_mono_generic_draw_horizontal_line+0x44>
    296c:	aa 0f       	add	r26, r26
    296e:	bb 1f       	adc	r27, r27
    2970:	6a 95       	dec	r22
    2972:	e2 f7       	brpl	.-8      	; 0x296c <gfx_mono_generic_draw_horizontal_line+0x40>
    2974:	fa 2e       	mov	r15, r26
    2976:	21 30       	cpi	r18, 0x01	; 1
    2978:	21 f0       	breq	.+8      	; 0x2982 <gfx_mono_generic_draw_horizontal_line+0x56>
    297a:	a8 f0       	brcs	.+42     	; 0x29a6 <gfx_mono_generic_draw_horizontal_line+0x7a>
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	39 f1       	breq	.+78     	; 0x29ce <gfx_mono_generic_draw_horizontal_line+0xa2>
    2980:	37 c0       	rjmp	.+110    	; 0x29f0 <gfx_mono_generic_draw_horizontal_line+0xc4>
    2982:	c4 2f       	mov	r28, r20
    2984:	1f ef       	ldi	r17, 0xFF	; 255
    2986:	18 0f       	add	r17, r24
    2988:	01 2f       	mov	r16, r17
    298a:	0c 0f       	add	r16, r28
    298c:	60 2f       	mov	r22, r16
    298e:	8d 2f       	mov	r24, r29
    2990:	0e 94 85 05 	call	0xb0a	; 0xb0a <gfx_mono_st7565r_get_byte>
    2994:	4f 2d       	mov	r20, r15
    2996:	48 2b       	or	r20, r24
    2998:	60 2f       	mov	r22, r16
    299a:	8d 2f       	mov	r24, r29
    299c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <gfx_mono_st7565r_put_byte>
    29a0:	c1 50       	subi	r28, 0x01	; 1
    29a2:	91 f7       	brne	.-28     	; 0x2988 <gfx_mono_generic_draw_horizontal_line+0x5c>
    29a4:	25 c0       	rjmp	.+74     	; 0x29f0 <gfx_mono_generic_draw_horizontal_line+0xc4>
    29a6:	c4 2f       	mov	r28, r20
    29a8:	1f ef       	ldi	r17, 0xFF	; 255
    29aa:	18 0f       	add	r17, r24
    29ac:	fa 2e       	mov	r15, r26
    29ae:	f0 94       	com	r15
    29b0:	01 2f       	mov	r16, r17
    29b2:	0c 0f       	add	r16, r28
    29b4:	60 2f       	mov	r22, r16
    29b6:	8d 2f       	mov	r24, r29
    29b8:	0e 94 85 05 	call	0xb0a	; 0xb0a <gfx_mono_st7565r_get_byte>
    29bc:	4f 2d       	mov	r20, r15
    29be:	48 23       	and	r20, r24
    29c0:	60 2f       	mov	r22, r16
    29c2:	8d 2f       	mov	r24, r29
    29c4:	0e 94 59 04 	call	0x8b2	; 0x8b2 <gfx_mono_st7565r_put_byte>
    29c8:	c1 50       	subi	r28, 0x01	; 1
    29ca:	91 f7       	brne	.-28     	; 0x29b0 <gfx_mono_generic_draw_horizontal_line+0x84>
    29cc:	11 c0       	rjmp	.+34     	; 0x29f0 <gfx_mono_generic_draw_horizontal_line+0xc4>
    29ce:	c4 2f       	mov	r28, r20
    29d0:	1f ef       	ldi	r17, 0xFF	; 255
    29d2:	18 0f       	add	r17, r24
    29d4:	01 2f       	mov	r16, r17
    29d6:	0c 0f       	add	r16, r28
    29d8:	60 2f       	mov	r22, r16
    29da:	8d 2f       	mov	r24, r29
    29dc:	0e 94 85 05 	call	0xb0a	; 0xb0a <gfx_mono_st7565r_get_byte>
    29e0:	4f 2d       	mov	r20, r15
    29e2:	48 27       	eor	r20, r24
    29e4:	60 2f       	mov	r22, r16
    29e6:	8d 2f       	mov	r24, r29
    29e8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <gfx_mono_st7565r_put_byte>
    29ec:	c1 50       	subi	r28, 0x01	; 1
    29ee:	91 f7       	brne	.-28     	; 0x29d4 <gfx_mono_generic_draw_horizontal_line+0xa8>
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	ff 90       	pop	r15
    29fa:	08 95       	ret

000029fc <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
	if (height == 0) {
    2a06:	22 23       	and	r18, r18
    2a08:	69 f0       	breq	.+26     	; 0x2a24 <gfx_mono_generic_draw_filled_rect+0x28>
    2a0a:	f4 2e       	mov	r15, r20
    2a0c:	18 2f       	mov	r17, r24
    2a0e:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    2a10:	df ef       	ldi	r29, 0xFF	; 255
    2a12:	d6 0f       	add	r29, r22
    2a14:	6d 2f       	mov	r22, r29
    2a16:	6c 0f       	add	r22, r28
    2a18:	20 2f       	mov	r18, r16
    2a1a:	4f 2d       	mov	r20, r15
    2a1c:	81 2f       	mov	r24, r17
    2a1e:	86 df       	rcall	.-244    	; 0x292c <gfx_mono_generic_draw_horizontal_line>
    2a20:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    2a22:	c1 f7       	brne	.-16     	; 0x2a14 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	ff 90       	pop	r15
    2a2e:	08 95       	ret

00002a30 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	1f 92       	push	r1
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a3a:	9f b7       	in	r25, 0x3f	; 63
    2a3c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2a3e:	f8 94       	cli
	return flags;
    2a40:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2a42:	e8 2f       	mov	r30, r24
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	e0 59       	subi	r30, 0x90	; 144
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 95       	com	r22
    2a4c:	80 81       	ld	r24, Z
    2a4e:	68 23       	and	r22, r24
    2a50:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a52:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2a54:	0f 90       	pop	r0
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	08 95       	ret

00002a5c <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    2a5c:	af 92       	push	r10
    2a5e:	bf 92       	push	r11
    2a60:	cf 92       	push	r12
    2a62:	df 92       	push	r13
    2a64:	ef 92       	push	r14
    2a66:	ff 92       	push	r15
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	c8 2f       	mov	r28, r24
    2a72:	e6 2e       	mov	r14, r22
    2a74:	b4 2e       	mov	r11, r20
    2a76:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    2a78:	00 e0       	ldi	r16, 0x00	; 0
    2a7a:	f9 01       	movw	r30, r18
    2a7c:	24 81       	ldd	r18, Z+4	; 0x04
    2a7e:	43 81       	ldd	r20, Z+3	; 0x03
    2a80:	6b 2d       	mov	r22, r11
    2a82:	8e 2d       	mov	r24, r14
    2a84:	bb df       	rcall	.-138    	; 0x29fc <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    2a86:	f6 01       	movw	r30, r12
    2a88:	80 81       	ld	r24, Z
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	3a c0       	rjmp	.+116    	; 0x2b02 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    2a8e:	83 81       	ldd	r24, Z+3	; 0x03
    2a90:	28 2f       	mov	r18, r24
    2a92:	26 95       	lsr	r18
    2a94:	26 95       	lsr	r18
    2a96:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    2a98:	87 70       	andi	r24, 0x07	; 7
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <gfx_mono_draw_char+0x42>
		char_row_size++;
    2a9c:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    2a9e:	f6 01       	movw	r30, r12
    2aa0:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    2aa2:	8c 2f       	mov	r24, r28
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	35 81       	ldd	r19, Z+5	; 0x05
    2aa8:	83 1b       	sub	r24, r19
    2aaa:	91 09       	sbc	r25, r1
    2aac:	2a 9d       	mul	r18, r10
    2aae:	90 01       	movw	r18, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	82 9f       	mul	r24, r18
    2ab4:	a0 01       	movw	r20, r0
    2ab6:	83 9f       	mul	r24, r19
    2ab8:	50 0d       	add	r21, r0
    2aba:	92 9f       	mul	r25, r18
    2abc:	50 0d       	add	r21, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	01 81       	ldd	r16, Z+1	; 0x01
    2ac2:	12 81       	ldd	r17, Z+2	; 0x02
    2ac4:	04 0f       	add	r16, r20
    2ac6:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    2ac8:	f6 01       	movw	r30, r12
    2aca:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    2acc:	ff 20       	and	r15, r15
    2ace:	a9 f0       	breq	.+42     	; 0x2afa <gfx_mono_draw_char+0x9e>
    2ad0:	d0 e0       	ldi	r29, 0x00	; 0
    2ad2:	c0 e0       	ldi	r28, 0x00	; 0
    2ad4:	8e 2d       	mov	r24, r14
    2ad6:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    2ad8:	9c 2f       	mov	r25, r28
    2ada:	97 70       	andi	r25, 0x07	; 7
    2adc:	21 f4       	brne	.+8      	; 0x2ae6 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2ade:	f8 01       	movw	r30, r16
    2ae0:	d4 91       	lpm	r29, Z
				glyph_data++;
    2ae2:	0f 5f       	subi	r16, 0xFF	; 255
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2ae6:	dd 23       	and	r29, r29
    2ae8:	24 f4       	brge	.+8      	; 0x2af2 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	6b 2d       	mov	r22, r11
    2aee:	0e 94 4e 05 	call	0xa9c	; 0xa9c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2af2:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2af4:	cf 5f       	subi	r28, 0xFF	; 255
    2af6:	fc 12       	cpse	r15, r28
    2af8:	ed cf       	rjmp	.-38     	; 0x2ad4 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    2afa:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    2afc:	aa 94       	dec	r10
	} while (rows_left > 0);
    2afe:	a1 10       	cpse	r10, r1
    2b00:	e3 cf       	rjmp	.-58     	; 0x2ac8 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
    2b12:	bf 90       	pop	r11
    2b14:	af 90       	pop	r10
    2b16:	08 95       	ret

00002b18 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	d6 2e       	mov	r13, r22
    2b28:	04 2f       	mov	r16, r20
    2b2a:	79 01       	movw	r14, r18
    2b2c:	ec 01       	movw	r28, r24
    2b2e:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2b30:	89 91       	ld	r24, Y+
    2b32:	8a 30       	cpi	r24, 0x0A	; 10
    2b34:	31 f4       	brne	.+12     	; 0x2b42 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    2b36:	f7 01       	movw	r30, r14
    2b38:	84 81       	ldd	r24, Z+4	; 0x04
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2b3e:	1d 2d       	mov	r17, r13
    2b40:	09 c0       	rjmp	.+18     	; 0x2b54 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    2b42:	8d 30       	cpi	r24, 0x0D	; 13
    2b44:	39 f0       	breq	.+14     	; 0x2b54 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    2b46:	97 01       	movw	r18, r14
    2b48:	40 2f       	mov	r20, r16
    2b4a:	61 2f       	mov	r22, r17
    2b4c:	87 df       	rcall	.-242    	; 0x2a5c <gfx_mono_draw_char>
			x += font->width;
    2b4e:	f7 01       	movw	r30, r14
    2b50:	83 81       	ldd	r24, Z+3	; 0x03
    2b52:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    2b54:	88 81       	ld	r24, Y
    2b56:	81 11       	cpse	r24, r1
    2b58:	eb cf       	rjmp	.-42     	; 0x2b30 <gfx_mono_draw_string+0x18>
}
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	ff 90       	pop	r15
    2b64:	ef 90       	pop	r14
    2b66:	df 90       	pop	r13
    2b68:	08 95       	ret

00002b6a <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2b74:	c6 2f       	mov	r28, r22
    2b76:	d0 e0       	ldi	r29, 0x00	; 0
    2b78:	de 01       	movw	r26, r28
    2b7a:	02 2e       	mov	r0, r18
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <ioport_configure_port_pin+0x18>
    2b7e:	b5 95       	asr	r27
    2b80:	a7 95       	ror	r26
    2b82:	0a 94       	dec	r0
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <ioport_configure_port_pin+0x14>
    2b86:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2b88:	50 8b       	std	Z+16, r21	; 0x10
    2b8a:	2f 5f       	subi	r18, 0xFF	; 255
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2b90:	28 30       	cpi	r18, 0x08	; 8
    2b92:	31 05       	cpc	r19, r1
    2b94:	89 f7       	brne	.-30     	; 0x2b78 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2b96:	40 ff       	sbrs	r20, 0
    2b98:	0a c0       	rjmp	.+20     	; 0x2bae <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2b9a:	41 ff       	sbrs	r20, 1
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	65 83       	std	Z+5, r22	; 0x05
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2ba8:	fc 01       	movw	r30, r24
    2baa:	61 83       	std	Z+1, r22	; 0x01
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2bae:	fc 01       	movw	r30, r24
    2bb0:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	08 95       	ret

00002bb8 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2bb8:	43 e0       	ldi	r20, 0x03	; 3
    2bba:	50 e0       	ldi	r21, 0x00	; 0
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	80 ee       	ldi	r24, 0xE0	; 224
    2bc0:	97 e0       	ldi	r25, 0x07	; 7
    2bc2:	d3 df       	rcall	.-90     	; 0x2b6a <ioport_configure_port_pin>
    2bc4:	43 e0       	ldi	r20, 0x03	; 3
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	62 e0       	ldi	r22, 0x02	; 2
    2bca:	80 ee       	ldi	r24, 0xE0	; 224
    2bcc:	97 e0       	ldi	r25, 0x07	; 7
    2bce:	cd df       	rcall	.-102    	; 0x2b6a <ioport_configure_port_pin>
    2bd0:	43 e0       	ldi	r20, 0x03	; 3
    2bd2:	50 e0       	ldi	r21, 0x00	; 0
    2bd4:	60 e1       	ldi	r22, 0x10	; 16
    2bd6:	80 e6       	ldi	r24, 0x60	; 96
    2bd8:	96 e0       	ldi	r25, 0x06	; 6
    2bda:	c7 df       	rcall	.-114    	; 0x2b6a <ioport_configure_port_pin>
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	50 e4       	ldi	r21, 0x40	; 64
    2be0:	60 e2       	ldi	r22, 0x20	; 32
    2be2:	80 e6       	ldi	r24, 0x60	; 96
    2be4:	96 e0       	ldi	r25, 0x06	; 6
    2be6:	c1 df       	rcall	.-126    	; 0x2b6a <ioport_configure_port_pin>
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	5b e1       	ldi	r21, 0x1B	; 27
    2bec:	60 e2       	ldi	r22, 0x20	; 32
    2bee:	80 e8       	ldi	r24, 0x80	; 128
    2bf0:	96 e0       	ldi	r25, 0x06	; 6
    2bf2:	bb df       	rcall	.-138    	; 0x2b6a <ioport_configure_port_pin>
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	5b e1       	ldi	r21, 0x1B	; 27
    2bf8:	62 e0       	ldi	r22, 0x02	; 2
    2bfa:	80 ea       	ldi	r24, 0xA0	; 160
    2bfc:	96 e0       	ldi	r25, 0x06	; 6
    2bfe:	b5 df       	rcall	.-150    	; 0x2b6a <ioport_configure_port_pin>
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	5b e1       	ldi	r21, 0x1B	; 27
    2c04:	64 e0       	ldi	r22, 0x04	; 4
    2c06:	80 ea       	ldi	r24, 0xA0	; 160
    2c08:	96 e0       	ldi	r25, 0x06	; 6
    2c0a:	af df       	rcall	.-162    	; 0x2b6a <ioport_configure_port_pin>
    2c0c:	43 e0       	ldi	r20, 0x03	; 3
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	62 e0       	ldi	r22, 0x02	; 2
    2c12:	80 e6       	ldi	r24, 0x60	; 96
    2c14:	96 e0       	ldi	r25, 0x06	; 6
    2c16:	a9 df       	rcall	.-174    	; 0x2b6a <ioport_configure_port_pin>
    2c18:	43 e0       	ldi	r20, 0x03	; 3
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	68 e0       	ldi	r22, 0x08	; 8
    2c1e:	80 e6       	ldi	r24, 0x60	; 96
    2c20:	96 e0       	ldi	r25, 0x06	; 6
    2c22:	a3 df       	rcall	.-186    	; 0x2b6a <ioport_configure_port_pin>
    2c24:	43 e0       	ldi	r20, 0x03	; 3
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	68 e0       	ldi	r22, 0x08	; 8
    2c2a:	80 ea       	ldi	r24, 0xA0	; 160
    2c2c:	96 e0       	ldi	r25, 0x06	; 6
    2c2e:	9d df       	rcall	.-198    	; 0x2b6a <ioport_configure_port_pin>
    2c30:	43 e0       	ldi	r20, 0x03	; 3
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	80 e6       	ldi	r24, 0x60	; 96
    2c38:	96 e0       	ldi	r25, 0x06	; 6
    2c3a:	97 df       	rcall	.-210    	; 0x2b6a <ioport_configure_port_pin>
    2c3c:	43 e0       	ldi	r20, 0x03	; 3
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	68 e0       	ldi	r22, 0x08	; 8
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	96 e0       	ldi	r25, 0x06	; 6
    2c46:	91 df       	rcall	.-222    	; 0x2b6a <ioport_configure_port_pin>
    2c48:	41 e0       	ldi	r20, 0x01	; 1
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	60 e1       	ldi	r22, 0x10	; 16
    2c4e:	80 e8       	ldi	r24, 0x80	; 128
    2c50:	96 e0       	ldi	r25, 0x06	; 6
    2c52:	8b df       	rcall	.-234    	; 0x2b6a <ioport_configure_port_pin>
    2c54:	43 e0       	ldi	r20, 0x03	; 3
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	62 e0       	ldi	r22, 0x02	; 2
    2c5a:	80 e6       	ldi	r24, 0x60	; 96
    2c5c:	96 e0       	ldi	r25, 0x06	; 6
    2c5e:	85 df       	rcall	.-246    	; 0x2b6a <ioport_configure_port_pin>
    2c60:	43 e0       	ldi	r20, 0x03	; 3
    2c62:	50 e0       	ldi	r21, 0x00	; 0
    2c64:	68 e0       	ldi	r22, 0x08	; 8
    2c66:	80 e6       	ldi	r24, 0x60	; 96
    2c68:	96 e0       	ldi	r25, 0x06	; 6
    2c6a:	7f df       	rcall	.-258    	; 0x2b6a <ioport_configure_port_pin>
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	64 e0       	ldi	r22, 0x04	; 4
    2c72:	80 e6       	ldi	r24, 0x60	; 96
    2c74:	96 e0       	ldi	r25, 0x06	; 6
    2c76:	79 df       	rcall	.-270    	; 0x2b6a <ioport_configure_port_pin>
    2c78:	43 e0       	ldi	r20, 0x03	; 3
    2c7a:	50 e0       	ldi	r21, 0x00	; 0
    2c7c:	60 e1       	ldi	r22, 0x10	; 16
    2c7e:	80 ea       	ldi	r24, 0xA0	; 160
    2c80:	96 e0       	ldi	r25, 0x06	; 6
    2c82:	73 df       	rcall	.-282    	; 0x2b6a <ioport_configure_port_pin>
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	96 e0       	ldi	r25, 0x06	; 6
    2c8e:	6d df       	rcall	.-294    	; 0x2b6a <ioport_configure_port_pin>
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	64 e0       	ldi	r22, 0x04	; 4
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	96 e0       	ldi	r25, 0x06	; 6
    2c9a:	67 df       	rcall	.-306    	; 0x2b6a <ioport_configure_port_pin>
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	62 e0       	ldi	r22, 0x02	; 2
    2ca2:	80 e2       	ldi	r24, 0x20	; 32
    2ca4:	96 e0       	ldi	r25, 0x06	; 6
    2ca6:	61 df       	rcall	.-318    	; 0x2b6a <ioport_configure_port_pin>
    2ca8:	43 e0       	ldi	r20, 0x03	; 3
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	68 e0       	ldi	r22, 0x08	; 8
    2cae:	80 e4       	ldi	r24, 0x40	; 64
    2cb0:	96 e0       	ldi	r25, 0x06	; 6
    2cb2:	5b df       	rcall	.-330    	; 0x2b6a <ioport_configure_port_pin>
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	64 e0       	ldi	r22, 0x04	; 4
    2cba:	80 e4       	ldi	r24, 0x40	; 64
    2cbc:	96 e0       	ldi	r25, 0x06	; 6
    2cbe:	55 df       	rcall	.-342    	; 0x2b6a <ioport_configure_port_pin>
    2cc0:	43 e0       	ldi	r20, 0x03	; 3
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	68 e0       	ldi	r22, 0x08	; 8
    2cc6:	80 e6       	ldi	r24, 0x60	; 96
    2cc8:	96 e0       	ldi	r25, 0x06	; 6
    2cca:	4f df       	rcall	.-354    	; 0x2b6a <ioport_configure_port_pin>
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	64 e0       	ldi	r22, 0x04	; 4
    2cd2:	80 e6       	ldi	r24, 0x60	; 96
    2cd4:	96 e0       	ldi	r25, 0x06	; 6
    2cd6:	49 df       	rcall	.-366    	; 0x2b6a <ioport_configure_port_pin>
    2cd8:	43 e0       	ldi	r20, 0x03	; 3
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	68 e0       	ldi	r22, 0x08	; 8
    2cde:	80 e8       	ldi	r24, 0x80	; 128
    2ce0:	96 e0       	ldi	r25, 0x06	; 6
    2ce2:	43 df       	rcall	.-378    	; 0x2b6a <ioport_configure_port_pin>
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	64 e0       	ldi	r22, 0x04	; 4
    2cea:	80 e8       	ldi	r24, 0x80	; 128
    2cec:	96 e0       	ldi	r25, 0x06	; 6
    2cee:	3d cf       	rjmp	.-390    	; 0x2b6a <ioport_configure_port_pin>
    2cf0:	08 95       	ret

00002cf2 <vCounter>:
		
		vTaskDelay(10/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vCounter, r_) {
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	c0 58       	subi	r28, 0x80	; 128
    2cfc:	d1 09       	sbc	r29, r1
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	de bf       	out	0x3e, r29	; 62
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
			counter++;
			snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2d02:	0f 2e       	mov	r0, r31
    2d04:	fb e1       	ldi	r31, 0x1B	; 27
    2d06:	ef 2e       	mov	r14, r31
    2d08:	f0 e2       	ldi	r31, 0x20	; 32
    2d0a:	ff 2e       	mov	r15, r31
    2d0c:	f0 2d       	mov	r31, r0
    2d0e:	68 94       	set
    2d10:	dd 24       	eor	r13, r13
    2d12:	d7 f8       	bld	r13, 7
    2d14:	8e 01       	movw	r16, r28
    2d16:	0f 5f       	subi	r16, 0xFF	; 255
    2d18:	1f 4f       	sbci	r17, 0xFF	; 255
static portTASK_FUNCTION(vCounter, r_) {
	char strbuf[128];
	
	while(1) {
		
		if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2d1a:	6a e0       	ldi	r22, 0x0A	; 10
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2d22:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2d26:	0e 94 14 0c 	call	0x1828	; 0x1828 <xQueueSemaphoreTake>
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	29 f5       	brne	.+74     	; 0x2d78 <vCounter+0x86>
			counter++;
    2d2e:	80 91 cd 22 	lds	r24, 0x22CD	; 0x8022cd <counter>
    2d32:	90 91 ce 22 	lds	r25, 0x22CE	; 0x8022ce <counter+0x1>
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	80 93 cd 22 	sts	0x22CD, r24	; 0x8022cd <counter>
    2d3c:	90 93 ce 22 	sts	0x22CE, r25	; 0x8022ce <counter+0x1>
			snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2d40:	9f 93       	push	r25
    2d42:	8f 93       	push	r24
    2d44:	ff 92       	push	r15
    2d46:	ef 92       	push	r14
    2d48:	1f 92       	push	r1
    2d4a:	df 92       	push	r13
    2d4c:	1f 93       	push	r17
    2d4e:	0f 93       	push	r16
    2d50:	dd d2       	rcall	.+1466   	; 0x330c <snprintf>
			gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2d52:	27 e0       	ldi	r18, 0x07	; 7
    2d54:	30 e2       	ldi	r19, 0x20	; 32
    2d56:	48 e0       	ldi	r20, 0x08	; 8
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	dd de       	rcall	.-582    	; 0x2b18 <gfx_mono_draw_string>
			xSemaphoreGive(xSemaphore);	
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2d6c:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2d70:	0e 94 03 0b 	call	0x1606	; 0x1606 <xQueueGenericSend>
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	de bf       	out	0x3e, r29	; 62
		}
		
		vTaskDelay(100/portTICK_PERIOD_MS);
    2d78:	82 e3       	ldi	r24, 0x32	; 50
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a1 d9       	rcall	.-3262   	; 0x20c0 <vTaskDelay>
	}	
    2d7e:	cd cf       	rjmp	.-102    	; 0x2d1a <vCounter+0x28>

00002d80 <vPushButton2>:
}

static portTASK_FUNCTION(vPushButton2, t_) {
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	c0 58       	subi	r28, 0x80	; 128
    2d8a:	d1 09       	sbc	r29, r1
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	de bf       	out	0x3e, r29	; 62

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    2d90:	00 ea       	ldi	r16, 0xA0	; 160
    2d92:	16 e0       	ldi	r17, 0x06	; 6
	
	while(1) {
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_2)==0){
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
				counter2++;
				snprintf(strbuf, sizeof(strbuf), "Counter 2 : %d", counter2);
    2d94:	0f 2e       	mov	r0, r31
    2d96:	f8 e2       	ldi	r31, 0x28	; 40
    2d98:	cf 2e       	mov	r12, r31
    2d9a:	f0 e2       	ldi	r31, 0x20	; 32
    2d9c:	df 2e       	mov	r13, r31
    2d9e:	f0 2d       	mov	r31, r0
    2da0:	68 94       	set
    2da2:	bb 24       	eor	r11, r11
    2da4:	b7 f8       	bld	r11, 7
    2da6:	ce 01       	movw	r24, r28
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	7c 01       	movw	r14, r24
    2dac:	f8 01       	movw	r30, r16
    2dae:	80 85       	ldd	r24, Z+8	; 0x08

static portTASK_FUNCTION(vPushButton2, t_) {
	char strbuf[128];
	
	while(1) {
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_2)==0){
    2db0:	82 fd       	sbrc	r24, 2
    2db2:	2f c0       	rjmp	.+94     	; 0x2e12 <vPushButton2+0x92>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2db4:	6a e0       	ldi	r22, 0x0A	; 10
    2db6:	70 e0       	ldi	r23, 0x00	; 0
    2db8:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2dbc:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2dc0:	0e 94 14 0c 	call	0x1828	; 0x1828 <xQueueSemaphoreTake>
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	29 f5       	brne	.+74     	; 0x2e12 <vPushButton2+0x92>
				counter2++;
    2dc8:	80 91 cb 22 	lds	r24, 0x22CB	; 0x8022cb <counter2>
    2dcc:	90 91 cc 22 	lds	r25, 0x22CC	; 0x8022cc <counter2+0x1>
    2dd0:	01 96       	adiw	r24, 0x01	; 1
    2dd2:	80 93 cb 22 	sts	0x22CB, r24	; 0x8022cb <counter2>
    2dd6:	90 93 cc 22 	sts	0x22CC, r25	; 0x8022cc <counter2+0x1>
				snprintf(strbuf, sizeof(strbuf), "Counter 2 : %d", counter2);
    2dda:	9f 93       	push	r25
    2ddc:	8f 93       	push	r24
    2dde:	df 92       	push	r13
    2de0:	cf 92       	push	r12
    2de2:	1f 92       	push	r1
    2de4:	bf 92       	push	r11
    2de6:	ff 92       	push	r15
    2de8:	ef 92       	push	r14
    2dea:	90 d2       	rcall	.+1312   	; 0x330c <snprintf>
				gfx_mono_draw_string(strbuf,0, 16, &sysfont);
    2dec:	27 e0       	ldi	r18, 0x07	; 7
    2dee:	30 e2       	ldi	r19, 0x20	; 32
    2df0:	40 e1       	ldi	r20, 0x10	; 16
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	c7 01       	movw	r24, r14
    2df6:	90 de       	rcall	.-736    	; 0x2b18 <gfx_mono_draw_string>
				xSemaphoreGive(xSemaphore);
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	70 e0       	ldi	r23, 0x00	; 0
    2e02:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2e06:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2e0a:	0e 94 03 0b 	call	0x1606	; 0x1606 <xQueueGenericSend>
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	de bf       	out	0x3e, r29	; 62
			}
		}
		
		vTaskDelay(10/portTICK_PERIOD_MS);
    2e12:	85 e0       	ldi	r24, 0x05	; 5
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	54 d9       	rcall	.-3416   	; 0x20c0 <vTaskDelay>
	}
    2e18:	c9 cf       	rjmp	.-110    	; 0x2dac <vPushButton2+0x2c>

00002e1a <vPushButton1>:
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		vTaskDelay(500/portTICK_PERIOD_MS);
	}
}

static portTASK_FUNCTION(vPushButton1, s_) {
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	c0 58       	subi	r28, 0x80	; 128
    2e24:	d1 09       	sbc	r29, r1
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	00 ea       	ldi	r16, 0xA0	; 160
    2e2c:	16 e0       	ldi	r17, 0x06	; 6
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
				counter++;
				snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2e2e:	0f 2e       	mov	r0, r31
    2e30:	fb e1       	ldi	r31, 0x1B	; 27
    2e32:	cf 2e       	mov	r12, r31
    2e34:	f0 e2       	ldi	r31, 0x20	; 32
    2e36:	df 2e       	mov	r13, r31
    2e38:	f0 2d       	mov	r31, r0
    2e3a:	68 94       	set
    2e3c:	bb 24       	eor	r11, r11
    2e3e:	b7 f8       	bld	r11, 7
    2e40:	ce 01       	movw	r24, r28
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	7c 01       	movw	r14, r24
    2e46:	f8 01       	movw	r30, r16
    2e48:	80 85       	ldd	r24, Z+8	; 0x08
static portTASK_FUNCTION(vPushButton1, s_) {
	char strbuf[128];
	
	while(1) {
		
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
    2e4a:	81 fd       	sbrc	r24, 1
    2e4c:	2f c0       	rjmp	.+94     	; 0x2eac <vPushButton1+0x92>
			if(xSemaphoreTake(xSemaphore, (TickType_t) 10) == pdTRUE) {
    2e4e:	6a e0       	ldi	r22, 0x0A	; 10
    2e50:	70 e0       	ldi	r23, 0x00	; 0
    2e52:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2e56:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2e5a:	0e 94 14 0c 	call	0x1828	; 0x1828 <xQueueSemaphoreTake>
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	29 f5       	brne	.+74     	; 0x2eac <vPushButton1+0x92>
				counter++;
    2e62:	80 91 cd 22 	lds	r24, 0x22CD	; 0x8022cd <counter>
    2e66:	90 91 ce 22 	lds	r25, 0x22CE	; 0x8022ce <counter+0x1>
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	80 93 cd 22 	sts	0x22CD, r24	; 0x8022cd <counter>
    2e70:	90 93 ce 22 	sts	0x22CE, r25	; 0x8022ce <counter+0x1>
				snprintf(strbuf, sizeof(strbuf), "Counter : %d", counter);
    2e74:	9f 93       	push	r25
    2e76:	8f 93       	push	r24
    2e78:	df 92       	push	r13
    2e7a:	cf 92       	push	r12
    2e7c:	1f 92       	push	r1
    2e7e:	bf 92       	push	r11
    2e80:	ff 92       	push	r15
    2e82:	ef 92       	push	r14
    2e84:	43 d2       	rcall	.+1158   	; 0x330c <snprintf>
				gfx_mono_draw_string(strbuf,0, 8, &sysfont);
    2e86:	27 e0       	ldi	r18, 0x07	; 7
    2e88:	30 e2       	ldi	r19, 0x20	; 32
    2e8a:	48 e0       	ldi	r20, 0x08	; 8
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	c7 01       	movw	r24, r14
    2e90:	43 de       	rcall	.-890    	; 0x2b18 <gfx_mono_draw_string>
				xSemaphoreGive(xSemaphore);
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	40 e0       	ldi	r20, 0x00	; 0
    2e96:	50 e0       	ldi	r21, 0x00	; 0
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	80 91 cf 22 	lds	r24, 0x22CF	; 0x8022cf <xSemaphore>
    2ea0:	90 91 d0 22 	lds	r25, 0x22D0	; 0x8022d0 <xSemaphore+0x1>
    2ea4:	0e 94 03 0b 	call	0x1606	; 0x1606 <xQueueGenericSend>
    2ea8:	cd bf       	out	0x3d, r28	; 61
    2eaa:	de bf       	out	0x3e, r29	; 62
			}
		}
		
		vTaskDelay(10/portTICK_PERIOD_MS);
    2eac:	85 e0       	ldi	r24, 0x05	; 5
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	07 d9       	rcall	.-3570   	; 0x20c0 <vTaskDelay>
	}
    2eb2:	c9 cf       	rjmp	.-110    	; 0x2e46 <vPushButton1+0x2c>

00002eb4 <vBlinkLed1>:
	}
}

static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2eb8:	0f 2e       	mov	r0, r31
    2eba:	f0 ee       	ldi	r31, 0xE0	; 224
    2ebc:	ef 2e       	mov	r14, r31
    2ebe:	f7 e0       	ldi	r31, 0x07	; 7
    2ec0:	ff 2e       	mov	r15, r31
    2ec2:	f0 2d       	mov	r31, r0
    2ec4:	12 e0       	ldi	r17, 0x02	; 2
	
	while(1) {
		flagLed1 = !flagLed1;
    2ec6:	c1 e0       	ldi	r28, 0x01	; 1
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	09 f0       	breq	.+2      	; 0x2ece <vBlinkLed1+0x1a>
    2ecc:	c0 e0       	ldi	r28, 0x00	; 0
    2ece:	d0 e0       	ldi	r29, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2ed0:	89 2b       	or	r24, r25
    2ed2:	19 f4       	brne	.+6      	; 0x2eda <vBlinkLed1+0x26>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ed4:	f7 01       	movw	r30, r14
    2ed6:	15 83       	std	Z+5, r17	; 0x05
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <vBlinkLed1+0x2a>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2eda:	f7 01       	movw	r30, r14
    2edc:	16 83       	std	Z+6, r17	; 0x06
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		vTaskDelay(500/portTICK_PERIOD_MS);
    2ede:	8a ef       	ldi	r24, 0xFA	; 250
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	ee d8       	rcall	.-3620   	; 0x20c0 <vTaskDelay>
static portTASK_FUNCTION(vBlinkLed1, q_) {	
	char strbuf[128];
	int flagLed1 = 0;
	
	while(1) {
		flagLed1 = !flagLed1;
    2ee4:	ce 01       	movw	r24, r28
		ioport_set_pin_level(LED1_GPIO, flagLed1);
		vTaskDelay(500/portTICK_PERIOD_MS);
	}
    2ee6:	ef cf       	rjmp	.-34     	; 0x2ec6 <vBlinkLed1+0x12>

00002ee8 <vBlinkLed0>:
	/* Start the task */
	
	vTaskStartScheduler();
}

static portTASK_FUNCTION(vBlinkLed0, p_) {
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	c0 58       	subi	r28, 0x80	; 128
    2ef2:	d1 09       	sbc	r29, r1
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	de bf       	out	0x3e, r29	; 62
	char strbuf[128];
	int flagLed0 = 1;
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0f 2e       	mov	r0, r31
    2efe:	f0 ee       	ldi	r31, 0xE0	; 224
    2f00:	af 2e       	mov	r10, r31
    2f02:	f7 e0       	ldi	r31, 0x07	; 7
    2f04:	bf 2e       	mov	r11, r31
    2f06:	f0 2d       	mov	r31, r0
	
	while(1) {
		flagLed0 = !flagLed0;
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
    2f08:	0f 2e       	mov	r0, r31
    2f0a:	f7 e3       	ldi	r31, 0x37	; 55
    2f0c:	cf 2e       	mov	r12, r31
    2f0e:	f0 e2       	ldi	r31, 0x20	; 32
    2f10:	df 2e       	mov	r13, r31
    2f12:	f0 2d       	mov	r31, r0
    2f14:	68 94       	set
    2f16:	99 24       	eor	r9, r9
    2f18:	97 f8       	bld	r9, 7
    2f1a:	9e 01       	movw	r18, r28
    2f1c:	2f 5f       	subi	r18, 0xFF	; 255
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	79 01       	movw	r14, r18
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2f22:	01 e0       	ldi	r16, 0x01	; 1
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <vBlinkLed0+0x42>
    2f28:	00 e0       	ldi	r16, 0x00	; 0
    2f2a:	10 e0       	ldi	r17, 0x00	; 0
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	21 f4       	brne	.+8      	; 0x2f38 <vBlinkLed0+0x50>
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2f30:	21 e0       	ldi	r18, 0x01	; 1
    2f32:	f5 01       	movw	r30, r10
    2f34:	25 83       	std	Z+5, r18	; 0x05
    2f36:	03 c0       	rjmp	.+6      	; 0x2f3e <vBlinkLed0+0x56>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2f38:	21 e0       	ldi	r18, 0x01	; 1
    2f3a:	f5 01       	movw	r30, r10
    2f3c:	26 83       	std	Z+6, r18	; 0x06
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
    2f3e:	21 e0       	ldi	r18, 0x01	; 1
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	89 2b       	or	r24, r25
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <vBlinkLed0+0x60>
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f 93       	push	r19
    2f4a:	2f 93       	push	r18
    2f4c:	df 92       	push	r13
    2f4e:	cf 92       	push	r12
    2f50:	1f 92       	push	r1
    2f52:	9f 92       	push	r9
    2f54:	ff 92       	push	r15
    2f56:	ef 92       	push	r14
    2f58:	d9 d1       	rcall	.+946    	; 0x330c <snprintf>
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
    2f5a:	27 e0       	ldi	r18, 0x07	; 7
    2f5c:	30 e2       	ldi	r19, 0x20	; 32
    2f5e:	48 e1       	ldi	r20, 0x18	; 24
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	c7 01       	movw	r24, r14
    2f64:	d9 dd       	rcall	.-1102   	; 0x2b18 <gfx_mono_draw_string>
		vTaskDelay(100/portTICK_PERIOD_MS);
    2f66:	82 e3       	ldi	r24, 0x32	; 50
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	aa d8       	rcall	.-3756   	; 0x20c0 <vTaskDelay>
	}
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	de bf       	out	0x3e, r29	; 62
static portTASK_FUNCTION(vBlinkLed0, p_) {
	char strbuf[128];
	int flagLed0 = 1;
	
	while(1) {
		flagLed0 = !flagLed0;
    2f70:	c8 01       	movw	r24, r16
		ioport_set_pin_level(LED0_GPIO, flagLed0);
		snprintf(strbuf, sizeof(strbuf), "LED 0 : %d", !flagLed0);
		gfx_mono_draw_string(strbuf,0, 24, &sysfont);
		vTaskDelay(100/portTICK_PERIOD_MS);
	}
    2f72:	d7 cf       	rjmp	.-82     	; 0x2f22 <vBlinkLed0+0x3a>

00002f74 <main>:
SemaphoreHandle_t xSemaphore;
uint16_t counter = 0;
uint16_t counter2 = 0;

int main (void)
{
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
    2f7a:	1e de       	rcall	.-964    	; 0x2bb8 <board_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2f7c:	87 e0       	ldi	r24, 0x07	; 7
    2f7e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	gfx_mono_init();
    2f82:	0e 94 09 05 	call	0xa12	; 0xa12 <gfx_mono_st7565r_init>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2f86:	80 e1       	ldi	r24, 0x10	; 16
    2f88:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	gfx_mono_draw_string("RTOS v10.2.1", 0, 0, &sysfont);
    2f8c:	27 e0       	ldi	r18, 0x07	; 7
    2f8e:	30 e2       	ldi	r19, 0x20	; 32
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	82 e4       	ldi	r24, 0x42	; 66
    2f96:	90 e2       	ldi	r25, 0x20	; 32
    2f98:	bf dd       	rcall	.-1154   	; 0x2b18 <gfx_mono_draw_string>

	/* Create the task */
	
	xTaskCreate(vBlinkLed0, "", 1000, NULL, tskIDLE_PRIORITY + 1, NULL);	// higher priority
    2f9a:	e1 2c       	mov	r14, r1
    2f9c:	f1 2c       	mov	r15, r1
    2f9e:	01 e0       	ldi	r16, 0x01	; 1
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	48 ee       	ldi	r20, 0xE8	; 232
    2fa6:	53 e0       	ldi	r21, 0x03	; 3
    2fa8:	6e e4       	ldi	r22, 0x4E	; 78
    2faa:	70 e2       	ldi	r23, 0x20	; 32
    2fac:	84 e7       	ldi	r24, 0x74	; 116
    2fae:	97 e1       	ldi	r25, 0x17	; 23
    2fb0:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xTaskCreate>
	xTaskCreate(vBlinkLed1, "", 1000, NULL, tskIDLE_PRIORITY + 2, NULL);	// higher priority
    2fb4:	02 e0       	ldi	r16, 0x02	; 2
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	48 ee       	ldi	r20, 0xE8	; 232
    2fbc:	53 e0       	ldi	r21, 0x03	; 3
    2fbe:	6e e4       	ldi	r22, 0x4E	; 78
    2fc0:	70 e2       	ldi	r23, 0x20	; 32
    2fc2:	8a e5       	ldi	r24, 0x5A	; 90
    2fc4:	97 e1       	ldi	r25, 0x17	; 23
    2fc6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xTaskCreate>
	xTaskCreate(vPushButton1, "", 1000, NULL, tskIDLE_PRIORITY + 3, NULL);	// higher priority
    2fca:	03 e0       	ldi	r16, 0x03	; 3
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	48 ee       	ldi	r20, 0xE8	; 232
    2fd2:	53 e0       	ldi	r21, 0x03	; 3
    2fd4:	6e e4       	ldi	r22, 0x4E	; 78
    2fd6:	70 e2       	ldi	r23, 0x20	; 32
    2fd8:	8d e0       	ldi	r24, 0x0D	; 13
    2fda:	97 e1       	ldi	r25, 0x17	; 23
    2fdc:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xTaskCreate>
	xTaskCreate(vPushButton2, "", 1000, NULL, tskIDLE_PRIORITY + 4, NULL);	// higher priority
    2fe0:	04 e0       	ldi	r16, 0x04	; 4
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	48 ee       	ldi	r20, 0xE8	; 232
    2fe8:	53 e0       	ldi	r21, 0x03	; 3
    2fea:	6e e4       	ldi	r22, 0x4E	; 78
    2fec:	70 e2       	ldi	r23, 0x20	; 32
    2fee:	80 ec       	ldi	r24, 0xC0	; 192
    2ff0:	96 e1       	ldi	r25, 0x16	; 22
    2ff2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xTaskCreate>
	xTaskCreate(vCounter, "", 1000, NULL, tskIDLE_PRIORITY, NULL);			// low priority
    2ff6:	00 e0       	ldi	r16, 0x00	; 0
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	48 ee       	ldi	r20, 0xE8	; 232
    2ffe:	53 e0       	ldi	r21, 0x03	; 3
    3000:	6e e4       	ldi	r22, 0x4E	; 78
    3002:	70 e2       	ldi	r23, 0x20	; 32
    3004:	89 e7       	ldi	r24, 0x79	; 121
    3006:	96 e1       	ldi	r25, 0x16	; 22
    3008:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <xTaskCreate>
	
	/* Semaphore */
	xSemaphore = xSemaphoreCreateBinary();
    300c:	43 e0       	ldi	r20, 0x03	; 3
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 c3 0a 	call	0x1586	; 0x1586 <xQueueGenericCreate>
    3016:	80 93 cf 22 	sts	0x22CF, r24	; 0x8022cf <xSemaphore>
    301a:	90 93 d0 22 	sts	0x22D0, r25	; 0x8022d0 <xSemaphore+0x1>
	xSemaphoreGive(xSemaphore);
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	50 e0       	ldi	r21, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	70 e0       	ldi	r23, 0x00	; 0
    3028:	0e 94 03 0b 	call	0x1606	; 0x1606 <xQueueGenericSend>
	
	/* Start the task */
	
	vTaskStartScheduler();
    302c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <vTaskStartScheduler>
}
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	08 95       	ret

0000303c <__udivmodhi4>:
    303c:	aa 1b       	sub	r26, r26
    303e:	bb 1b       	sub	r27, r27
    3040:	51 e1       	ldi	r21, 0x11	; 17
    3042:	07 c0       	rjmp	.+14     	; 0x3052 <__udivmodhi4_ep>

00003044 <__udivmodhi4_loop>:
    3044:	aa 1f       	adc	r26, r26
    3046:	bb 1f       	adc	r27, r27
    3048:	a6 17       	cp	r26, r22
    304a:	b7 07       	cpc	r27, r23
    304c:	10 f0       	brcs	.+4      	; 0x3052 <__udivmodhi4_ep>
    304e:	a6 1b       	sub	r26, r22
    3050:	b7 0b       	sbc	r27, r23

00003052 <__udivmodhi4_ep>:
    3052:	88 1f       	adc	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	5a 95       	dec	r21
    3058:	a9 f7       	brne	.-22     	; 0x3044 <__udivmodhi4_loop>
    305a:	80 95       	com	r24
    305c:	90 95       	com	r25
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	08 95       	ret

00003064 <__udivmodsi4>:
    3064:	a1 e2       	ldi	r26, 0x21	; 33
    3066:	1a 2e       	mov	r1, r26
    3068:	aa 1b       	sub	r26, r26
    306a:	bb 1b       	sub	r27, r27
    306c:	fd 01       	movw	r30, r26
    306e:	0d c0       	rjmp	.+26     	; 0x308a <__udivmodsi4_ep>

00003070 <__udivmodsi4_loop>:
    3070:	aa 1f       	adc	r26, r26
    3072:	bb 1f       	adc	r27, r27
    3074:	ee 1f       	adc	r30, r30
    3076:	ff 1f       	adc	r31, r31
    3078:	a2 17       	cp	r26, r18
    307a:	b3 07       	cpc	r27, r19
    307c:	e4 07       	cpc	r30, r20
    307e:	f5 07       	cpc	r31, r21
    3080:	20 f0       	brcs	.+8      	; 0x308a <__udivmodsi4_ep>
    3082:	a2 1b       	sub	r26, r18
    3084:	b3 0b       	sbc	r27, r19
    3086:	e4 0b       	sbc	r30, r20
    3088:	f5 0b       	sbc	r31, r21

0000308a <__udivmodsi4_ep>:
    308a:	66 1f       	adc	r22, r22
    308c:	77 1f       	adc	r23, r23
    308e:	88 1f       	adc	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	1a 94       	dec	r1
    3094:	69 f7       	brne	.-38     	; 0x3070 <__udivmodsi4_loop>
    3096:	60 95       	com	r22
    3098:	70 95       	com	r23
    309a:	80 95       	com	r24
    309c:	90 95       	com	r25
    309e:	9b 01       	movw	r18, r22
    30a0:	ac 01       	movw	r20, r24
    30a2:	bd 01       	movw	r22, r26
    30a4:	cf 01       	movw	r24, r30
    30a6:	08 95       	ret

000030a8 <__tablejump2__>:
    30a8:	ee 0f       	add	r30, r30
    30aa:	ff 1f       	adc	r31, r31
    30ac:	88 1f       	adc	r24, r24
    30ae:	8b bf       	out	0x3b, r24	; 59
    30b0:	07 90       	elpm	r0, Z+
    30b2:	f6 91       	elpm	r31, Z
    30b4:	e0 2d       	mov	r30, r0
    30b6:	19 94       	eijmp

000030b8 <malloc>:
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	cf 93       	push	r28
    30be:	df 93       	push	r29
    30c0:	82 30       	cpi	r24, 0x02	; 2
    30c2:	91 05       	cpc	r25, r1
    30c4:	10 f4       	brcc	.+4      	; 0x30ca <malloc+0x12>
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	e0 91 d3 22 	lds	r30, 0x22D3	; 0x8022d3 <__flp>
    30ce:	f0 91 d4 22 	lds	r31, 0x22D4	; 0x8022d4 <__flp+0x1>
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	a0 e0       	ldi	r26, 0x00	; 0
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	30 97       	sbiw	r30, 0x00	; 0
    30dc:	19 f1       	breq	.+70     	; 0x3124 <malloc+0x6c>
    30de:	40 81       	ld	r20, Z
    30e0:	51 81       	ldd	r21, Z+1	; 0x01
    30e2:	02 81       	ldd	r16, Z+2	; 0x02
    30e4:	13 81       	ldd	r17, Z+3	; 0x03
    30e6:	48 17       	cp	r20, r24
    30e8:	59 07       	cpc	r21, r25
    30ea:	c8 f0       	brcs	.+50     	; 0x311e <malloc+0x66>
    30ec:	84 17       	cp	r24, r20
    30ee:	95 07       	cpc	r25, r21
    30f0:	69 f4       	brne	.+26     	; 0x310c <malloc+0x54>
    30f2:	10 97       	sbiw	r26, 0x00	; 0
    30f4:	31 f0       	breq	.+12     	; 0x3102 <malloc+0x4a>
    30f6:	12 96       	adiw	r26, 0x02	; 2
    30f8:	0c 93       	st	X, r16
    30fa:	12 97       	sbiw	r26, 0x02	; 2
    30fc:	13 96       	adiw	r26, 0x03	; 3
    30fe:	1c 93       	st	X, r17
    3100:	27 c0       	rjmp	.+78     	; 0x3150 <malloc+0x98>
    3102:	00 93 d3 22 	sts	0x22D3, r16	; 0x8022d3 <__flp>
    3106:	10 93 d4 22 	sts	0x22D4, r17	; 0x8022d4 <__flp+0x1>
    310a:	22 c0       	rjmp	.+68     	; 0x3150 <malloc+0x98>
    310c:	21 15       	cp	r18, r1
    310e:	31 05       	cpc	r19, r1
    3110:	19 f0       	breq	.+6      	; 0x3118 <malloc+0x60>
    3112:	42 17       	cp	r20, r18
    3114:	53 07       	cpc	r21, r19
    3116:	18 f4       	brcc	.+6      	; 0x311e <malloc+0x66>
    3118:	9a 01       	movw	r18, r20
    311a:	bd 01       	movw	r22, r26
    311c:	ef 01       	movw	r28, r30
    311e:	df 01       	movw	r26, r30
    3120:	f8 01       	movw	r30, r16
    3122:	db cf       	rjmp	.-74     	; 0x30da <malloc+0x22>
    3124:	21 15       	cp	r18, r1
    3126:	31 05       	cpc	r19, r1
    3128:	f9 f0       	breq	.+62     	; 0x3168 <malloc+0xb0>
    312a:	28 1b       	sub	r18, r24
    312c:	39 0b       	sbc	r19, r25
    312e:	24 30       	cpi	r18, 0x04	; 4
    3130:	31 05       	cpc	r19, r1
    3132:	80 f4       	brcc	.+32     	; 0x3154 <malloc+0x9c>
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	61 15       	cp	r22, r1
    313a:	71 05       	cpc	r23, r1
    313c:	21 f0       	breq	.+8      	; 0x3146 <malloc+0x8e>
    313e:	fb 01       	movw	r30, r22
    3140:	82 83       	std	Z+2, r24	; 0x02
    3142:	93 83       	std	Z+3, r25	; 0x03
    3144:	04 c0       	rjmp	.+8      	; 0x314e <malloc+0x96>
    3146:	80 93 d3 22 	sts	0x22D3, r24	; 0x8022d3 <__flp>
    314a:	90 93 d4 22 	sts	0x22D4, r25	; 0x8022d4 <__flp+0x1>
    314e:	fe 01       	movw	r30, r28
    3150:	32 96       	adiw	r30, 0x02	; 2
    3152:	44 c0       	rjmp	.+136    	; 0x31dc <malloc+0x124>
    3154:	fe 01       	movw	r30, r28
    3156:	e2 0f       	add	r30, r18
    3158:	f3 1f       	adc	r31, r19
    315a:	81 93       	st	Z+, r24
    315c:	91 93       	st	Z+, r25
    315e:	22 50       	subi	r18, 0x02	; 2
    3160:	31 09       	sbc	r19, r1
    3162:	28 83       	st	Y, r18
    3164:	39 83       	std	Y+1, r19	; 0x01
    3166:	3a c0       	rjmp	.+116    	; 0x31dc <malloc+0x124>
    3168:	20 91 d1 22 	lds	r18, 0x22D1	; 0x8022d1 <__brkval>
    316c:	30 91 d2 22 	lds	r19, 0x22D2	; 0x8022d2 <__brkval+0x1>
    3170:	23 2b       	or	r18, r19
    3172:	41 f4       	brne	.+16     	; 0x3184 <malloc+0xcc>
    3174:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3178:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    317c:	20 93 d1 22 	sts	0x22D1, r18	; 0x8022d1 <__brkval>
    3180:	30 93 d2 22 	sts	0x22D2, r19	; 0x8022d2 <__brkval+0x1>
    3184:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3188:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
    318c:	21 15       	cp	r18, r1
    318e:	31 05       	cpc	r19, r1
    3190:	41 f4       	brne	.+16     	; 0x31a2 <malloc+0xea>
    3192:	2d b7       	in	r18, 0x3d	; 61
    3194:	3e b7       	in	r19, 0x3e	; 62
    3196:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    319a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    319e:	24 1b       	sub	r18, r20
    31a0:	35 0b       	sbc	r19, r21
    31a2:	e0 91 d1 22 	lds	r30, 0x22D1	; 0x8022d1 <__brkval>
    31a6:	f0 91 d2 22 	lds	r31, 0x22D2	; 0x8022d2 <__brkval+0x1>
    31aa:	e2 17       	cp	r30, r18
    31ac:	f3 07       	cpc	r31, r19
    31ae:	a0 f4       	brcc	.+40     	; 0x31d8 <malloc+0x120>
    31b0:	2e 1b       	sub	r18, r30
    31b2:	3f 0b       	sbc	r19, r31
    31b4:	28 17       	cp	r18, r24
    31b6:	39 07       	cpc	r19, r25
    31b8:	78 f0       	brcs	.+30     	; 0x31d8 <malloc+0x120>
    31ba:	ac 01       	movw	r20, r24
    31bc:	4e 5f       	subi	r20, 0xFE	; 254
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	24 17       	cp	r18, r20
    31c2:	35 07       	cpc	r19, r21
    31c4:	48 f0       	brcs	.+18     	; 0x31d8 <malloc+0x120>
    31c6:	4e 0f       	add	r20, r30
    31c8:	5f 1f       	adc	r21, r31
    31ca:	40 93 d1 22 	sts	0x22D1, r20	; 0x8022d1 <__brkval>
    31ce:	50 93 d2 22 	sts	0x22D2, r21	; 0x8022d2 <__brkval+0x1>
    31d2:	81 93       	st	Z+, r24
    31d4:	91 93       	st	Z+, r25
    31d6:	02 c0       	rjmp	.+4      	; 0x31dc <malloc+0x124>
    31d8:	e0 e0       	ldi	r30, 0x00	; 0
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	cf 01       	movw	r24, r30
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <free>:
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <free+0xa>
    31f0:	81 c0       	rjmp	.+258    	; 0x32f4 <free+0x10c>
    31f2:	fc 01       	movw	r30, r24
    31f4:	32 97       	sbiw	r30, 0x02	; 2
    31f6:	12 82       	std	Z+2, r1	; 0x02
    31f8:	13 82       	std	Z+3, r1	; 0x03
    31fa:	a0 91 d3 22 	lds	r26, 0x22D3	; 0x8022d3 <__flp>
    31fe:	b0 91 d4 22 	lds	r27, 0x22D4	; 0x8022d4 <__flp+0x1>
    3202:	10 97       	sbiw	r26, 0x00	; 0
    3204:	81 f4       	brne	.+32     	; 0x3226 <free+0x3e>
    3206:	20 81       	ld	r18, Z
    3208:	31 81       	ldd	r19, Z+1	; 0x01
    320a:	82 0f       	add	r24, r18
    320c:	93 1f       	adc	r25, r19
    320e:	20 91 d1 22 	lds	r18, 0x22D1	; 0x8022d1 <__brkval>
    3212:	30 91 d2 22 	lds	r19, 0x22D2	; 0x8022d2 <__brkval+0x1>
    3216:	28 17       	cp	r18, r24
    3218:	39 07       	cpc	r19, r25
    321a:	51 f5       	brne	.+84     	; 0x3270 <free+0x88>
    321c:	e0 93 d1 22 	sts	0x22D1, r30	; 0x8022d1 <__brkval>
    3220:	f0 93 d2 22 	sts	0x22D2, r31	; 0x8022d2 <__brkval+0x1>
    3224:	67 c0       	rjmp	.+206    	; 0x32f4 <free+0x10c>
    3226:	ed 01       	movw	r28, r26
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	ce 17       	cp	r28, r30
    322e:	df 07       	cpc	r29, r31
    3230:	40 f4       	brcc	.+16     	; 0x3242 <free+0x5a>
    3232:	4a 81       	ldd	r20, Y+2	; 0x02
    3234:	5b 81       	ldd	r21, Y+3	; 0x03
    3236:	9e 01       	movw	r18, r28
    3238:	41 15       	cp	r20, r1
    323a:	51 05       	cpc	r21, r1
    323c:	f1 f0       	breq	.+60     	; 0x327a <free+0x92>
    323e:	ea 01       	movw	r28, r20
    3240:	f5 cf       	rjmp	.-22     	; 0x322c <free+0x44>
    3242:	c2 83       	std	Z+2, r28	; 0x02
    3244:	d3 83       	std	Z+3, r29	; 0x03
    3246:	40 81       	ld	r20, Z
    3248:	51 81       	ldd	r21, Z+1	; 0x01
    324a:	84 0f       	add	r24, r20
    324c:	95 1f       	adc	r25, r21
    324e:	c8 17       	cp	r28, r24
    3250:	d9 07       	cpc	r29, r25
    3252:	59 f4       	brne	.+22     	; 0x326a <free+0x82>
    3254:	88 81       	ld	r24, Y
    3256:	99 81       	ldd	r25, Y+1	; 0x01
    3258:	84 0f       	add	r24, r20
    325a:	95 1f       	adc	r25, r21
    325c:	02 96       	adiw	r24, 0x02	; 2
    325e:	80 83       	st	Z, r24
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	9b 81       	ldd	r25, Y+3	; 0x03
    3266:	82 83       	std	Z+2, r24	; 0x02
    3268:	93 83       	std	Z+3, r25	; 0x03
    326a:	21 15       	cp	r18, r1
    326c:	31 05       	cpc	r19, r1
    326e:	29 f4       	brne	.+10     	; 0x327a <free+0x92>
    3270:	e0 93 d3 22 	sts	0x22D3, r30	; 0x8022d3 <__flp>
    3274:	f0 93 d4 22 	sts	0x22D4, r31	; 0x8022d4 <__flp+0x1>
    3278:	3d c0       	rjmp	.+122    	; 0x32f4 <free+0x10c>
    327a:	e9 01       	movw	r28, r18
    327c:	ea 83       	std	Y+2, r30	; 0x02
    327e:	fb 83       	std	Y+3, r31	; 0x03
    3280:	49 91       	ld	r20, Y+
    3282:	59 91       	ld	r21, Y+
    3284:	c4 0f       	add	r28, r20
    3286:	d5 1f       	adc	r29, r21
    3288:	ec 17       	cp	r30, r28
    328a:	fd 07       	cpc	r31, r29
    328c:	61 f4       	brne	.+24     	; 0x32a6 <free+0xbe>
    328e:	80 81       	ld	r24, Z
    3290:	91 81       	ldd	r25, Z+1	; 0x01
    3292:	84 0f       	add	r24, r20
    3294:	95 1f       	adc	r25, r21
    3296:	02 96       	adiw	r24, 0x02	; 2
    3298:	e9 01       	movw	r28, r18
    329a:	88 83       	st	Y, r24
    329c:	99 83       	std	Y+1, r25	; 0x01
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	8a 83       	std	Y+2, r24	; 0x02
    32a4:	9b 83       	std	Y+3, r25	; 0x03
    32a6:	e0 e0       	ldi	r30, 0x00	; 0
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	12 96       	adiw	r26, 0x02	; 2
    32ac:	8d 91       	ld	r24, X+
    32ae:	9c 91       	ld	r25, X
    32b0:	13 97       	sbiw	r26, 0x03	; 3
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	19 f0       	breq	.+6      	; 0x32bc <free+0xd4>
    32b6:	fd 01       	movw	r30, r26
    32b8:	dc 01       	movw	r26, r24
    32ba:	f7 cf       	rjmp	.-18     	; 0x32aa <free+0xc2>
    32bc:	8d 91       	ld	r24, X+
    32be:	9c 91       	ld	r25, X
    32c0:	11 97       	sbiw	r26, 0x01	; 1
    32c2:	9d 01       	movw	r18, r26
    32c4:	2e 5f       	subi	r18, 0xFE	; 254
    32c6:	3f 4f       	sbci	r19, 0xFF	; 255
    32c8:	82 0f       	add	r24, r18
    32ca:	93 1f       	adc	r25, r19
    32cc:	20 91 d1 22 	lds	r18, 0x22D1	; 0x8022d1 <__brkval>
    32d0:	30 91 d2 22 	lds	r19, 0x22D2	; 0x8022d2 <__brkval+0x1>
    32d4:	28 17       	cp	r18, r24
    32d6:	39 07       	cpc	r19, r25
    32d8:	69 f4       	brne	.+26     	; 0x32f4 <free+0x10c>
    32da:	30 97       	sbiw	r30, 0x00	; 0
    32dc:	29 f4       	brne	.+10     	; 0x32e8 <free+0x100>
    32de:	10 92 d3 22 	sts	0x22D3, r1	; 0x8022d3 <__flp>
    32e2:	10 92 d4 22 	sts	0x22D4, r1	; 0x8022d4 <__flp+0x1>
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <free+0x104>
    32e8:	12 82       	std	Z+2, r1	; 0x02
    32ea:	13 82       	std	Z+3, r1	; 0x03
    32ec:	a0 93 d1 22 	sts	0x22D1, r26	; 0x8022d1 <__brkval>
    32f0:	b0 93 d2 22 	sts	0x22D2, r27	; 0x8022d2 <__brkval+0x1>
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <memcpy>:
    32fa:	fb 01       	movw	r30, r22
    32fc:	dc 01       	movw	r26, r24
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <memcpy+0xa>
    3300:	01 90       	ld	r0, Z+
    3302:	0d 92       	st	X+, r0
    3304:	41 50       	subi	r20, 0x01	; 1
    3306:	50 40       	sbci	r21, 0x00	; 0
    3308:	d8 f7       	brcc	.-10     	; 0x3300 <memcpy+0x6>
    330a:	08 95       	ret

0000330c <snprintf>:
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	2e 97       	sbiw	r28, 0x0e	; 14
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0e 89       	ldd	r16, Y+22	; 0x16
    3320:	1f 89       	ldd	r17, Y+23	; 0x17
    3322:	88 8d       	ldd	r24, Y+24	; 0x18
    3324:	99 8d       	ldd	r25, Y+25	; 0x19
    3326:	26 e0       	ldi	r18, 0x06	; 6
    3328:	2c 83       	std	Y+4, r18	; 0x04
    332a:	09 83       	std	Y+1, r16	; 0x01
    332c:	1a 83       	std	Y+2, r17	; 0x02
    332e:	97 ff       	sbrs	r25, 7
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <snprintf+0x2a>
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e8       	ldi	r25, 0x80	; 128
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	8d 83       	std	Y+5, r24	; 0x05
    333a:	9e 83       	std	Y+6, r25	; 0x06
    333c:	ae 01       	movw	r20, r28
    333e:	44 5e       	subi	r20, 0xE4	; 228
    3340:	5f 4f       	sbci	r21, 0xFF	; 255
    3342:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3344:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3346:	ce 01       	movw	r24, r28
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	16 d0       	rcall	.+44     	; 0x3378 <vfprintf>
    334c:	4d 81       	ldd	r20, Y+5	; 0x05
    334e:	5e 81       	ldd	r21, Y+6	; 0x06
    3350:	57 fd       	sbrc	r21, 7
    3352:	0a c0       	rjmp	.+20     	; 0x3368 <snprintf+0x5c>
    3354:	2f 81       	ldd	r18, Y+7	; 0x07
    3356:	38 85       	ldd	r19, Y+8	; 0x08
    3358:	42 17       	cp	r20, r18
    335a:	53 07       	cpc	r21, r19
    335c:	0c f4       	brge	.+2      	; 0x3360 <snprintf+0x54>
    335e:	9a 01       	movw	r18, r20
    3360:	f8 01       	movw	r30, r16
    3362:	e2 0f       	add	r30, r18
    3364:	f3 1f       	adc	r31, r19
    3366:	10 82       	st	Z, r1
    3368:	2e 96       	adiw	r28, 0x0e	; 14
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	df 91       	pop	r29
    3370:	cf 91       	pop	r28
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	08 95       	ret

00003378 <vfprintf>:
    3378:	2f 92       	push	r2
    337a:	3f 92       	push	r3
    337c:	4f 92       	push	r4
    337e:	5f 92       	push	r5
    3380:	6f 92       	push	r6
    3382:	7f 92       	push	r7
    3384:	8f 92       	push	r8
    3386:	9f 92       	push	r9
    3388:	af 92       	push	r10
    338a:	bf 92       	push	r11
    338c:	cf 92       	push	r12
    338e:	df 92       	push	r13
    3390:	ef 92       	push	r14
    3392:	ff 92       	push	r15
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	cf 93       	push	r28
    339a:	df 93       	push	r29
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	2b 97       	sbiw	r28, 0x0b	; 11
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	6c 01       	movw	r12, r24
    33a8:	7b 01       	movw	r14, r22
    33aa:	8a 01       	movw	r16, r20
    33ac:	fc 01       	movw	r30, r24
    33ae:	16 82       	std	Z+6, r1	; 0x06
    33b0:	17 82       	std	Z+7, r1	; 0x07
    33b2:	83 81       	ldd	r24, Z+3	; 0x03
    33b4:	81 ff       	sbrs	r24, 1
    33b6:	bf c1       	rjmp	.+894    	; 0x3736 <vfprintf+0x3be>
    33b8:	ce 01       	movw	r24, r28
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	3c 01       	movw	r6, r24
    33be:	f6 01       	movw	r30, r12
    33c0:	93 81       	ldd	r25, Z+3	; 0x03
    33c2:	f7 01       	movw	r30, r14
    33c4:	93 fd       	sbrc	r25, 3
    33c6:	85 91       	lpm	r24, Z+
    33c8:	93 ff       	sbrs	r25, 3
    33ca:	81 91       	ld	r24, Z+
    33cc:	7f 01       	movw	r14, r30
    33ce:	88 23       	and	r24, r24
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <vfprintf+0x5c>
    33d2:	ad c1       	rjmp	.+858    	; 0x372e <vfprintf+0x3b6>
    33d4:	85 32       	cpi	r24, 0x25	; 37
    33d6:	39 f4       	brne	.+14     	; 0x33e6 <vfprintf+0x6e>
    33d8:	93 fd       	sbrc	r25, 3
    33da:	85 91       	lpm	r24, Z+
    33dc:	93 ff       	sbrs	r25, 3
    33de:	81 91       	ld	r24, Z+
    33e0:	7f 01       	movw	r14, r30
    33e2:	85 32       	cpi	r24, 0x25	; 37
    33e4:	21 f4       	brne	.+8      	; 0x33ee <vfprintf+0x76>
    33e6:	b6 01       	movw	r22, r12
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	d3 d1       	rcall	.+934    	; 0x3792 <fputc>
    33ec:	e8 cf       	rjmp	.-48     	; 0x33be <vfprintf+0x46>
    33ee:	91 2c       	mov	r9, r1
    33f0:	21 2c       	mov	r2, r1
    33f2:	31 2c       	mov	r3, r1
    33f4:	ff e1       	ldi	r31, 0x1F	; 31
    33f6:	f3 15       	cp	r31, r3
    33f8:	d8 f0       	brcs	.+54     	; 0x3430 <vfprintf+0xb8>
    33fa:	8b 32       	cpi	r24, 0x2B	; 43
    33fc:	79 f0       	breq	.+30     	; 0x341c <vfprintf+0xa4>
    33fe:	38 f4       	brcc	.+14     	; 0x340e <vfprintf+0x96>
    3400:	80 32       	cpi	r24, 0x20	; 32
    3402:	79 f0       	breq	.+30     	; 0x3422 <vfprintf+0xaa>
    3404:	83 32       	cpi	r24, 0x23	; 35
    3406:	a1 f4       	brne	.+40     	; 0x3430 <vfprintf+0xb8>
    3408:	23 2d       	mov	r18, r3
    340a:	20 61       	ori	r18, 0x10	; 16
    340c:	1d c0       	rjmp	.+58     	; 0x3448 <vfprintf+0xd0>
    340e:	8d 32       	cpi	r24, 0x2D	; 45
    3410:	61 f0       	breq	.+24     	; 0x342a <vfprintf+0xb2>
    3412:	80 33       	cpi	r24, 0x30	; 48
    3414:	69 f4       	brne	.+26     	; 0x3430 <vfprintf+0xb8>
    3416:	23 2d       	mov	r18, r3
    3418:	21 60       	ori	r18, 0x01	; 1
    341a:	16 c0       	rjmp	.+44     	; 0x3448 <vfprintf+0xd0>
    341c:	83 2d       	mov	r24, r3
    341e:	82 60       	ori	r24, 0x02	; 2
    3420:	38 2e       	mov	r3, r24
    3422:	e3 2d       	mov	r30, r3
    3424:	e4 60       	ori	r30, 0x04	; 4
    3426:	3e 2e       	mov	r3, r30
    3428:	2a c0       	rjmp	.+84     	; 0x347e <vfprintf+0x106>
    342a:	f3 2d       	mov	r31, r3
    342c:	f8 60       	ori	r31, 0x08	; 8
    342e:	1d c0       	rjmp	.+58     	; 0x346a <vfprintf+0xf2>
    3430:	37 fc       	sbrc	r3, 7
    3432:	2d c0       	rjmp	.+90     	; 0x348e <vfprintf+0x116>
    3434:	20 ed       	ldi	r18, 0xD0	; 208
    3436:	28 0f       	add	r18, r24
    3438:	2a 30       	cpi	r18, 0x0A	; 10
    343a:	40 f0       	brcs	.+16     	; 0x344c <vfprintf+0xd4>
    343c:	8e 32       	cpi	r24, 0x2E	; 46
    343e:	b9 f4       	brne	.+46     	; 0x346e <vfprintf+0xf6>
    3440:	36 fc       	sbrc	r3, 6
    3442:	75 c1       	rjmp	.+746    	; 0x372e <vfprintf+0x3b6>
    3444:	23 2d       	mov	r18, r3
    3446:	20 64       	ori	r18, 0x40	; 64
    3448:	32 2e       	mov	r3, r18
    344a:	19 c0       	rjmp	.+50     	; 0x347e <vfprintf+0x106>
    344c:	36 fe       	sbrs	r3, 6
    344e:	06 c0       	rjmp	.+12     	; 0x345c <vfprintf+0xe4>
    3450:	8a e0       	ldi	r24, 0x0A	; 10
    3452:	98 9e       	mul	r9, r24
    3454:	20 0d       	add	r18, r0
    3456:	11 24       	eor	r1, r1
    3458:	92 2e       	mov	r9, r18
    345a:	11 c0       	rjmp	.+34     	; 0x347e <vfprintf+0x106>
    345c:	ea e0       	ldi	r30, 0x0A	; 10
    345e:	2e 9e       	mul	r2, r30
    3460:	20 0d       	add	r18, r0
    3462:	11 24       	eor	r1, r1
    3464:	22 2e       	mov	r2, r18
    3466:	f3 2d       	mov	r31, r3
    3468:	f0 62       	ori	r31, 0x20	; 32
    346a:	3f 2e       	mov	r3, r31
    346c:	08 c0       	rjmp	.+16     	; 0x347e <vfprintf+0x106>
    346e:	8c 36       	cpi	r24, 0x6C	; 108
    3470:	21 f4       	brne	.+8      	; 0x347a <vfprintf+0x102>
    3472:	83 2d       	mov	r24, r3
    3474:	80 68       	ori	r24, 0x80	; 128
    3476:	38 2e       	mov	r3, r24
    3478:	02 c0       	rjmp	.+4      	; 0x347e <vfprintf+0x106>
    347a:	88 36       	cpi	r24, 0x68	; 104
    347c:	41 f4       	brne	.+16     	; 0x348e <vfprintf+0x116>
    347e:	f7 01       	movw	r30, r14
    3480:	93 fd       	sbrc	r25, 3
    3482:	85 91       	lpm	r24, Z+
    3484:	93 ff       	sbrs	r25, 3
    3486:	81 91       	ld	r24, Z+
    3488:	7f 01       	movw	r14, r30
    348a:	81 11       	cpse	r24, r1
    348c:	b3 cf       	rjmp	.-154    	; 0x33f4 <vfprintf+0x7c>
    348e:	98 2f       	mov	r25, r24
    3490:	9f 7d       	andi	r25, 0xDF	; 223
    3492:	95 54       	subi	r25, 0x45	; 69
    3494:	93 30       	cpi	r25, 0x03	; 3
    3496:	28 f4       	brcc	.+10     	; 0x34a2 <vfprintf+0x12a>
    3498:	0c 5f       	subi	r16, 0xFC	; 252
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	9f e3       	ldi	r25, 0x3F	; 63
    349e:	99 83       	std	Y+1, r25	; 0x01
    34a0:	0d c0       	rjmp	.+26     	; 0x34bc <vfprintf+0x144>
    34a2:	83 36       	cpi	r24, 0x63	; 99
    34a4:	31 f0       	breq	.+12     	; 0x34b2 <vfprintf+0x13a>
    34a6:	83 37       	cpi	r24, 0x73	; 115
    34a8:	71 f0       	breq	.+28     	; 0x34c6 <vfprintf+0x14e>
    34aa:	83 35       	cpi	r24, 0x53	; 83
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <vfprintf+0x138>
    34ae:	55 c0       	rjmp	.+170    	; 0x355a <vfprintf+0x1e2>
    34b0:	20 c0       	rjmp	.+64     	; 0x34f2 <vfprintf+0x17a>
    34b2:	f8 01       	movw	r30, r16
    34b4:	80 81       	ld	r24, Z
    34b6:	89 83       	std	Y+1, r24	; 0x01
    34b8:	0e 5f       	subi	r16, 0xFE	; 254
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
    34bc:	88 24       	eor	r8, r8
    34be:	83 94       	inc	r8
    34c0:	91 2c       	mov	r9, r1
    34c2:	53 01       	movw	r10, r6
    34c4:	12 c0       	rjmp	.+36     	; 0x34ea <vfprintf+0x172>
    34c6:	28 01       	movw	r4, r16
    34c8:	f2 e0       	ldi	r31, 0x02	; 2
    34ca:	4f 0e       	add	r4, r31
    34cc:	51 1c       	adc	r5, r1
    34ce:	f8 01       	movw	r30, r16
    34d0:	a0 80       	ld	r10, Z
    34d2:	b1 80       	ldd	r11, Z+1	; 0x01
    34d4:	36 fe       	sbrs	r3, 6
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <vfprintf+0x166>
    34d8:	69 2d       	mov	r22, r9
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <vfprintf+0x16a>
    34de:	6f ef       	ldi	r22, 0xFF	; 255
    34e0:	7f ef       	ldi	r23, 0xFF	; 255
    34e2:	c5 01       	movw	r24, r10
    34e4:	4b d1       	rcall	.+662    	; 0x377c <strnlen>
    34e6:	4c 01       	movw	r8, r24
    34e8:	82 01       	movw	r16, r4
    34ea:	f3 2d       	mov	r31, r3
    34ec:	ff 77       	andi	r31, 0x7F	; 127
    34ee:	3f 2e       	mov	r3, r31
    34f0:	15 c0       	rjmp	.+42     	; 0x351c <vfprintf+0x1a4>
    34f2:	28 01       	movw	r4, r16
    34f4:	22 e0       	ldi	r18, 0x02	; 2
    34f6:	42 0e       	add	r4, r18
    34f8:	51 1c       	adc	r5, r1
    34fa:	f8 01       	movw	r30, r16
    34fc:	a0 80       	ld	r10, Z
    34fe:	b1 80       	ldd	r11, Z+1	; 0x01
    3500:	36 fe       	sbrs	r3, 6
    3502:	03 c0       	rjmp	.+6      	; 0x350a <vfprintf+0x192>
    3504:	69 2d       	mov	r22, r9
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	02 c0       	rjmp	.+4      	; 0x350e <vfprintf+0x196>
    350a:	6f ef       	ldi	r22, 0xFF	; 255
    350c:	7f ef       	ldi	r23, 0xFF	; 255
    350e:	c5 01       	movw	r24, r10
    3510:	2a d1       	rcall	.+596    	; 0x3766 <strnlen_P>
    3512:	4c 01       	movw	r8, r24
    3514:	f3 2d       	mov	r31, r3
    3516:	f0 68       	ori	r31, 0x80	; 128
    3518:	3f 2e       	mov	r3, r31
    351a:	82 01       	movw	r16, r4
    351c:	33 fc       	sbrc	r3, 3
    351e:	19 c0       	rjmp	.+50     	; 0x3552 <vfprintf+0x1da>
    3520:	82 2d       	mov	r24, r2
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	88 16       	cp	r8, r24
    3526:	99 06       	cpc	r9, r25
    3528:	a0 f4       	brcc	.+40     	; 0x3552 <vfprintf+0x1da>
    352a:	b6 01       	movw	r22, r12
    352c:	80 e2       	ldi	r24, 0x20	; 32
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	30 d1       	rcall	.+608    	; 0x3792 <fputc>
    3532:	2a 94       	dec	r2
    3534:	f5 cf       	rjmp	.-22     	; 0x3520 <vfprintf+0x1a8>
    3536:	f5 01       	movw	r30, r10
    3538:	37 fc       	sbrc	r3, 7
    353a:	85 91       	lpm	r24, Z+
    353c:	37 fe       	sbrs	r3, 7
    353e:	81 91       	ld	r24, Z+
    3540:	5f 01       	movw	r10, r30
    3542:	b6 01       	movw	r22, r12
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	25 d1       	rcall	.+586    	; 0x3792 <fputc>
    3548:	21 10       	cpse	r2, r1
    354a:	2a 94       	dec	r2
    354c:	21 e0       	ldi	r18, 0x01	; 1
    354e:	82 1a       	sub	r8, r18
    3550:	91 08       	sbc	r9, r1
    3552:	81 14       	cp	r8, r1
    3554:	91 04       	cpc	r9, r1
    3556:	79 f7       	brne	.-34     	; 0x3536 <vfprintf+0x1be>
    3558:	e1 c0       	rjmp	.+450    	; 0x371c <vfprintf+0x3a4>
    355a:	84 36       	cpi	r24, 0x64	; 100
    355c:	11 f0       	breq	.+4      	; 0x3562 <vfprintf+0x1ea>
    355e:	89 36       	cpi	r24, 0x69	; 105
    3560:	39 f5       	brne	.+78     	; 0x35b0 <vfprintf+0x238>
    3562:	f8 01       	movw	r30, r16
    3564:	37 fe       	sbrs	r3, 7
    3566:	07 c0       	rjmp	.+14     	; 0x3576 <vfprintf+0x1fe>
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	0c 5f       	subi	r16, 0xFC	; 252
    3572:	1f 4f       	sbci	r17, 0xFF	; 255
    3574:	08 c0       	rjmp	.+16     	; 0x3586 <vfprintf+0x20e>
    3576:	60 81       	ld	r22, Z
    3578:	71 81       	ldd	r23, Z+1	; 0x01
    357a:	07 2e       	mov	r0, r23
    357c:	00 0c       	add	r0, r0
    357e:	88 0b       	sbc	r24, r24
    3580:	99 0b       	sbc	r25, r25
    3582:	0e 5f       	subi	r16, 0xFE	; 254
    3584:	1f 4f       	sbci	r17, 0xFF	; 255
    3586:	f3 2d       	mov	r31, r3
    3588:	ff 76       	andi	r31, 0x6F	; 111
    358a:	3f 2e       	mov	r3, r31
    358c:	97 ff       	sbrs	r25, 7
    358e:	09 c0       	rjmp	.+18     	; 0x35a2 <vfprintf+0x22a>
    3590:	90 95       	com	r25
    3592:	80 95       	com	r24
    3594:	70 95       	com	r23
    3596:	61 95       	neg	r22
    3598:	7f 4f       	sbci	r23, 0xFF	; 255
    359a:	8f 4f       	sbci	r24, 0xFF	; 255
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	f0 68       	ori	r31, 0x80	; 128
    35a0:	3f 2e       	mov	r3, r31
    35a2:	2a e0       	ldi	r18, 0x0A	; 10
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	a3 01       	movw	r20, r6
    35a8:	30 d1       	rcall	.+608    	; 0x380a <__ultoa_invert>
    35aa:	88 2e       	mov	r8, r24
    35ac:	86 18       	sub	r8, r6
    35ae:	44 c0       	rjmp	.+136    	; 0x3638 <vfprintf+0x2c0>
    35b0:	85 37       	cpi	r24, 0x75	; 117
    35b2:	31 f4       	brne	.+12     	; 0x35c0 <vfprintf+0x248>
    35b4:	23 2d       	mov	r18, r3
    35b6:	2f 7e       	andi	r18, 0xEF	; 239
    35b8:	b2 2e       	mov	r11, r18
    35ba:	2a e0       	ldi	r18, 0x0A	; 10
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	25 c0       	rjmp	.+74     	; 0x360a <vfprintf+0x292>
    35c0:	93 2d       	mov	r25, r3
    35c2:	99 7f       	andi	r25, 0xF9	; 249
    35c4:	b9 2e       	mov	r11, r25
    35c6:	8f 36       	cpi	r24, 0x6F	; 111
    35c8:	c1 f0       	breq	.+48     	; 0x35fa <vfprintf+0x282>
    35ca:	18 f4       	brcc	.+6      	; 0x35d2 <vfprintf+0x25a>
    35cc:	88 35       	cpi	r24, 0x58	; 88
    35ce:	79 f0       	breq	.+30     	; 0x35ee <vfprintf+0x276>
    35d0:	ae c0       	rjmp	.+348    	; 0x372e <vfprintf+0x3b6>
    35d2:	80 37       	cpi	r24, 0x70	; 112
    35d4:	19 f0       	breq	.+6      	; 0x35dc <vfprintf+0x264>
    35d6:	88 37       	cpi	r24, 0x78	; 120
    35d8:	21 f0       	breq	.+8      	; 0x35e2 <vfprintf+0x26a>
    35da:	a9 c0       	rjmp	.+338    	; 0x372e <vfprintf+0x3b6>
    35dc:	e9 2f       	mov	r30, r25
    35de:	e0 61       	ori	r30, 0x10	; 16
    35e0:	be 2e       	mov	r11, r30
    35e2:	b4 fe       	sbrs	r11, 4
    35e4:	0d c0       	rjmp	.+26     	; 0x3600 <vfprintf+0x288>
    35e6:	fb 2d       	mov	r31, r11
    35e8:	f4 60       	ori	r31, 0x04	; 4
    35ea:	bf 2e       	mov	r11, r31
    35ec:	09 c0       	rjmp	.+18     	; 0x3600 <vfprintf+0x288>
    35ee:	34 fe       	sbrs	r3, 4
    35f0:	0a c0       	rjmp	.+20     	; 0x3606 <vfprintf+0x28e>
    35f2:	29 2f       	mov	r18, r25
    35f4:	26 60       	ori	r18, 0x06	; 6
    35f6:	b2 2e       	mov	r11, r18
    35f8:	06 c0       	rjmp	.+12     	; 0x3606 <vfprintf+0x28e>
    35fa:	28 e0       	ldi	r18, 0x08	; 8
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <vfprintf+0x292>
    3600:	20 e1       	ldi	r18, 0x10	; 16
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	02 c0       	rjmp	.+4      	; 0x360a <vfprintf+0x292>
    3606:	20 e1       	ldi	r18, 0x10	; 16
    3608:	32 e0       	ldi	r19, 0x02	; 2
    360a:	f8 01       	movw	r30, r16
    360c:	b7 fe       	sbrs	r11, 7
    360e:	07 c0       	rjmp	.+14     	; 0x361e <vfprintf+0x2a6>
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	0c 5f       	subi	r16, 0xFC	; 252
    361a:	1f 4f       	sbci	r17, 0xFF	; 255
    361c:	06 c0       	rjmp	.+12     	; 0x362a <vfprintf+0x2b2>
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 5f       	subi	r16, 0xFE	; 254
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	a3 01       	movw	r20, r6
    362c:	ee d0       	rcall	.+476    	; 0x380a <__ultoa_invert>
    362e:	88 2e       	mov	r8, r24
    3630:	86 18       	sub	r8, r6
    3632:	fb 2d       	mov	r31, r11
    3634:	ff 77       	andi	r31, 0x7F	; 127
    3636:	3f 2e       	mov	r3, r31
    3638:	36 fe       	sbrs	r3, 6
    363a:	0d c0       	rjmp	.+26     	; 0x3656 <vfprintf+0x2de>
    363c:	23 2d       	mov	r18, r3
    363e:	2e 7f       	andi	r18, 0xFE	; 254
    3640:	a2 2e       	mov	r10, r18
    3642:	89 14       	cp	r8, r9
    3644:	58 f4       	brcc	.+22     	; 0x365c <vfprintf+0x2e4>
    3646:	34 fe       	sbrs	r3, 4
    3648:	0b c0       	rjmp	.+22     	; 0x3660 <vfprintf+0x2e8>
    364a:	32 fc       	sbrc	r3, 2
    364c:	09 c0       	rjmp	.+18     	; 0x3660 <vfprintf+0x2e8>
    364e:	83 2d       	mov	r24, r3
    3650:	8e 7e       	andi	r24, 0xEE	; 238
    3652:	a8 2e       	mov	r10, r24
    3654:	05 c0       	rjmp	.+10     	; 0x3660 <vfprintf+0x2e8>
    3656:	b8 2c       	mov	r11, r8
    3658:	a3 2c       	mov	r10, r3
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <vfprintf+0x2ea>
    365c:	b8 2c       	mov	r11, r8
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <vfprintf+0x2ea>
    3660:	b9 2c       	mov	r11, r9
    3662:	a4 fe       	sbrs	r10, 4
    3664:	0f c0       	rjmp	.+30     	; 0x3684 <vfprintf+0x30c>
    3666:	fe 01       	movw	r30, r28
    3668:	e8 0d       	add	r30, r8
    366a:	f1 1d       	adc	r31, r1
    366c:	80 81       	ld	r24, Z
    366e:	80 33       	cpi	r24, 0x30	; 48
    3670:	21 f4       	brne	.+8      	; 0x367a <vfprintf+0x302>
    3672:	9a 2d       	mov	r25, r10
    3674:	99 7e       	andi	r25, 0xE9	; 233
    3676:	a9 2e       	mov	r10, r25
    3678:	09 c0       	rjmp	.+18     	; 0x368c <vfprintf+0x314>
    367a:	a2 fe       	sbrs	r10, 2
    367c:	06 c0       	rjmp	.+12     	; 0x368a <vfprintf+0x312>
    367e:	b3 94       	inc	r11
    3680:	b3 94       	inc	r11
    3682:	04 c0       	rjmp	.+8      	; 0x368c <vfprintf+0x314>
    3684:	8a 2d       	mov	r24, r10
    3686:	86 78       	andi	r24, 0x86	; 134
    3688:	09 f0       	breq	.+2      	; 0x368c <vfprintf+0x314>
    368a:	b3 94       	inc	r11
    368c:	a3 fc       	sbrc	r10, 3
    368e:	10 c0       	rjmp	.+32     	; 0x36b0 <vfprintf+0x338>
    3690:	a0 fe       	sbrs	r10, 0
    3692:	06 c0       	rjmp	.+12     	; 0x36a0 <vfprintf+0x328>
    3694:	b2 14       	cp	r11, r2
    3696:	80 f4       	brcc	.+32     	; 0x36b8 <vfprintf+0x340>
    3698:	28 0c       	add	r2, r8
    369a:	92 2c       	mov	r9, r2
    369c:	9b 18       	sub	r9, r11
    369e:	0d c0       	rjmp	.+26     	; 0x36ba <vfprintf+0x342>
    36a0:	b2 14       	cp	r11, r2
    36a2:	58 f4       	brcc	.+22     	; 0x36ba <vfprintf+0x342>
    36a4:	b6 01       	movw	r22, r12
    36a6:	80 e2       	ldi	r24, 0x20	; 32
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	73 d0       	rcall	.+230    	; 0x3792 <fputc>
    36ac:	b3 94       	inc	r11
    36ae:	f8 cf       	rjmp	.-16     	; 0x36a0 <vfprintf+0x328>
    36b0:	b2 14       	cp	r11, r2
    36b2:	18 f4       	brcc	.+6      	; 0x36ba <vfprintf+0x342>
    36b4:	2b 18       	sub	r2, r11
    36b6:	02 c0       	rjmp	.+4      	; 0x36bc <vfprintf+0x344>
    36b8:	98 2c       	mov	r9, r8
    36ba:	21 2c       	mov	r2, r1
    36bc:	a4 fe       	sbrs	r10, 4
    36be:	0f c0       	rjmp	.+30     	; 0x36de <vfprintf+0x366>
    36c0:	b6 01       	movw	r22, r12
    36c2:	80 e3       	ldi	r24, 0x30	; 48
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	65 d0       	rcall	.+202    	; 0x3792 <fputc>
    36c8:	a2 fe       	sbrs	r10, 2
    36ca:	16 c0       	rjmp	.+44     	; 0x36f8 <vfprintf+0x380>
    36cc:	a1 fc       	sbrc	r10, 1
    36ce:	03 c0       	rjmp	.+6      	; 0x36d6 <vfprintf+0x35e>
    36d0:	88 e7       	ldi	r24, 0x78	; 120
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <vfprintf+0x362>
    36d6:	88 e5       	ldi	r24, 0x58	; 88
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	b6 01       	movw	r22, r12
    36dc:	0c c0       	rjmp	.+24     	; 0x36f6 <vfprintf+0x37e>
    36de:	8a 2d       	mov	r24, r10
    36e0:	86 78       	andi	r24, 0x86	; 134
    36e2:	51 f0       	breq	.+20     	; 0x36f8 <vfprintf+0x380>
    36e4:	a1 fe       	sbrs	r10, 1
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <vfprintf+0x374>
    36e8:	8b e2       	ldi	r24, 0x2B	; 43
    36ea:	01 c0       	rjmp	.+2      	; 0x36ee <vfprintf+0x376>
    36ec:	80 e2       	ldi	r24, 0x20	; 32
    36ee:	a7 fc       	sbrc	r10, 7
    36f0:	8d e2       	ldi	r24, 0x2D	; 45
    36f2:	b6 01       	movw	r22, r12
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	4d d0       	rcall	.+154    	; 0x3792 <fputc>
    36f8:	89 14       	cp	r8, r9
    36fa:	30 f4       	brcc	.+12     	; 0x3708 <vfprintf+0x390>
    36fc:	b6 01       	movw	r22, r12
    36fe:	80 e3       	ldi	r24, 0x30	; 48
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	47 d0       	rcall	.+142    	; 0x3792 <fputc>
    3704:	9a 94       	dec	r9
    3706:	f8 cf       	rjmp	.-16     	; 0x36f8 <vfprintf+0x380>
    3708:	8a 94       	dec	r8
    370a:	f3 01       	movw	r30, r6
    370c:	e8 0d       	add	r30, r8
    370e:	f1 1d       	adc	r31, r1
    3710:	80 81       	ld	r24, Z
    3712:	b6 01       	movw	r22, r12
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	3d d0       	rcall	.+122    	; 0x3792 <fputc>
    3718:	81 10       	cpse	r8, r1
    371a:	f6 cf       	rjmp	.-20     	; 0x3708 <vfprintf+0x390>
    371c:	22 20       	and	r2, r2
    371e:	09 f4       	brne	.+2      	; 0x3722 <vfprintf+0x3aa>
    3720:	4e ce       	rjmp	.-868    	; 0x33be <vfprintf+0x46>
    3722:	b6 01       	movw	r22, r12
    3724:	80 e2       	ldi	r24, 0x20	; 32
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	34 d0       	rcall	.+104    	; 0x3792 <fputc>
    372a:	2a 94       	dec	r2
    372c:	f7 cf       	rjmp	.-18     	; 0x371c <vfprintf+0x3a4>
    372e:	f6 01       	movw	r30, r12
    3730:	86 81       	ldd	r24, Z+6	; 0x06
    3732:	97 81       	ldd	r25, Z+7	; 0x07
    3734:	02 c0       	rjmp	.+4      	; 0x373a <vfprintf+0x3c2>
    3736:	8f ef       	ldi	r24, 0xFF	; 255
    3738:	9f ef       	ldi	r25, 0xFF	; 255
    373a:	2b 96       	adiw	r28, 0x0b	; 11
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	ff 90       	pop	r15
    374a:	ef 90       	pop	r14
    374c:	df 90       	pop	r13
    374e:	cf 90       	pop	r12
    3750:	bf 90       	pop	r11
    3752:	af 90       	pop	r10
    3754:	9f 90       	pop	r9
    3756:	8f 90       	pop	r8
    3758:	7f 90       	pop	r7
    375a:	6f 90       	pop	r6
    375c:	5f 90       	pop	r5
    375e:	4f 90       	pop	r4
    3760:	3f 90       	pop	r3
    3762:	2f 90       	pop	r2
    3764:	08 95       	ret

00003766 <strnlen_P>:
    3766:	fc 01       	movw	r30, r24
    3768:	05 90       	lpm	r0, Z+
    376a:	61 50       	subi	r22, 0x01	; 1
    376c:	70 40       	sbci	r23, 0x00	; 0
    376e:	01 10       	cpse	r0, r1
    3770:	d8 f7       	brcc	.-10     	; 0x3768 <strnlen_P+0x2>
    3772:	80 95       	com	r24
    3774:	90 95       	com	r25
    3776:	8e 0f       	add	r24, r30
    3778:	9f 1f       	adc	r25, r31
    377a:	08 95       	ret

0000377c <strnlen>:
    377c:	fc 01       	movw	r30, r24
    377e:	61 50       	subi	r22, 0x01	; 1
    3780:	70 40       	sbci	r23, 0x00	; 0
    3782:	01 90       	ld	r0, Z+
    3784:	01 10       	cpse	r0, r1
    3786:	d8 f7       	brcc	.-10     	; 0x377e <strnlen+0x2>
    3788:	80 95       	com	r24
    378a:	90 95       	com	r25
    378c:	8e 0f       	add	r24, r30
    378e:	9f 1f       	adc	r25, r31
    3790:	08 95       	ret

00003792 <fputc>:
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	fb 01       	movw	r30, r22
    379c:	23 81       	ldd	r18, Z+3	; 0x03
    379e:	21 fd       	sbrc	r18, 1
    37a0:	03 c0       	rjmp	.+6      	; 0x37a8 <fputc+0x16>
    37a2:	8f ef       	ldi	r24, 0xFF	; 255
    37a4:	9f ef       	ldi	r25, 0xFF	; 255
    37a6:	2c c0       	rjmp	.+88     	; 0x3800 <fputc+0x6e>
    37a8:	22 ff       	sbrs	r18, 2
    37aa:	16 c0       	rjmp	.+44     	; 0x37d8 <fputc+0x46>
    37ac:	46 81       	ldd	r20, Z+6	; 0x06
    37ae:	57 81       	ldd	r21, Z+7	; 0x07
    37b0:	24 81       	ldd	r18, Z+4	; 0x04
    37b2:	35 81       	ldd	r19, Z+5	; 0x05
    37b4:	42 17       	cp	r20, r18
    37b6:	53 07       	cpc	r21, r19
    37b8:	44 f4       	brge	.+16     	; 0x37ca <fputc+0x38>
    37ba:	a0 81       	ld	r26, Z
    37bc:	b1 81       	ldd	r27, Z+1	; 0x01
    37be:	9d 01       	movw	r18, r26
    37c0:	2f 5f       	subi	r18, 0xFF	; 255
    37c2:	3f 4f       	sbci	r19, 0xFF	; 255
    37c4:	20 83       	st	Z, r18
    37c6:	31 83       	std	Z+1, r19	; 0x01
    37c8:	8c 93       	st	X, r24
    37ca:	26 81       	ldd	r18, Z+6	; 0x06
    37cc:	37 81       	ldd	r19, Z+7	; 0x07
    37ce:	2f 5f       	subi	r18, 0xFF	; 255
    37d0:	3f 4f       	sbci	r19, 0xFF	; 255
    37d2:	26 83       	std	Z+6, r18	; 0x06
    37d4:	37 83       	std	Z+7, r19	; 0x07
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <fputc+0x6e>
    37d8:	8b 01       	movw	r16, r22
    37da:	ec 01       	movw	r28, r24
    37dc:	fb 01       	movw	r30, r22
    37de:	00 84       	ldd	r0, Z+8	; 0x08
    37e0:	f1 85       	ldd	r31, Z+9	; 0x09
    37e2:	e0 2d       	mov	r30, r0
    37e4:	19 95       	eicall
    37e6:	89 2b       	or	r24, r25
    37e8:	e1 f6       	brne	.-72     	; 0x37a2 <fputc+0x10>
    37ea:	d8 01       	movw	r26, r16
    37ec:	16 96       	adiw	r26, 0x06	; 6
    37ee:	8d 91       	ld	r24, X+
    37f0:	9c 91       	ld	r25, X
    37f2:	17 97       	sbiw	r26, 0x07	; 7
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	16 96       	adiw	r26, 0x06	; 6
    37f8:	8d 93       	st	X+, r24
    37fa:	9c 93       	st	X, r25
    37fc:	17 97       	sbiw	r26, 0x07	; 7
    37fe:	ce 01       	movw	r24, r28
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	08 95       	ret

0000380a <__ultoa_invert>:
    380a:	fa 01       	movw	r30, r20
    380c:	aa 27       	eor	r26, r26
    380e:	28 30       	cpi	r18, 0x08	; 8
    3810:	51 f1       	breq	.+84     	; 0x3866 <__ultoa_invert+0x5c>
    3812:	20 31       	cpi	r18, 0x10	; 16
    3814:	81 f1       	breq	.+96     	; 0x3876 <__ultoa_invert+0x6c>
    3816:	e8 94       	clt
    3818:	6f 93       	push	r22
    381a:	6e 7f       	andi	r22, 0xFE	; 254
    381c:	6e 5f       	subi	r22, 0xFE	; 254
    381e:	7f 4f       	sbci	r23, 0xFF	; 255
    3820:	8f 4f       	sbci	r24, 0xFF	; 255
    3822:	9f 4f       	sbci	r25, 0xFF	; 255
    3824:	af 4f       	sbci	r26, 0xFF	; 255
    3826:	b1 e0       	ldi	r27, 0x01	; 1
    3828:	3e d0       	rcall	.+124    	; 0x38a6 <__ultoa_invert+0x9c>
    382a:	b4 e0       	ldi	r27, 0x04	; 4
    382c:	3c d0       	rcall	.+120    	; 0x38a6 <__ultoa_invert+0x9c>
    382e:	67 0f       	add	r22, r23
    3830:	78 1f       	adc	r23, r24
    3832:	89 1f       	adc	r24, r25
    3834:	9a 1f       	adc	r25, r26
    3836:	a1 1d       	adc	r26, r1
    3838:	68 0f       	add	r22, r24
    383a:	79 1f       	adc	r23, r25
    383c:	8a 1f       	adc	r24, r26
    383e:	91 1d       	adc	r25, r1
    3840:	a1 1d       	adc	r26, r1
    3842:	6a 0f       	add	r22, r26
    3844:	71 1d       	adc	r23, r1
    3846:	81 1d       	adc	r24, r1
    3848:	91 1d       	adc	r25, r1
    384a:	a1 1d       	adc	r26, r1
    384c:	20 d0       	rcall	.+64     	; 0x388e <__ultoa_invert+0x84>
    384e:	09 f4       	brne	.+2      	; 0x3852 <__ultoa_invert+0x48>
    3850:	68 94       	set
    3852:	3f 91       	pop	r19
    3854:	2a e0       	ldi	r18, 0x0A	; 10
    3856:	26 9f       	mul	r18, r22
    3858:	11 24       	eor	r1, r1
    385a:	30 19       	sub	r19, r0
    385c:	30 5d       	subi	r19, 0xD0	; 208
    385e:	31 93       	st	Z+, r19
    3860:	de f6       	brtc	.-74     	; 0x3818 <__ultoa_invert+0xe>
    3862:	cf 01       	movw	r24, r30
    3864:	08 95       	ret
    3866:	46 2f       	mov	r20, r22
    3868:	47 70       	andi	r20, 0x07	; 7
    386a:	40 5d       	subi	r20, 0xD0	; 208
    386c:	41 93       	st	Z+, r20
    386e:	b3 e0       	ldi	r27, 0x03	; 3
    3870:	0f d0       	rcall	.+30     	; 0x3890 <__ultoa_invert+0x86>
    3872:	c9 f7       	brne	.-14     	; 0x3866 <__ultoa_invert+0x5c>
    3874:	f6 cf       	rjmp	.-20     	; 0x3862 <__ultoa_invert+0x58>
    3876:	46 2f       	mov	r20, r22
    3878:	4f 70       	andi	r20, 0x0F	; 15
    387a:	40 5d       	subi	r20, 0xD0	; 208
    387c:	4a 33       	cpi	r20, 0x3A	; 58
    387e:	18 f0       	brcs	.+6      	; 0x3886 <__ultoa_invert+0x7c>
    3880:	49 5d       	subi	r20, 0xD9	; 217
    3882:	31 fd       	sbrc	r19, 1
    3884:	40 52       	subi	r20, 0x20	; 32
    3886:	41 93       	st	Z+, r20
    3888:	02 d0       	rcall	.+4      	; 0x388e <__ultoa_invert+0x84>
    388a:	a9 f7       	brne	.-22     	; 0x3876 <__ultoa_invert+0x6c>
    388c:	ea cf       	rjmp	.-44     	; 0x3862 <__ultoa_invert+0x58>
    388e:	b4 e0       	ldi	r27, 0x04	; 4
    3890:	a6 95       	lsr	r26
    3892:	97 95       	ror	r25
    3894:	87 95       	ror	r24
    3896:	77 95       	ror	r23
    3898:	67 95       	ror	r22
    389a:	ba 95       	dec	r27
    389c:	c9 f7       	brne	.-14     	; 0x3890 <__ultoa_invert+0x86>
    389e:	00 97       	sbiw	r24, 0x00	; 0
    38a0:	61 05       	cpc	r22, r1
    38a2:	71 05       	cpc	r23, r1
    38a4:	08 95       	ret
    38a6:	9b 01       	movw	r18, r22
    38a8:	ac 01       	movw	r20, r24
    38aa:	0a 2e       	mov	r0, r26
    38ac:	06 94       	lsr	r0
    38ae:	57 95       	ror	r21
    38b0:	47 95       	ror	r20
    38b2:	37 95       	ror	r19
    38b4:	27 95       	ror	r18
    38b6:	ba 95       	dec	r27
    38b8:	c9 f7       	brne	.-14     	; 0x38ac <__ultoa_invert+0xa2>
    38ba:	62 0f       	add	r22, r18
    38bc:	73 1f       	adc	r23, r19
    38be:	84 1f       	adc	r24, r20
    38c0:	95 1f       	adc	r25, r21
    38c2:	a0 1d       	adc	r26, r0
    38c4:	08 95       	ret

000038c6 <_exit>:
    38c6:	f8 94       	cli

000038c8 <__stop_program>:
    38c8:	ff cf       	rjmp	.-2      	; 0x38c8 <__stop_program>
