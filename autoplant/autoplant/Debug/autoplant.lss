
autoplant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000242a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00802000  0000242a  000024be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027a  008020ae  008020ae  0000256c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  000025e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010eb8  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005646  00000000  00000000  000138e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000092eb  00000000  00000000  00018f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef0  00000000  00000000  0002221c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003453c  00000000  00000000  0002310c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f80  00000000  00000000  00057648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0005e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8f4  00000000  00000000  0005eb20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c7       	rjmp	.+3752   	; 0xf46 <__vector_39>
      9e:	00 00       	nop
      a0:	84 c7       	rjmp	.+3848   	; 0xfaa <__vector_40>
      a2:	00 00       	nop
      a4:	b4 c7       	rjmp	.+3944   	; 0x100e <__vector_41>
      a6:	00 00       	nop
      a8:	e4 c7       	rjmp	.+4040   	; 0x1072 <__vector_42>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4c c6       	rjmp	.+3224   	; 0xdb6 <__vector_71>
     11e:	00 00       	nop
     120:	7c c6       	rjmp	.+3320   	; 0xe1a <__vector_72>
     122:	00 00       	nop
     124:	ac c6       	rjmp	.+3416   	; 0xe7e <__vector_73>
     126:	00 00       	nop
     128:	dc c6       	rjmp	.+3512   	; 0xee2 <__vector_74>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d78>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6560>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6538>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5560>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d38>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea e2       	ldi	r30, 0x2A	; 42
     4a6:	f4 e2       	ldi	r31, 0x24	; 36
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 3a       	cpi	r26, 0xAE	; 174
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	ae ea       	ldi	r26, 0xAE	; 174
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a8 32       	cpi	r26, 0x28	; 40
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <main>
     4cc:	0c 94 13 12 	jmp	0x2426	; 0x2426 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <adc_handler>:
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
	}
	return retval;
}
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	61 30       	cpi	r22, 0x01	; 1
     4e0:	69 f5       	brne	.+90     	; 0x53c <adc_handler+0x6a>
     4e2:	80 91 af 20 	lds	r24, 0x20AF	; 0x8020af <light_sensor_samples.4860>
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 af 20 	sts	0x20AF, r24	; 0x8020af <light_sensor_samples.4860>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	39 f4       	brne	.+14     	; 0x4fe <adc_handler+0x2c>
     4f0:	40 93 b0 20 	sts	0x20B0, r20	; 0x8020b0 <light_sensor_sample>
     4f4:	50 93 b1 20 	sts	0x20B1, r21	; 0x8020b1 <light_sensor_sample+0x1>
     4f8:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <light_sensor_data_ready>
     4fc:	14 c0       	rjmp	.+40     	; 0x526 <adc_handler+0x54>
     4fe:	20 91 b0 20 	lds	r18, 0x20B0	; 0x8020b0 <light_sensor_sample>
     502:	30 91 b1 20 	lds	r19, 0x20B1	; 0x8020b1 <light_sensor_sample+0x1>
     506:	42 0f       	add	r20, r18
     508:	53 1f       	adc	r21, r19
     50a:	56 95       	lsr	r21
     50c:	47 95       	ror	r20
     50e:	40 93 b0 20 	sts	0x20B0, r20	; 0x8020b0 <light_sensor_sample>
     512:	50 93 b1 20 	sts	0x20B1, r21	; 0x8020b1 <light_sensor_sample+0x1>
     516:	84 30       	cpi	r24, 0x04	; 4
     518:	31 f4       	brne	.+12     	; 0x526 <adc_handler+0x54>
     51a:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <light_sensor_samples.4860>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <light_sensor_data_ready>
     524:	39 c0       	rjmp	.+114    	; 0x598 <adc_handler+0xc6>
     526:	8f b7       	in	r24, 0x3f	; 63
     528:	8a 83       	std	Y+2, r24	; 0x02
     52a:	f8 94       	cli
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	80 81       	ld	r24, Z
     534:	84 60       	ori	r24, 0x04	; 4
     536:	80 83       	st	Z, r24
     538:	9f bf       	out	0x3f, r25	; 63
     53a:	2e c0       	rjmp	.+92     	; 0x598 <adc_handler+0xc6>
     53c:	62 30       	cpi	r22, 0x02	; 2
     53e:	61 f5       	brne	.+88     	; 0x598 <adc_handler+0xc6>
     540:	80 91 ae 20 	lds	r24, 0x20AE	; 0x8020ae <__data_end>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <__data_end>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	39 f4       	brne	.+14     	; 0x55c <adc_handler+0x8a>
     54e:	40 93 b2 20 	sts	0x20B2, r20	; 0x8020b2 <ntc_sensor_sample>
     552:	50 93 b3 20 	sts	0x20B3, r21	; 0x8020b3 <ntc_sensor_sample+0x1>
     556:	10 92 b5 20 	sts	0x20B5, r1	; 0x8020b5 <ntc_sensor_data_ready>
     55a:	14 c0       	rjmp	.+40     	; 0x584 <adc_handler+0xb2>
     55c:	20 91 b2 20 	lds	r18, 0x20B2	; 0x8020b2 <ntc_sensor_sample>
     560:	30 91 b3 20 	lds	r19, 0x20B3	; 0x8020b3 <ntc_sensor_sample+0x1>
     564:	42 0f       	add	r20, r18
     566:	53 1f       	adc	r21, r19
     568:	56 95       	lsr	r21
     56a:	47 95       	ror	r20
     56c:	40 93 b2 20 	sts	0x20B2, r20	; 0x8020b2 <ntc_sensor_sample>
     570:	50 93 b3 20 	sts	0x20B3, r21	; 0x8020b3 <ntc_sensor_sample+0x1>
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	31 f4       	brne	.+12     	; 0x584 <adc_handler+0xb2>
     578:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <__data_end>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <ntc_sensor_data_ready>
     582:	0a c0       	rjmp	.+20     	; 0x598 <adc_handler+0xc6>
     584:	8f b7       	in	r24, 0x3f	; 63
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	f8 94       	cli
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	e0 e0       	ldi	r30, 0x00	; 0
     58e:	f2 e0       	ldi	r31, 0x02	; 2
     590:	80 81       	ld	r24, Z
     592:	88 60       	ori	r24, 0x08	; 8
     594:	80 83       	st	Z, r24
     596:	9f bf       	out	0x3f, r25	; 63
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <lightsensor_data_is_ready>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8f b7       	in	r24, 0x3f	; 63
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	f8 94       	cli
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <light_sensor_data_ready>
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <lightsensor_data_is_ready+0x22>
     5bc:	10 92 b4 20 	sts	0x20B4, r1	; 0x8020b4 <light_sensor_data_ready>
     5c0:	9f bf       	out	0x3f, r25	; 63
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <lightsensor_data_is_ready+0x24>
     5c4:	9f bf       	out	0x3f, r25	; 63
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <adc_sensors_init>:
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	2b 97       	sbiw	r28, 0x0b	; 11
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	be 01       	movw	r22, r28
     5e0:	6f 5f       	subi	r22, 0xFF	; 255
     5e2:	7f 4f       	sbci	r23, 0xFF	; 255
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	dc d5       	rcall	.+3000   	; 0x11a2 <adc_read_configuration>
     5ea:	ae 01       	movw	r20, r28
     5ec:	48 5f       	subi	r20, 0xF8	; 248
     5ee:	5f 4f       	sbci	r21, 0xFF	; 255
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	59 d6       	rcall	.+3250   	; 0x12aa <adcch_read_configuration>
     5f8:	8a 81       	ldd	r24, Y+2	; 0x02
     5fa:	9b 81       	ldd	r25, Y+3	; 0x03
     5fc:	9f 78       	andi	r25, 0x8F	; 143
     5fe:	90 61       	ori	r25, 0x10	; 16
     600:	9b 83       	std	Y+3, r25	; 0x03
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	9d 83       	std	Y+5, r25	; 0x05
     606:	81 7e       	andi	r24, 0xE1	; 225
     608:	80 61       	ori	r24, 0x10	; 16
     60a:	8a 83       	std	Y+2, r24	; 0x02
     60c:	1c 82       	std	Y+4, r1	; 0x04
     60e:	be 01       	movw	r22, r28
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	5e d5       	rcall	.+2748   	; 0x10d6 <adc_write_configuration>
     61a:	69 e6       	ldi	r22, 0x69	; 105
     61c:	72 e0       	ldi	r23, 0x02	; 2
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	3d d3       	rcall	.+1658   	; 0xc9e <adc_set_callback>
     624:	11 e0       	ldi	r17, 0x01	; 1
     626:	18 87       	std	Y+8, r17	; 0x08
     628:	19 86       	std	Y+9, r1	; 0x09
     62a:	8a 85       	ldd	r24, Y+10	; 0x0a
     62c:	80 7f       	andi	r24, 0xF0	; 240
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	8a 87       	std	Y+10, r24	; 0x0a
     632:	ae 01       	movw	r20, r28
     634:	48 5f       	subi	r20, 0xF8	; 248
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	ea d5       	rcall	.+3028   	; 0x1214 <adcch_write_configuration>
     640:	18 87       	std	Y+8, r17	; 0x08
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	89 87       	std	Y+9, r24	; 0x09
     646:	ae 01       	movw	r20, r28
     648:	48 5f       	subi	r20, 0xF8	; 248
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	e0 d5       	rcall	.+3008   	; 0x1214 <adcch_write_configuration>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	82 d3       	rcall	.+1796   	; 0xd5e <adc_enable>
     65a:	2b 96       	adiw	r28, 0x0b	; 11
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	de bf       	out	0x3e, r29	; 62
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	08 95       	ret

00000668 <lightsensor_get_raw_value>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t lightsensor_get_raw_value(void)
{
	return light_sensor_sample;
}
     668:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <light_sensor_sample>
     66c:	90 91 b1 20 	lds	r25, 0x20B1	; 0x8020b1 <light_sensor_sample+0x1>
     670:	08 95       	ret

00000672 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     672:	04 c0       	rjmp	.+8      	; 0x67c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     674:	61 50       	subi	r22, 0x01	; 1
     676:	71 09       	sbc	r23, r1
     678:	81 09       	sbc	r24, r1
     67a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     67c:	61 15       	cp	r22, r1
     67e:	71 05       	cpc	r23, r1
     680:	81 05       	cpc	r24, r1
     682:	91 05       	cpc	r25, r1
     684:	b9 f7       	brne	.-18     	; 0x674 <__portable_avr_delay_cycles+0x2>
     686:	08 95       	ret

00000688 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	1f 92       	push	r1
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	16 e0       	ldi	r17, 0x06	; 6
     6a4:	68 94       	set
     6a6:	ff 24       	eor	r15, r15
     6a8:	f3 f8       	bld	r15, 3
     6aa:	f8 01       	movw	r30, r16
     6ac:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     6ae:	64 e0       	ldi	r22, 0x04	; 4
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	dd df       	rcall	.-70     	; 0x672 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6b8:	f8 01       	movw	r30, r16
     6ba:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	d6 df       	rcall	.-84     	; 0x672 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     6c6:	0f 2e       	mov	r0, r31
     6c8:	fb e2       	ldi	r31, 0x2B	; 43
     6ca:	bf 2e       	mov	r11, r31
     6cc:	f0 2d       	mov	r31, r0
     6ce:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     6d0:	80 ea       	ldi	r24, 0xA0	; 160
     6d2:	99 e0       	ldi	r25, 0x09	; 9
     6d4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
     6dc:	76 01       	movw	r14, r12
     6de:	00 e4       	ldi	r16, 0x40	; 64
     6e0:	12 e4       	ldi	r17, 0x42	; 66
     6e2:	2f e0       	ldi	r18, 0x0F	; 15
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	be 01       	movw	r22, r28
     6ea:	6f 5f       	subi	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	80 ea       	ldi	r24, 0xA0	; 160
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6f6:	00 e6       	ldi	r16, 0x60	; 96
     6f8:	16 e0       	ldi	r17, 0x06	; 6
     6fa:	ff 24       	eor	r15, r15
     6fc:	f3 94       	inc	r15
     6fe:	f8 01       	movw	r30, r16
     700:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     702:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	80 ea       	ldi	r24, 0xA0	; 160
     70c:	99 e0       	ldi	r25, 0x09	; 9
     70e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     712:	f8 01       	movw	r30, r16
     714:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     716:	e0 ea       	ldi	r30, 0xA0	; 160
     718:	f9 e0       	ldi	r31, 0x09	; 9
     71a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71c:	85 ff       	sbrs	r24, 5
     71e:	fd cf       	rjmp	.-6      	; 0x71a <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     720:	80 ea       	ldi	r24, 0xA0	; 160
     722:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     726:	e0 ea       	ldi	r30, 0xA0	; 160
     728:	f9 e0       	ldi	r31, 0x09	; 9
     72a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     72c:	86 ff       	sbrs	r24, 6
     72e:	fd cf       	rjmp	.-6      	; 0x72a <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     730:	e0 ea       	ldi	r30, 0xA0	; 160
     732:	f9 e0       	ldi	r31, 0x09	; 9
     734:	80 e4       	ldi	r24, 0x40	; 64
     736:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     738:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     73a:	be 01       	movw	r22, r28
     73c:	6f 5f       	subi	r22, 0xFF	; 255
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
     740:	80 ea       	ldi	r24, 0xA0	; 160
     742:	99 e0       	ldi	r25, 0x09	; 9
     744:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     748:	8b e2       	ldi	r24, 0x2B	; 43
     74a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     74c:	be 01       	movw	r22, r28
     74e:	6f 5f       	subi	r22, 0xFF	; 255
     750:	7f 4f       	sbci	r23, 0xFF	; 255
     752:	80 ea       	ldi	r24, 0xA0	; 160
     754:	99 e0       	ldi	r25, 0x09	; 9
     756:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     760:	e0 ea       	ldi	r30, 0xA0	; 160
     762:	f9 e0       	ldi	r31, 0x09	; 9
     764:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     766:	85 ff       	sbrs	r24, 5
     768:	fd cf       	rjmp	.-6      	; 0x764 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     76a:	86 ea       	ldi	r24, 0xA6	; 166
     76c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	f9 e0       	ldi	r31, 0x09	; 9
     774:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     776:	86 ff       	sbrs	r24, 6
     778:	fd cf       	rjmp	.-6      	; 0x774 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     77a:	e0 ea       	ldi	r30, 0xA0	; 160
     77c:	f9 e0       	ldi	r31, 0x09	; 9
     77e:	80 e4       	ldi	r24, 0x40	; 64
     780:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     782:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	80 ea       	ldi	r24, 0xA0	; 160
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     792:	8b e2       	ldi	r24, 0x2B	; 43
     794:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     796:	be 01       	movw	r22, r28
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	80 ea       	ldi	r24, 0xA0	; 160
     79e:	99 e0       	ldi	r25, 0x09	; 9
     7a0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7aa:	e0 ea       	ldi	r30, 0xA0	; 160
     7ac:	f9 e0       	ldi	r31, 0x09	; 9
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7b0:	85 ff       	sbrs	r24, 5
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7b4:	88 ec       	ldi	r24, 0xC8	; 200
     7b6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ba:	e0 ea       	ldi	r30, 0xA0	; 160
     7bc:	f9 e0       	ldi	r31, 0x09	; 9
     7be:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7c0:	86 ff       	sbrs	r24, 6
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7c4:	e0 ea       	ldi	r30, 0xA0	; 160
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	80 e4       	ldi	r24, 0x40	; 64
     7ca:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7cc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	99 e0       	ldi	r25, 0x09	; 9
     7d8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7dc:	8b e2       	ldi	r24, 0x2B	; 43
     7de:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7e0:	be 01       	movw	r22, r28
     7e2:	6f 5f       	subi	r22, 0xFF	; 255
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	80 ea       	ldi	r24, 0xA0	; 160
     7e8:	99 e0       	ldi	r25, 0x09	; 9
     7ea:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7fa:	85 ff       	sbrs	r24, 5
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7fe:	82 ea       	ldi	r24, 0xA2	; 162
     800:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     804:	e0 ea       	ldi	r30, 0xA0	; 160
     806:	f9 e0       	ldi	r31, 0x09	; 9
     808:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     80a:	86 ff       	sbrs	r24, 6
     80c:	fd cf       	rjmp	.-6      	; 0x808 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f9 e0       	ldi	r31, 0x09	; 9
     812:	80 e4       	ldi	r24, 0x40	; 64
     814:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     816:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     826:	8b e2       	ldi	r24, 0x2B	; 43
     828:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     82a:	be 01       	movw	r22, r28
     82c:	6f 5f       	subi	r22, 0xFF	; 255
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	80 ea       	ldi	r24, 0xA0	; 160
     832:	99 e0       	ldi	r25, 0x09	; 9
     834:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     83e:	e0 ea       	ldi	r30, 0xA0	; 160
     840:	f9 e0       	ldi	r31, 0x09	; 9
     842:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     844:	85 ff       	sbrs	r24, 5
     846:	fd cf       	rjmp	.-6      	; 0x842 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     848:	8f e2       	ldi	r24, 0x2F	; 47
     84a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     84e:	e0 ea       	ldi	r30, 0xA0	; 160
     850:	f9 e0       	ldi	r31, 0x09	; 9
     852:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     854:	86 ff       	sbrs	r24, 6
     856:	fd cf       	rjmp	.-6      	; 0x852 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	80 e4       	ldi	r24, 0x40	; 64
     85e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     860:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	80 ea       	ldi	r24, 0xA0	; 160
     86a:	99 e0       	ldi	r25, 0x09	; 9
     86c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     870:	8b e2       	ldi	r24, 0x2B	; 43
     872:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     874:	be 01       	movw	r22, r28
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	80 ea       	ldi	r24, 0xA0	; 160
     87c:	99 e0       	ldi	r25, 0x09	; 9
     87e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     888:	e0 ea       	ldi	r30, 0xA0	; 160
     88a:	f9 e0       	ldi	r31, 0x09	; 9
     88c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     88e:	85 ff       	sbrs	r24, 5
     890:	fd cf       	rjmp	.-6      	; 0x88c <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     892:	88 ef       	ldi	r24, 0xF8	; 248
     894:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     898:	e0 ea       	ldi	r30, 0xA0	; 160
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     89e:	86 ff       	sbrs	r24, 6
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8aa:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8ac:	be 01       	movw	r22, r28
     8ae:	6f 5f       	subi	r22, 0xFF	; 255
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8ba:	8b e2       	ldi	r24, 0x2B	; 43
     8bc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8be:	be 01       	movw	r22, r28
     8c0:	6f 5f       	subi	r22, 0xFF	; 255
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	80 ea       	ldi	r24, 0xA0	; 160
     8c6:	99 e0       	ldi	r25, 0x09	; 9
     8c8:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8d2:	e0 ea       	ldi	r30, 0xA0	; 160
     8d4:	f9 e0       	ldi	r31, 0x09	; 9
     8d6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8d8:	85 ff       	sbrs	r24, 5
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8dc:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8e0:	e0 ea       	ldi	r30, 0xA0	; 160
     8e2:	f9 e0       	ldi	r31, 0x09	; 9
     8e4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8e6:	86 ff       	sbrs	r24, 6
     8e8:	fd cf       	rjmp	.-6      	; 0x8e4 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ea:	e0 ea       	ldi	r30, 0xA0	; 160
     8ec:	f9 e0       	ldi	r31, 0x09	; 9
     8ee:	80 e4       	ldi	r24, 0x40	; 64
     8f0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8f2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8f4:	be 01       	movw	r22, r28
     8f6:	6f 5f       	subi	r22, 0xFF	; 255
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	80 ea       	ldi	r24, 0xA0	; 160
     8fc:	99 e0       	ldi	r25, 0x09	; 9
     8fe:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     902:	8b e2       	ldi	r24, 0x2B	; 43
     904:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     906:	be 01       	movw	r22, r28
     908:	6f 5f       	subi	r22, 0xFF	; 255
     90a:	7f 4f       	sbci	r23, 0xFF	; 255
     90c:	80 ea       	ldi	r24, 0xA0	; 160
     90e:	99 e0       	ldi	r25, 0x09	; 9
     910:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     91a:	e0 ea       	ldi	r30, 0xA0	; 160
     91c:	f9 e0       	ldi	r31, 0x09	; 9
     91e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     920:	85 ff       	sbrs	r24, 5
     922:	fd cf       	rjmp	.-6      	; 0x91e <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     924:	81 e2       	ldi	r24, 0x21	; 33
     926:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     92a:	e0 ea       	ldi	r30, 0xA0	; 160
     92c:	f9 e0       	ldi	r31, 0x09	; 9
     92e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     930:	86 ff       	sbrs	r24, 6
     932:	fd cf       	rjmp	.-6      	; 0x92e <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     934:	e0 ea       	ldi	r30, 0xA0	; 160
     936:	f9 e0       	ldi	r31, 0x09	; 9
     938:	80 e4       	ldi	r24, 0x40	; 64
     93a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     93c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	80 ea       	ldi	r24, 0xA0	; 160
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     94c:	8b e2       	ldi	r24, 0x2B	; 43
     94e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     950:	be 01       	movw	r22, r28
     952:	6f 5f       	subi	r22, 0xFF	; 255
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	80 ea       	ldi	r24, 0xA0	; 160
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     964:	e0 ea       	ldi	r30, 0xA0	; 160
     966:	f9 e0       	ldi	r31, 0x09	; 9
     968:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     96a:	85 ff       	sbrs	r24, 5
     96c:	fd cf       	rjmp	.-6      	; 0x968 <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     96e:	81 e8       	ldi	r24, 0x81	; 129
     970:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     974:	e0 ea       	ldi	r30, 0xA0	; 160
     976:	f9 e0       	ldi	r31, 0x09	; 9
     978:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     97a:	86 ff       	sbrs	r24, 6
     97c:	fd cf       	rjmp	.-6      	; 0x978 <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     97e:	e0 ea       	ldi	r30, 0xA0	; 160
     980:	f9 e0       	ldi	r31, 0x09	; 9
     982:	80 e4       	ldi	r24, 0x40	; 64
     984:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     986:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	80 ea       	ldi	r24, 0xA0	; 160
     990:	99 e0       	ldi	r25, 0x09	; 9
     992:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     996:	8b e2       	ldi	r24, 0x2B	; 43
     998:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     99a:	be 01       	movw	r22, r28
     99c:	6f 5f       	subi	r22, 0xFF	; 255
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	80 ea       	ldi	r24, 0xA0	; 160
     9a2:	99 e0       	ldi	r25, 0x09	; 9
     9a4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ae:	e0 ea       	ldi	r30, 0xA0	; 160
     9b0:	f9 e0       	ldi	r31, 0x09	; 9
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9b4:	85 ff       	sbrs	r24, 5
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b8:	81 e2       	ldi	r24, 0x21	; 33
     9ba:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9be:	e0 ea       	ldi	r30, 0xA0	; 160
     9c0:	f9 e0       	ldi	r31, 0x09	; 9
     9c2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9c4:	86 ff       	sbrs	r24, 6
     9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ca:	f9 e0       	ldi	r31, 0x09	; 9
     9cc:	80 e4       	ldi	r24, 0x40	; 64
     9ce:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9d0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9d2:	be 01       	movw	r22, r28
     9d4:	6f 5f       	subi	r22, 0xFF	; 255
     9d6:	7f 4f       	sbci	r23, 0xFF	; 255
     9d8:	80 ea       	ldi	r24, 0xA0	; 160
     9da:	99 e0       	ldi	r25, 0x09	; 9
     9dc:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9e0:	8b e2       	ldi	r24, 0x2B	; 43
     9e2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9f8:	e0 ea       	ldi	r30, 0xA0	; 160
     9fa:	f9 e0       	ldi	r31, 0x09	; 9
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9fe:	85 ff       	sbrs	r24, 5
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a02:	8f ea       	ldi	r24, 0xAF	; 175
     a04:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a08:	e0 ea       	ldi	r30, 0xA0	; 160
     a0a:	f9 e0       	ldi	r31, 0x09	; 9
     a0c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a0e:	86 ff       	sbrs	r24, 6
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a12:	e0 ea       	ldi	r30, 0xA0	; 160
     a14:	f9 e0       	ldi	r31, 0x09	; 9
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a1a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	bf 90       	pop	r11
     a3e:	08 95       	ret

00000a40 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	1f 92       	push	r1
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	08 2f       	mov	r16, r24
     a52:	f6 2e       	mov	r15, r22
     a54:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     a56:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     a5a:	0f 70       	andi	r16, 0x0F	; 15
     a5c:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a5e:	8b e2       	ldi	r24, 0x2B	; 43
     a60:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	80 ea       	ldi	r24, 0xA0	; 160
     a6a:	99 e0       	ldi	r25, 0x09	; 9
     a6c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a76:	e0 ea       	ldi	r30, 0xA0	; 160
     a78:	f9 e0       	ldi	r31, 0x09	; 9
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a7c:	95 ff       	sbrs	r25, 5
     a7e:	fd cf       	rjmp	.-6      	; 0xa7a <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a80:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a84:	e0 ea       	ldi	r30, 0xA0	; 160
     a86:	f9 e0       	ldi	r31, 0x09	; 9
     a88:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a8a:	86 ff       	sbrs	r24, 6
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a8e:	e0 ea       	ldi	r30, 0xA0	; 160
     a90:	f9 e0       	ldi	r31, 0x09	; 9
     a92:	80 e4       	ldi	r24, 0x40	; 64
     a94:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a96:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	80 ea       	ldi	r24, 0xA0	; 160
     aa0:	99 e0       	ldi	r25, 0x09	; 9
     aa2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     aa6:	0f 2d       	mov	r16, r15
     aa8:	0f 77       	andi	r16, 0x7F	; 127
     aaa:	02 95       	swap	r16
     aac:	0f 70       	andi	r16, 0x0F	; 15
     aae:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ab0:	8b e2       	ldi	r24, 0x2B	; 43
     ab2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ab4:	be 01       	movw	r22, r28
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	80 ea       	ldi	r24, 0xA0	; 160
     abc:	99 e0       	ldi	r25, 0x09	; 9
     abe:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     ac8:	e0 ea       	ldi	r30, 0xA0	; 160
     aca:	f9 e0       	ldi	r31, 0x09	; 9
     acc:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ace:	85 ff       	sbrs	r24, 5
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ad2:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     ad6:	e0 ea       	ldi	r30, 0xA0	; 160
     ad8:	f9 e0       	ldi	r31, 0x09	; 9
     ada:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     adc:	86 ff       	sbrs	r24, 6
     ade:	fd cf       	rjmp	.-6      	; 0xada <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ae0:	e0 ea       	ldi	r30, 0xA0	; 160
     ae2:	f9 e0       	ldi	r31, 0x09	; 9
     ae4:	80 e4       	ldi	r24, 0x40	; 64
     ae6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ae8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	80 ea       	ldi	r24, 0xA0	; 160
     af2:	99 e0       	ldi	r25, 0x09	; 9
     af4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     af8:	0f 2d       	mov	r16, r15
     afa:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     afc:	8b e2       	ldi	r24, 0x2B	; 43
     afe:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b00:	be 01       	movw	r22, r28
     b02:	6f 5f       	subi	r22, 0xFF	; 255
     b04:	7f 4f       	sbci	r23, 0xFF	; 255
     b06:	80 ea       	ldi	r24, 0xA0	; 160
     b08:	99 e0       	ldi	r25, 0x09	; 9
     b0a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b14:	e0 ea       	ldi	r30, 0xA0	; 160
     b16:	f9 e0       	ldi	r31, 0x09	; 9
     b18:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b1e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b22:	e0 ea       	ldi	r30, 0xA0	; 160
     b24:	f9 e0       	ldi	r31, 0x09	; 9
     b26:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b28:	86 ff       	sbrs	r24, 6
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b2c:	e0 ea       	ldi	r30, 0xA0	; 160
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	80 e4       	ldi	r24, 0x40	; 64
     b32:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b34:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b36:	be 01       	movw	r22, r28
     b38:	6f 5f       	subi	r22, 0xFF	; 255
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	80 ea       	ldi	r24, 0xA0	; 160
     b3e:	99 e0       	ldi	r25, 0x09	; 9
     b40:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b44:	8b e2       	ldi	r24, 0x2B	; 43
     b46:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b48:	be 01       	movw	r22, r28
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	80 ea       	ldi	r24, 0xA0	; 160
     b50:	99 e0       	ldi	r25, 0x09	; 9
     b52:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b5c:	e0 ea       	ldi	r30, 0xA0	; 160
     b5e:	f9 e0       	ldi	r31, 0x09	; 9
     b60:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b62:	85 ff       	sbrs	r24, 5
     b64:	fd cf       	rjmp	.-6      	; 0xb60 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b66:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b6a:	e0 ea       	ldi	r30, 0xA0	; 160
     b6c:	f9 e0       	ldi	r31, 0x09	; 9
     b6e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b70:	86 ff       	sbrs	r24, 6
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b74:	e0 ea       	ldi	r30, 0xA0	; 160
     b76:	f9 e0       	ldi	r31, 0x09	; 9
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b7c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b84:	be 01       	movw	r22, r28
     b86:	6f 5f       	subi	r22, 0xFF	; 255
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	80 ea       	ldi	r24, 0xA0	; 160
     b8c:	99 e0       	ldi	r25, 0x09	; 9
     b8e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     b92:	0f 90       	pop	r0
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	08 95       	ret

00000ba0 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	1f 92       	push	r1
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     bae:	86 eb       	ldi	r24, 0xB6	; 182
     bb0:	90 e2       	ldi	r25, 0x20	; 32
     bb2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     bb6:	68 dd       	rcall	.-1328   	; 0x688 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bb8:	8b e2       	ldi	r24, 0x2B	; 43
     bba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bbc:	be 01       	movw	r22, r28
     bbe:	6f 5f       	subi	r22, 0xFF	; 255
     bc0:	7f 4f       	sbci	r23, 0xFF	; 255
     bc2:	80 ea       	ldi	r24, 0xA0	; 160
     bc4:	99 e0       	ldi	r25, 0x09	; 9
     bc6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <usart_spi_select_device>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bd0:	e0 ea       	ldi	r30, 0xA0	; 160
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bd6:	85 ff       	sbrs	r24, 5
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bda:	80 e4       	ldi	r24, 0x40	; 64
     bdc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     be0:	e0 ea       	ldi	r30, 0xA0	; 160
     be2:	f9 e0       	ldi	r31, 0x09	; 9
     be4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     be6:	86 ff       	sbrs	r24, 6
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     bea:	e0 ea       	ldi	r30, 0xA0	; 160
     bec:	f9 e0       	ldi	r31, 0x09	; 9
     bee:	80 e4       	ldi	r24, 0x40	; 64
     bf0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     bf2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bf4:	be 01       	movw	r22, r28
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	80 ea       	ldi	r24, 0xA0	; 160
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c02:	00 e0       	ldi	r16, 0x00	; 0
     c04:	0a c0       	rjmp	.+20     	; 0xc1a <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	61 2f       	mov	r22, r17
     c0a:	80 2f       	mov	r24, r16
     c0c:	19 df       	rcall	.-462    	; 0xa40 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     c0e:	1f 5f       	subi	r17, 0xFF	; 255
     c10:	10 38       	cpi	r17, 0x80	; 128
     c12:	c9 f7       	brne	.-14     	; 0xc06 <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	04 30       	cpi	r16, 0x04	; 4
     c18:	11 f0       	breq	.+4      	; 0xc1e <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	f4 cf       	rjmp	.-24     	; 0xc06 <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     c1e:	0f 90       	pop	r0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     c34:	88 23       	and	r24, r24
     c36:	54 f1       	brlt	.+84     	; 0xc8c <gfx_mono_st7565r_draw_pixel+0x62>
     c38:	60 32       	cpi	r22, 0x20	; 32
     c3a:	40 f5       	brcc	.+80     	; 0xc8c <gfx_mono_st7565r_draw_pixel+0x62>
     c3c:	d4 2f       	mov	r29, r20
     c3e:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     c40:	f6 2e       	mov	r15, r22
     c42:	f6 94       	lsr	r15
     c44:	f6 94       	lsr	r15
     c46:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	f8 9e       	mul	r15, r24
     c4e:	60 19       	sub	r22, r0
     c50:	71 09       	sbc	r23, r1
     c52:	11 24       	eor	r1, r1
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	8c 01       	movw	r16, r24
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <gfx_mono_st7565r_draw_pixel+0x36>
     c5c:	00 0f       	add	r16, r16
     c5e:	11 1f       	adc	r17, r17
     c60:	6a 95       	dec	r22
     c62:	e2 f7       	brpl	.-8      	; 0xc5c <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     c64:	6c 2f       	mov	r22, r28
     c66:	8f 2d       	mov	r24, r15
     c68:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     c6c:	d1 30       	cpi	r29, 0x01	; 1
     c6e:	21 f0       	breq	.+8      	; 0xc78 <gfx_mono_st7565r_draw_pixel+0x4e>
     c70:	28 f0       	brcs	.+10     	; 0xc7c <gfx_mono_st7565r_draw_pixel+0x52>
     c72:	d2 30       	cpi	r29, 0x02	; 2
     c74:	31 f0       	breq	.+12     	; 0xc82 <gfx_mono_st7565r_draw_pixel+0x58>
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     c78:	80 2b       	or	r24, r16
		break;
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     c7c:	00 95       	com	r16
     c7e:	80 23       	and	r24, r16
		break;
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     c82:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     c84:	48 2f       	mov	r20, r24
     c86:	6c 2f       	mov	r22, r28
     c88:	8f 2d       	mov	r24, r15
     c8a:	da de       	rcall	.-588    	; 0xa40 <gfx_mono_st7565r_put_byte>
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	08 95       	ret

00000c98 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     c98:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     c9c:	08 95       	ret

00000c9e <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	1f 92       	push	r1
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     ca8:	2f b7       	in	r18, 0x3f	; 63
     caa:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     cac:	f8 94       	cli
	return flags;
     cae:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     cb0:	28 2f       	mov	r18, r24
     cb2:	39 2f       	mov	r19, r25
     cb4:	21 15       	cp	r18, r1
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	38 07       	cpc	r19, r24
     cba:	29 f4       	brne	.+10     	; 0xcc6 <adc_set_callback+0x28>
		adca_callback = callback;
     cbc:	60 93 20 23 	sts	0x2320, r22	; 0x802320 <adca_callback>
     cc0:	70 93 21 23 	sts	0x2321, r23	; 0x802321 <adca_callback+0x1>
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     cc6:	20 34       	cpi	r18, 0x40	; 64
     cc8:	32 40       	sbci	r19, 0x02	; 2
     cca:	21 f4       	brne	.+8      	; 0xcd4 <adc_set_callback+0x36>
		adcb_callback = callback;
     ccc:	60 93 1e 23 	sts	0x231E, r22	; 0x80231e <adcb_callback>
     cd0:	70 93 1f 23 	sts	0x231F, r23	; 0x80231f <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cd4:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     cde:	81 15       	cp	r24, r1
     ce0:	22 e0       	ldi	r18, 0x02	; 2
     ce2:	92 07       	cpc	r25, r18
     ce4:	69 f4       	brne	.+26     	; 0xd00 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     ce6:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <adca_enable_count>
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	98 0f       	add	r25, r24
     cee:	90 93 b7 22 	sts	0x22B7, r25	; 0x8022b7 <adca_enable_count>
     cf2:	81 11       	cpse	r24, r1
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <sysclk_enable_module>
     cfe:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d00:	80 34       	cpi	r24, 0x40	; 64
     d02:	92 40       	sbci	r25, 0x02	; 2
     d04:	61 f4       	brne	.+24     	; 0xd1e <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     d06:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <adcb_enable_count>
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	98 0f       	add	r25, r24
     d0e:	90 93 b6 22 	sts	0x22B6, r25	; 0x8022b6 <adcb_enable_count>
     d12:	81 11       	cpse	r24, r1
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d16:	62 e0       	ldi	r22, 0x02	; 2
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0c 94 fd 0e 	jmp	0x1dfa	; 0x1dfa <sysclk_enable_module>
     d1e:	08 95       	ret

00000d20 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     d20:	81 15       	cp	r24, r1
     d22:	22 e0       	ldi	r18, 0x02	; 2
     d24:	92 07       	cpc	r25, r18
     d26:	61 f4       	brne	.+24     	; 0xd40 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     d28:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <adca_enable_count>
     d2c:	81 50       	subi	r24, 0x01	; 1
     d2e:	80 93 b7 22 	sts	0x22B7, r24	; 0x8022b7 <adca_enable_count>
     d32:	81 11       	cpse	r24, r1
     d34:	13 c0       	rjmp	.+38     	; 0xd5c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <sysclk_disable_module>
     d3e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     d40:	80 34       	cpi	r24, 0x40	; 64
     d42:	92 40       	sbci	r25, 0x02	; 2
     d44:	59 f4       	brne	.+22     	; 0xd5c <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     d46:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <adcb_enable_count>
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <adcb_enable_count>
     d50:	81 11       	cpse	r24, r1
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     d54:	62 e0       	ldi	r22, 0x02	; 2
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <sysclk_disable_module>
     d5c:	08 95       	ret

00000d5e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	1f 92       	push	r1
     d6a:	1f 92       	push	r1
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d72:	8f b7       	in	r24, 0x3f	; 63
     d74:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     d76:	f8 94       	cli
	return flags;
     d78:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     d7a:	c7 01       	movw	r24, r14
     d7c:	b0 df       	rcall	.-160    	; 0xcde <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     d7e:	f7 01       	movw	r30, r14
     d80:	80 81       	ld	r24, Z
     d82:	81 60       	ori	r24, 0x01	; 1
     d84:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d86:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     d88:	80 91 23 23 	lds	r24, 0x2323	; 0x802323 <sleepmgr_locks+0x1>
     d8c:	8f 3f       	cpi	r24, 0xFF	; 255
     d8e:	09 f4       	brne	.+2      	; 0xd92 <adc_enable+0x34>
     d90:	ff cf       	rjmp	.-2      	; 0xd90 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d92:	8f b7       	in	r24, 0x3f	; 63
     d94:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     d96:	f8 94       	cli
	return flags;
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     d9a:	e2 e2       	ldi	r30, 0x22	; 34
     d9c:	f3 e2       	ldi	r31, 0x23	; 35
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	8f 5f       	subi	r24, 0xFF	; 255
     da2:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     da4:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	08 95       	ret

00000db6 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     ddc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
     de0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
     de4:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
     de8:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	92 e0       	ldi	r25, 0x02	; 2
     df2:	19 95       	eicall
}
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0b be       	out	0x3b, r0	; 59
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	0b b6       	in	r0, 0x3b	; 59
     e26:	0f 92       	push	r0
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     e40:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x7be22c>
     e44:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x7be22d>
     e48:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
     e4c:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	92 e0       	ldi	r25, 0x02	; 2
     e56:	19 95       	eicall
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     ea4:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x7be234>
     ea8:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x7be235>
     eac:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
     eb0:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
     eb4:	64 e0       	ldi	r22, 0x04	; 4
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	19 95       	eicall
}
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0b be       	out	0x3b, r0	; 59
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	0b b6       	in	r0, 0x3b	; 59
     eee:	0f 92       	push	r0
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     f08:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x7be23c>
     f0c:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x7be23d>
     f10:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <adca_callback>
     f14:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <adca_callback+0x1>
     f18:	68 e0       	ldi	r22, 0x08	; 8
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	19 95       	eicall
}
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	bf 91       	pop	r27
     f26:	af 91       	pop	r26
     f28:	9f 91       	pop	r25
     f2a:	8f 91       	pop	r24
     f2c:	7f 91       	pop	r23
     f2e:	6f 91       	pop	r22
     f30:	5f 91       	pop	r21
     f32:	4f 91       	pop	r20
     f34:	3f 91       	pop	r19
     f36:	2f 91       	pop	r18
     f38:	0f 90       	pop	r0
     f3a:	0b be       	out	0x3b, r0	; 59
     f3c:	0f 90       	pop	r0
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	0f 90       	pop	r0
     f42:	1f 90       	pop	r1
     f44:	18 95       	reti

00000f46 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	0b b6       	in	r0, 0x3b	; 59
     f52:	0f 92       	push	r0
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     f6c:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x7be264>
     f70:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x7be265>
     f74:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
     f78:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
     f7c:	61 e0       	ldi	r22, 0x01	; 1
     f7e:	80 e4       	ldi	r24, 0x40	; 64
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	19 95       	eicall
}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0b be       	out	0x3b, r0	; 59
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	0b b6       	in	r0, 0x3b	; 59
     fb6:	0f 92       	push	r0
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     fd0:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x7be26c>
     fd4:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x7be26d>
     fd8:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
     fdc:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	80 e4       	ldi	r24, 0x40	; 64
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	19 95       	eicall
}
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	0b b6       	in	r0, 0x3b	; 59
    101a:	0f 92       	push	r0
    101c:	2f 93       	push	r18
    101e:	3f 93       	push	r19
    1020:	4f 93       	push	r20
    1022:	5f 93       	push	r21
    1024:	6f 93       	push	r22
    1026:	7f 93       	push	r23
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	ef 93       	push	r30
    1032:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1034:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x7be274>
    1038:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x7be275>
    103c:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    1040:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    1044:	64 e0       	ldi	r22, 0x04	; 4
    1046:	80 e4       	ldi	r24, 0x40	; 64
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	19 95       	eicall
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	0f 90       	pop	r0
    106e:	1f 90       	pop	r1
    1070:	18 95       	reti

00001072 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1072:	1f 92       	push	r1
    1074:	0f 92       	push	r0
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	0b b6       	in	r0, 0x3b	; 59
    107e:	0f 92       	push	r0
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1098:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x7be27c>
    109c:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x7be27d>
    10a0:	e0 91 1e 23 	lds	r30, 0x231E	; 0x80231e <adcb_callback>
    10a4:	f0 91 1f 23 	lds	r31, 0x231F	; 0x80231f <adcb_callback+0x1>
    10a8:	68 e0       	ldi	r22, 0x08	; 8
    10aa:	80 e4       	ldi	r24, 0x40	; 64
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	19 95       	eicall
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	8c 01       	movw	r16, r24
    10f0:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    10f2:	81 15       	cp	r24, r1
    10f4:	22 e0       	ldi	r18, 0x02	; 2
    10f6:	92 07       	cpc	r25, r18
    10f8:	71 f4       	brne	.+28     	; 0x1116 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    10fa:	61 e2       	ldi	r22, 0x21	; 33
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	a7 d6       	rcall	.+3406   	; 0x1e50 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1102:	c8 2e       	mov	r12, r24
    1104:	d1 2c       	mov	r13, r1
    1106:	60 e2       	ldi	r22, 0x20	; 32
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	a1 d6       	rcall	.+3394   	; 0x1e50 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    110e:	dc 2c       	mov	r13, r12
    1110:	cc 24       	eor	r12, r12
    1112:	c8 2a       	or	r12, r24
    1114:	10 c0       	rjmp	.+32     	; 0x1136 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1116:	80 34       	cpi	r24, 0x40	; 64
    1118:	92 40       	sbci	r25, 0x02	; 2
    111a:	c1 f5       	brne	.+112    	; 0x118c <adc_write_configuration+0xb6>
    111c:	65 e2       	ldi	r22, 0x25	; 37
    111e:	70 e0       	ldi	r23, 0x00	; 0
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	96 d6       	rcall	.+3372   	; 0x1e50 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1124:	c8 2e       	mov	r12, r24
    1126:	d1 2c       	mov	r13, r1
    1128:	64 e2       	ldi	r22, 0x24	; 36
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	90 d6       	rcall	.+3360   	; 0x1e50 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1130:	dc 2c       	mov	r13, r12
    1132:	cc 24       	eor	r12, r12
    1134:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1136:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1138:	89 83       	std	Y+1, r24	; 0x01
	return flags;
    113a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    113c:	b9 80       	ldd	r11, Y+1	; 0x01
    113e:	c8 01       	movw	r24, r16
    1140:	ce dd       	rcall	.-1124   	; 0xcde <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1142:	f8 01       	movw	r30, r16
    1144:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
    1146:	92 e0       	ldi	r25, 0x02	; 2
    1148:	90 83       	st	Z, r25
	adc->CAL = cal;
    114a:	c4 86       	std	Z+12, r12	; 0x0c
    114c:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
    114e:	f7 01       	movw	r30, r14
    1150:	25 81       	ldd	r18, Z+5	; 0x05
    1152:	36 81       	ldd	r19, Z+6	; 0x06
    1154:	f8 01       	movw	r30, r16
    1156:	20 8f       	std	Z+24, r18	; 0x18
    1158:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    115a:	f7 01       	movw	r30, r14
    115c:	92 81       	ldd	r25, Z+2	; 0x02
    115e:	f8 01       	movw	r30, r16
    1160:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1162:	f7 01       	movw	r30, r14
    1164:	94 81       	ldd	r25, Z+4	; 0x04
    1166:	f8 01       	movw	r30, r16
    1168:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    116a:	f7 01       	movw	r30, r14
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	f8 01       	movw	r30, r16
    1170:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1172:	f7 01       	movw	r30, r14
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	f8 01       	movw	r30, r16
    1178:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	f7 01       	movw	r30, r14
    117e:	90 81       	ld	r25, Z
    1180:	89 2b       	or	r24, r25
    1182:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
    1184:	80 83       	st	Z, r24
    1186:	c8 01       	movw	r24, r16
    1188:	cb dd       	rcall	.-1130   	; 0xd20 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    118a:	bf be       	out	0x3f, r11	; 63

	cpu_irq_restore(flags);
}
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	ff 90       	pop	r15
    1198:	ef 90       	pop	r14
    119a:	df 90       	pop	r13
    119c:	cf 90       	pop	r12
    119e:	bf 90       	pop	r11
    11a0:	08 95       	ret

000011a2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	1f 92       	push	r1
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8c 01       	movw	r16, r24
    11b8:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ba:	8f b7       	in	r24, 0x3f	; 63
    11bc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11be:	f8 94       	cli
	return flags;
    11c0:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    11c2:	c8 01       	movw	r24, r16
    11c4:	8c dd       	rcall	.-1256   	; 0xcde <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    11c6:	f8 01       	movw	r30, r16
    11c8:	80 81       	ld	r24, Z
    11ca:	80 7c       	andi	r24, 0xC0	; 192
    11cc:	f7 01       	movw	r30, r14
    11ce:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 8d       	ldd	r24, Z+24	; 0x18
    11d4:	91 8d       	ldd	r25, Z+25	; 0x19
    11d6:	f7 01       	movw	r30, r14
    11d8:	85 83       	std	Z+5, r24	; 0x05
    11da:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    11dc:	f8 01       	movw	r30, r16
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	f7 01       	movw	r30, r14
    11e2:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    11e4:	f8 01       	movw	r30, r16
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	f7 01       	movw	r30, r14
    11ea:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    11ec:	f8 01       	movw	r30, r16
    11ee:	83 81       	ldd	r24, Z+3	; 0x03
    11f0:	f7 01       	movw	r30, r14
    11f2:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    11f4:	f8 01       	movw	r30, r16
    11f6:	81 81       	ldd	r24, Z+1	; 0x01
    11f8:	f7 01       	movw	r30, r14
    11fa:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    11fc:	c8 01       	movw	r24, r16
    11fe:	90 dd       	rcall	.-1248   	; 0xd20 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1200:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1202:	0f 90       	pop	r0
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	08 95       	ret

00001214 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	6c 01       	movw	r12, r24
    1230:	b6 2e       	mov	r11, r22
    1232:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1234:	86 2f       	mov	r24, r22
    1236:	83 70       	andi	r24, 0x03	; 3
    1238:	29 f4       	brne	.+10     	; 0x1244 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    123a:	96 2f       	mov	r25, r22
    123c:	96 95       	lsr	r25
    123e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1244:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1246:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1248:	90 ff       	sbrs	r25, 0
		index++;
    124a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    124c:	86 01       	movw	r16, r12
    124e:	00 5e       	subi	r16, 0xE0	; 224
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	98 e0       	ldi	r25, 0x08	; 8
    1254:	89 9f       	mul	r24, r25
    1256:	00 0d       	add	r16, r0
    1258:	11 1d       	adc	r17, r1
    125a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    125c:	8f b7       	in	r24, 0x3f	; 63
    125e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1260:	f8 94       	cli
	return flags;
    1262:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1264:	c6 01       	movw	r24, r12
    1266:	3b dd       	rcall	.-1418   	; 0xcde <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1268:	f7 01       	movw	r30, r14
    126a:	80 81       	ld	r24, Z
    126c:	f8 01       	movw	r30, r16
    126e:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1270:	f7 01       	movw	r30, r14
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	f8 01       	movw	r30, r16
    1276:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1278:	f7 01       	movw	r30, r14
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	f8 01       	movw	r30, r16
    127e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1280:	b0 fe       	sbrs	r11, 0
    1282:	04 c0       	rjmp	.+8      	; 0x128c <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1284:	f7 01       	movw	r30, r14
    1286:	83 81       	ldd	r24, Z+3	; 0x03
    1288:	f8 01       	movw	r30, r16
    128a:	86 83       	std	Z+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    128c:	c6 01       	movw	r24, r12
    128e:	48 dd       	rcall	.-1392   	; 0xd20 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1290:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	08 95       	ret

000012aa <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	1f 92       	push	r1
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	6c 01       	movw	r12, r24
    12c6:	b6 2e       	mov	r11, r22
    12c8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    12ca:	86 2f       	mov	r24, r22
    12cc:	83 70       	andi	r24, 0x03	; 3
    12ce:	29 f4       	brne	.+10     	; 0x12da <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    12d0:	96 2f       	mov	r25, r22
    12d2:	96 95       	lsr	r25
    12d4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    12da:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    12dc:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    12de:	90 ff       	sbrs	r25, 0
		index++;
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    12e2:	86 01       	movw	r16, r12
    12e4:	00 5e       	subi	r16, 0xE0	; 224
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	98 e0       	ldi	r25, 0x08	; 8
    12ea:	89 9f       	mul	r24, r25
    12ec:	00 0d       	add	r16, r0
    12ee:	11 1d       	adc	r17, r1
    12f0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12f2:	8f b7       	in	r24, 0x3f	; 63
    12f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    12f6:	f8 94       	cli
	return flags;
    12f8:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    12fa:	c6 01       	movw	r24, r12
    12fc:	f0 dc       	rcall	.-1568   	; 0xcde <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    12fe:	f8 01       	movw	r30, r16
    1300:	80 81       	ld	r24, Z
    1302:	f7 01       	movw	r30, r14
    1304:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1306:	f8 01       	movw	r30, r16
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	f7 01       	movw	r30, r14
    130c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    130e:	f8 01       	movw	r30, r16
    1310:	81 81       	ldd	r24, Z+1	; 0x01
    1312:	f7 01       	movw	r30, r14
    1314:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1316:	b0 fe       	sbrs	r11, 0
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    131a:	f8 01       	movw	r30, r16
    131c:	86 81       	ldd	r24, Z+6	; 0x06
    131e:	f7 01       	movw	r30, r14
    1320:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1322:	c6 01       	movw	r24, r12
    1324:	fd dc       	rcall	.-1542   	; 0xd20 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1326:	af be       	out	0x3f, r10	; 63

	cpu_irq_restore(flags);
}
    1328:	0f 90       	pop	r0
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	08 95       	ret

00001340 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1340:	4f 92       	push	r4
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	7c 01       	movw	r14, r24
    135c:	4a 01       	movw	r8, r20
    135e:	5b 01       	movw	r10, r22
    1360:	28 01       	movw	r4, r16
    1362:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1364:	fc 01       	movw	r30, r24
    1366:	84 81       	ldd	r24, Z+4	; 0x04
    1368:	82 ff       	sbrs	r24, 2
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    136c:	d9 01       	movw	r26, r18
    136e:	c8 01       	movw	r24, r16
    1370:	68 94       	set
    1372:	12 f8       	bld	r1, 2
    1374:	b6 95       	lsr	r27
    1376:	a7 95       	ror	r26
    1378:	97 95       	ror	r25
    137a:	87 95       	ror	r24
    137c:	16 94       	lsr	r1
    137e:	d1 f7       	brne	.-12     	; 0x1374 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1380:	b9 01       	movw	r22, r18
    1382:	a8 01       	movw	r20, r16
    1384:	03 2e       	mov	r0, r19
    1386:	36 e1       	ldi	r19, 0x16	; 22
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	3a 95       	dec	r19
    1392:	d1 f7       	brne	.-12     	; 0x1388 <usart_set_baudrate+0x48>
    1394:	30 2d       	mov	r19, r0
    1396:	15 c0       	rjmp	.+42     	; 0x13c2 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1398:	d9 01       	movw	r26, r18
    139a:	c8 01       	movw	r24, r16
    139c:	68 94       	set
    139e:	13 f8       	bld	r1, 3
    13a0:	b6 95       	lsr	r27
    13a2:	a7 95       	ror	r26
    13a4:	97 95       	ror	r25
    13a6:	87 95       	ror	r24
    13a8:	16 94       	lsr	r1
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <usart_set_baudrate+0x60>
		min_rate /= 2;
    13ac:	b9 01       	movw	r22, r18
    13ae:	a8 01       	movw	r20, r16
    13b0:	03 2e       	mov	r0, r19
    13b2:	37 e1       	ldi	r19, 0x17	; 23
    13b4:	76 95       	lsr	r23
    13b6:	67 95       	ror	r22
    13b8:	57 95       	ror	r21
    13ba:	47 95       	ror	r20
    13bc:	3a 95       	dec	r19
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <usart_set_baudrate+0x74>
    13c0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    13c2:	88 15       	cp	r24, r8
    13c4:	99 05       	cpc	r25, r9
    13c6:	aa 05       	cpc	r26, r10
    13c8:	bb 05       	cpc	r27, r11
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <usart_set_baudrate+0x8e>
    13cc:	a2 c0       	rjmp	.+324    	; 0x1512 <usart_set_baudrate+0x1d2>
    13ce:	84 16       	cp	r8, r20
    13d0:	95 06       	cpc	r9, r21
    13d2:	a6 06       	cpc	r10, r22
    13d4:	b7 06       	cpc	r11, r23
    13d6:	08 f4       	brcc	.+2      	; 0x13da <usart_set_baudrate+0x9a>
    13d8:	9e c0       	rjmp	.+316    	; 0x1516 <usart_set_baudrate+0x1d6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    13da:	f7 01       	movw	r30, r14
    13dc:	84 81       	ldd	r24, Z+4	; 0x04
    13de:	82 fd       	sbrc	r24, 2
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <usart_set_baudrate+0xaa>
		baud *= 2;
    13e2:	88 0c       	add	r8, r8
    13e4:	99 1c       	adc	r9, r9
    13e6:	aa 1c       	adc	r10, r10
    13e8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    13ea:	c3 01       	movw	r24, r6
    13ec:	b2 01       	movw	r22, r4
    13ee:	a5 01       	movw	r20, r10
    13f0:	94 01       	movw	r18, r8
    13f2:	ee d7       	rcall	.+4060   	; 0x23d0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    13f4:	2f 3f       	cpi	r18, 0xFF	; 255
    13f6:	31 05       	cpc	r19, r1
    13f8:	41 05       	cpc	r20, r1
    13fa:	51 05       	cpc	r21, r1
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <usart_set_baudrate+0xc0>
    13fe:	8d c0       	rjmp	.+282    	; 0x151a <usart_set_baudrate+0x1da>
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e0       	ldi	r26, 0x00	; 0
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	c9 ef       	ldi	r28, 0xF9	; 249
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <usart_set_baudrate+0xd6>
    140c:	28 17       	cp	r18, r24
    140e:	39 07       	cpc	r19, r25
    1410:	4a 07       	cpc	r20, r26
    1412:	5b 07       	cpc	r21, r27
    1414:	58 f0       	brcs	.+22     	; 0x142c <usart_set_baudrate+0xec>
			break;
		}

		limit <<= 1;
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	aa 1f       	adc	r26, r26
    141c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    141e:	cd 3f       	cpi	r28, 0xFD	; 253
    1420:	0c f4       	brge	.+2      	; 0x1424 <usart_set_baudrate+0xe4>
			limit |= 1;
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1426:	c7 30       	cpi	r28, 0x07	; 7
    1428:	89 f7       	brne	.-30     	; 0x140c <usart_set_baudrate+0xcc>
    142a:	4d c0       	rjmp	.+154    	; 0x14c6 <usart_set_baudrate+0x186>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    142c:	cc 23       	and	r28, r28
    142e:	0c f0       	brlt	.+2      	; 0x1432 <usart_set_baudrate+0xf2>
    1430:	4a c0       	rjmp	.+148    	; 0x14c6 <usart_set_baudrate+0x186>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1432:	d5 01       	movw	r26, r10
    1434:	c4 01       	movw	r24, r8
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	aa 1f       	adc	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	aa 1f       	adc	r26, r26
    1444:	bb 1f       	adc	r27, r27
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	aa 1f       	adc	r26, r26
    144c:	bb 1f       	adc	r27, r27
    144e:	48 1a       	sub	r4, r24
    1450:	59 0a       	sbc	r5, r25
    1452:	6a 0a       	sbc	r6, r26
    1454:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1456:	ce 3f       	cpi	r28, 0xFE	; 254
    1458:	ec f4       	brge	.+58     	; 0x1494 <usart_set_baudrate+0x154>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    145a:	8d ef       	ldi	r24, 0xFD	; 253
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	8c 1b       	sub	r24, r28
    1460:	91 09       	sbc	r25, r1
    1462:	c7 fd       	sbrc	r28, 7
    1464:	93 95       	inc	r25
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <usart_set_baudrate+0x130>
    1468:	44 0c       	add	r4, r4
    146a:	55 1c       	adc	r5, r5
    146c:	66 1c       	adc	r6, r6
    146e:	77 1c       	adc	r7, r7
    1470:	8a 95       	dec	r24
    1472:	d2 f7       	brpl	.-12     	; 0x1468 <usart_set_baudrate+0x128>
    1474:	d5 01       	movw	r26, r10
    1476:	c4 01       	movw	r24, r8
    1478:	b6 95       	lsr	r27
    147a:	a7 95       	ror	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	64 0d       	add	r22, r4
    1486:	75 1d       	adc	r23, r5
    1488:	86 1d       	adc	r24, r6
    148a:	97 1d       	adc	r25, r7
    148c:	a5 01       	movw	r20, r10
    148e:	94 01       	movw	r18, r8
    1490:	9f d7       	rcall	.+3902   	; 0x23d0 <__udivmodsi4>
    1492:	35 c0       	rjmp	.+106    	; 0x14fe <usart_set_baudrate+0x1be>
		} else {
			baud <<= exp + 3;
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	8c 0f       	add	r24, r28
    1498:	a5 01       	movw	r20, r10
    149a:	94 01       	movw	r18, r8
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <usart_set_baudrate+0x166>
    149e:	22 0f       	add	r18, r18
    14a0:	33 1f       	adc	r19, r19
    14a2:	44 1f       	adc	r20, r20
    14a4:	55 1f       	adc	r21, r21
    14a6:	8a 95       	dec	r24
    14a8:	d2 f7       	brpl	.-12     	; 0x149e <usart_set_baudrate+0x15e>
			div = (cpu_hz + baud / 2) / baud;
    14aa:	da 01       	movw	r26, r20
    14ac:	c9 01       	movw	r24, r18
    14ae:	b6 95       	lsr	r27
    14b0:	a7 95       	ror	r26
    14b2:	97 95       	ror	r25
    14b4:	87 95       	ror	r24
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	64 0d       	add	r22, r4
    14bc:	75 1d       	adc	r23, r5
    14be:	86 1d       	adc	r24, r6
    14c0:	97 1d       	adc	r25, r7
    14c2:	86 d7       	rcall	.+3852   	; 0x23d0 <__udivmodsi4>
    14c4:	1c c0       	rjmp	.+56     	; 0x14fe <usart_set_baudrate+0x1be>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	8c 0f       	add	r24, r28
    14ca:	a5 01       	movw	r20, r10
    14cc:	94 01       	movw	r18, r8
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <usart_set_baudrate+0x198>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	8a 95       	dec	r24
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <usart_set_baudrate+0x190>
		div = (cpu_hz + baud / 2) / baud - 1;
    14dc:	da 01       	movw	r26, r20
    14de:	c9 01       	movw	r24, r18
    14e0:	b6 95       	lsr	r27
    14e2:	a7 95       	ror	r26
    14e4:	97 95       	ror	r25
    14e6:	87 95       	ror	r24
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	64 0d       	add	r22, r4
    14ee:	75 1d       	adc	r23, r5
    14f0:	86 1d       	adc	r24, r6
    14f2:	97 1d       	adc	r25, r7
    14f4:	6d d7       	rcall	.+3802   	; 0x23d0 <__udivmodsi4>
    14f6:	21 50       	subi	r18, 0x01	; 1
    14f8:	31 09       	sbc	r19, r1
    14fa:	41 09       	sbc	r20, r1
    14fc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    14fe:	83 2f       	mov	r24, r19
    1500:	8f 70       	andi	r24, 0x0F	; 15
    1502:	c2 95       	swap	r28
    1504:	c0 7f       	andi	r28, 0xF0	; 240
    1506:	c8 2b       	or	r28, r24
    1508:	f7 01       	movw	r30, r14
    150a:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    150c:	26 83       	std	Z+6, r18	; 0x06

	return true;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	18 c0       	rjmp	.+48     	; 0x1542 <usart_set_baudrate+0x202>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	16 c0       	rjmp	.+44     	; 0x1542 <usart_set_baudrate+0x202>
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <usart_set_baudrate+0x202>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    151a:	d5 01       	movw	r26, r10
    151c:	c4 01       	movw	r24, r8
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	aa 1f       	adc	r26, r26
    1524:	bb 1f       	adc	r27, r27
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	aa 1f       	adc	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	aa 1f       	adc	r26, r26
    1534:	bb 1f       	adc	r27, r27
    1536:	48 1a       	sub	r4, r24
    1538:	59 0a       	sbc	r5, r25
    153a:	6a 0a       	sbc	r6, r26
    153c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    153e:	c9 ef       	ldi	r28, 0xF9	; 249
    1540:	8c cf       	rjmp	.-232    	; 0x145a <usart_set_baudrate+0x11a>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	7f 90       	pop	r7
    1556:	6f 90       	pop	r6
    1558:	5f 90       	pop	r5
    155a:	4f 90       	pop	r4
    155c:	08 95       	ret

0000155e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
    1568:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	09 f4       	brne	.+2      	; 0x1570 <usart_init_rs232+0x12>
    156e:	e6 c0       	rjmp	.+460    	; 0x173c <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1570:	80 3c       	cpi	r24, 0xC0	; 192
    1572:	91 05       	cpc	r25, r1
    1574:	21 f4       	brne	.+8      	; 0x157e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1576:	60 e1       	ldi	r22, 0x10	; 16
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	3f d4       	rcall	.+2174   	; 0x1dfa <sysclk_enable_module>
    157c:	df c0       	rjmp	.+446    	; 0x173c <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    157e:	c0 38       	cpi	r28, 0x80	; 128
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	d8 07       	cpc	r29, r24
    1584:	21 f4       	brne	.+8      	; 0x158e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	37 d4       	rcall	.+2158   	; 0x1dfa <sysclk_enable_module>
    158c:	d7 c0       	rjmp	.+430    	; 0x173c <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    158e:	c1 15       	cp	r28, r1
    1590:	e1 e0       	ldi	r30, 0x01	; 1
    1592:	de 07       	cpc	r29, r30
    1594:	21 f4       	brne	.+8      	; 0x159e <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	2f d4       	rcall	.+2142   	; 0x1dfa <sysclk_enable_module>
    159c:	cf c0       	rjmp	.+414    	; 0x173c <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    159e:	c0 38       	cpi	r28, 0x80	; 128
    15a0:	f3 e0       	ldi	r31, 0x03	; 3
    15a2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    15a4:	21 f4       	brne	.+8      	; 0x15ae <usart_init_rs232+0x50>
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	27 d4       	rcall	.+2126   	; 0x1dfa <sysclk_enable_module>
    15ac:	c7 c0       	rjmp	.+398    	; 0x173c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    15ae:	c0 39       	cpi	r28, 0x90	; 144
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    15b4:	21 f4       	brne	.+8      	; 0x15be <usart_init_rs232+0x60>
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	1f d4       	rcall	.+2110   	; 0x1dfa <sysclk_enable_module>
    15bc:	bf c0       	rjmp	.+382    	; 0x173c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    15be:	c1 15       	cp	r28, r1
    15c0:	e2 e0       	ldi	r30, 0x02	; 2
    15c2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    15c4:	21 f4       	brne	.+8      	; 0x15ce <usart_init_rs232+0x70>
    15c6:	62 e0       	ldi	r22, 0x02	; 2
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	17 d4       	rcall	.+2094   	; 0x1dfa <sysclk_enable_module>
    15cc:	b7 c0       	rjmp	.+366    	; 0x173c <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    15ce:	c0 34       	cpi	r28, 0x40	; 64
    15d0:	f2 e0       	ldi	r31, 0x02	; 2
    15d2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    15d4:	21 f4       	brne	.+8      	; 0x15de <usart_init_rs232+0x80>
    15d6:	62 e0       	ldi	r22, 0x02	; 2
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	0f d4       	rcall	.+2078   	; 0x1dfa <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    15dc:	af c0       	rjmp	.+350    	; 0x173c <usart_init_rs232+0x1de>
    15de:	c0 32       	cpi	r28, 0x20	; 32
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    15e4:	21 f4       	brne	.+8      	; 0x15ee <usart_init_rs232+0x90>
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	07 d4       	rcall	.+2062   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    15ec:	a7 c0       	rjmp	.+334    	; 0x173c <usart_init_rs232+0x1de>
    15ee:	c1 15       	cp	r28, r1
    15f0:	e8 e0       	ldi	r30, 0x08	; 8
    15f2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    15f4:	21 f4       	brne	.+8      	; 0x15fe <usart_init_rs232+0xa0>
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	ff d3       	rcall	.+2046   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    15fc:	9f c0       	rjmp	.+318    	; 0x173c <usart_init_rs232+0x1de>
    15fe:	c1 15       	cp	r28, r1
    1600:	f9 e0       	ldi	r31, 0x09	; 9
    1602:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1604:	21 f4       	brne	.+8      	; 0x160e <usart_init_rs232+0xb0>
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	f7 d3       	rcall	.+2030   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    160c:	97 c0       	rjmp	.+302    	; 0x173c <usart_init_rs232+0x1de>
    160e:	c1 15       	cp	r28, r1
    1610:	8a e0       	ldi	r24, 0x0A	; 10
    1612:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1614:	21 f4       	brne	.+8      	; 0x161e <usart_init_rs232+0xc0>
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	85 e0       	ldi	r24, 0x05	; 5
    161a:	ef d3       	rcall	.+2014   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    161c:	8f c0       	rjmp	.+286    	; 0x173c <usart_init_rs232+0x1de>
    161e:	c1 15       	cp	r28, r1
    1620:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1622:	de 07       	cpc	r29, r30
    1624:	21 f4       	brne	.+8      	; 0x162e <usart_init_rs232+0xd0>
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	e7 d3       	rcall	.+1998   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    162c:	87 c0       	rjmp	.+270    	; 0x173c <usart_init_rs232+0x1de>
    162e:	c0 34       	cpi	r28, 0x40	; 64
    1630:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1632:	df 07       	cpc	r29, r31
    1634:	21 f4       	brne	.+8      	; 0x163e <usart_init_rs232+0xe0>
    1636:	62 e0       	ldi	r22, 0x02	; 2
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	df d3       	rcall	.+1982   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    163c:	7f c0       	rjmp	.+254    	; 0x173c <usart_init_rs232+0x1de>
    163e:	c0 34       	cpi	r28, 0x40	; 64
    1640:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1642:	d8 07       	cpc	r29, r24
    1644:	21 f4       	brne	.+8      	; 0x164e <usart_init_rs232+0xf0>
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	d7 d3       	rcall	.+1966   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    164c:	77 c0       	rjmp	.+238    	; 0x173c <usart_init_rs232+0x1de>
    164e:	c0 34       	cpi	r28, 0x40	; 64
    1650:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1652:	de 07       	cpc	r29, r30
    1654:	21 f4       	brne	.+8      	; 0x165e <usart_init_rs232+0x100>
    1656:	62 e0       	ldi	r22, 0x02	; 2
    1658:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    165a:	cf d3       	rcall	.+1950   	; 0x1dfa <sysclk_enable_module>
    165c:	6f c0       	rjmp	.+222    	; 0x173c <usart_init_rs232+0x1de>
    165e:	c0 39       	cpi	r28, 0x90	; 144
    1660:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1662:	df 07       	cpc	r29, r31
    1664:	21 f4       	brne	.+8      	; 0x166e <usart_init_rs232+0x110>
    1666:	64 e0       	ldi	r22, 0x04	; 4
    1668:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    166a:	c7 d3       	rcall	.+1934   	; 0x1dfa <sysclk_enable_module>
    166c:	67 c0       	rjmp	.+206    	; 0x173c <usart_init_rs232+0x1de>
    166e:	c0 39       	cpi	r28, 0x90	; 144
    1670:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1672:	d8 07       	cpc	r29, r24
    1674:	21 f4       	brne	.+8      	; 0x167e <usart_init_rs232+0x120>
    1676:	64 e0       	ldi	r22, 0x04	; 4
    1678:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    167a:	bf d3       	rcall	.+1918   	; 0x1dfa <sysclk_enable_module>
    167c:	5f c0       	rjmp	.+190    	; 0x173c <usart_init_rs232+0x1de>
    167e:	c0 39       	cpi	r28, 0x90	; 144
    1680:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1682:	de 07       	cpc	r29, r30
    1684:	21 f4       	brne	.+8      	; 0x168e <usart_init_rs232+0x130>
    1686:	64 e0       	ldi	r22, 0x04	; 4
    1688:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    168a:	b7 d3       	rcall	.+1902   	; 0x1dfa <sysclk_enable_module>
    168c:	57 c0       	rjmp	.+174    	; 0x173c <usart_init_rs232+0x1de>
    168e:	c0 39       	cpi	r28, 0x90	; 144
    1690:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1692:	df 07       	cpc	r29, r31
    1694:	21 f4       	brne	.+8      	; 0x169e <usart_init_rs232+0x140>
    1696:	64 e0       	ldi	r22, 0x04	; 4
    1698:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    169a:	af d3       	rcall	.+1886   	; 0x1dfa <sysclk_enable_module>
    169c:	4f c0       	rjmp	.+158    	; 0x173c <usart_init_rs232+0x1de>
    169e:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    16a0:	88 e0       	ldi	r24, 0x08	; 8
    16a2:	d8 07       	cpc	r29, r24
    16a4:	21 f4       	brne	.+8      	; 0x16ae <usart_init_rs232+0x150>
    16a6:	68 e0       	ldi	r22, 0x08	; 8
    16a8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    16aa:	a7 d3       	rcall	.+1870   	; 0x1dfa <sysclk_enable_module>
    16ac:	47 c0       	rjmp	.+142    	; 0x173c <usart_init_rs232+0x1de>
    16ae:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    16b0:	e9 e0       	ldi	r30, 0x09	; 9
    16b2:	de 07       	cpc	r29, r30
    16b4:	21 f4       	brne	.+8      	; 0x16be <usart_init_rs232+0x160>
    16b6:	68 e0       	ldi	r22, 0x08	; 8
    16b8:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    16ba:	9f d3       	rcall	.+1854   	; 0x1dfa <sysclk_enable_module>
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <usart_init_rs232+0x1de>
    16be:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    16c0:	f8 e0       	ldi	r31, 0x08	; 8
    16c2:	df 07       	cpc	r29, r31
    16c4:	21 f4       	brne	.+8      	; 0x16ce <usart_init_rs232+0x170>
    16c6:	60 e1       	ldi	r22, 0x10	; 16
    16c8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    16ca:	97 d3       	rcall	.+1838   	; 0x1dfa <sysclk_enable_module>
    16cc:	37 c0       	rjmp	.+110    	; 0x173c <usart_init_rs232+0x1de>
    16ce:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	d8 07       	cpc	r29, r24
    16d4:	21 f4       	brne	.+8      	; 0x16de <usart_init_rs232+0x180>
    16d6:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	8f d3       	rcall	.+1822   	; 0x1dfa <sysclk_enable_module>
    16dc:	2f c0       	rjmp	.+94     	; 0x173c <usart_init_rs232+0x1de>
    16de:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    16e0:	ea e0       	ldi	r30, 0x0A	; 10
    16e2:	de 07       	cpc	r29, r30
    16e4:	21 f4       	brne	.+8      	; 0x16ee <usart_init_rs232+0x190>
    16e6:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    16e8:	85 e0       	ldi	r24, 0x05	; 5
    16ea:	87 d3       	rcall	.+1806   	; 0x1dfa <sysclk_enable_module>
    16ec:	27 c0       	rjmp	.+78     	; 0x173c <usart_init_rs232+0x1de>
    16ee:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    16f0:	fb e0       	ldi	r31, 0x0B	; 11
    16f2:	df 07       	cpc	r29, r31
    16f4:	21 f4       	brne	.+8      	; 0x16fe <usart_init_rs232+0x1a0>
    16f6:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    16f8:	86 e0       	ldi	r24, 0x06	; 6
    16fa:	7f d3       	rcall	.+1790   	; 0x1dfa <sysclk_enable_module>
    16fc:	1f c0       	rjmp	.+62     	; 0x173c <usart_init_rs232+0x1de>
    16fe:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1700:	88 e0       	ldi	r24, 0x08	; 8
    1702:	d8 07       	cpc	r29, r24
    1704:	21 f4       	brne	.+8      	; 0x170e <usart_init_rs232+0x1b0>
    1706:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1708:	83 e0       	ldi	r24, 0x03	; 3
    170a:	77 d3       	rcall	.+1774   	; 0x1dfa <sysclk_enable_module>
    170c:	17 c0       	rjmp	.+46     	; 0x173c <usart_init_rs232+0x1de>
    170e:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1710:	e9 e0       	ldi	r30, 0x09	; 9
    1712:	de 07       	cpc	r29, r30
    1714:	21 f4       	brne	.+8      	; 0x171e <usart_init_rs232+0x1c0>
    1716:	60 e2       	ldi	r22, 0x20	; 32
    1718:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    171a:	6f d3       	rcall	.+1758   	; 0x1dfa <sysclk_enable_module>
    171c:	0f c0       	rjmp	.+30     	; 0x173c <usart_init_rs232+0x1de>
    171e:	c0 38       	cpi	r28, 0x80	; 128
    1720:	f4 e0       	ldi	r31, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1722:	df 07       	cpc	r29, r31
    1724:	21 f4       	brne	.+8      	; 0x172e <usart_init_rs232+0x1d0>
    1726:	60 e4       	ldi	r22, 0x40	; 64
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	67 d3       	rcall	.+1742   	; 0x1dfa <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    172c:	07 c0       	rjmp	.+14     	; 0x173c <usart_init_rs232+0x1de>
    172e:	c0 3a       	cpi	r28, 0xA0	; 160
    1730:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1732:	d8 07       	cpc	r29, r24
    1734:	19 f4       	brne	.+6      	; 0x173c <usart_init_rs232+0x1de>
    1736:	60 e4       	ldi	r22, 0x40	; 64
    1738:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    173a:	5f d3       	rcall	.+1726   	; 0x1dfa <sysclk_enable_module>
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	f8 01       	movw	r30, r16
    1744:	95 81       	ldd	r25, Z+5	; 0x05
    1746:	84 81       	ldd	r24, Z+4	; 0x04
    1748:	89 2b       	or	r24, r25
    174a:	96 81       	ldd	r25, Z+6	; 0x06
    174c:	91 11       	cpse	r25, r1
    174e:	98 e0       	ldi	r25, 0x08	; 8
    1750:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	f8 01       	movw	r30, r16
    1756:	40 81       	ld	r20, Z
    1758:	51 81       	ldd	r21, Z+1	; 0x01
    175a:	62 81       	ldd	r22, Z+2	; 0x02
    175c:	73 81       	ldd	r23, Z+3	; 0x03
    175e:	00 e8       	ldi	r16, 0x80	; 128
    1760:	14 e8       	ldi	r17, 0x84	; 132
    1762:	2e e1       	ldi	r18, 0x1E	; 30
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	ce 01       	movw	r24, r28
    1768:	eb dd       	rcall	.-1066   	; 0x1340 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	98 60       	ori	r25, 0x08	; 8
    176e:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	90 61       	ori	r25, 0x10	; 16
    1774:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	08 95       	ret

00001780 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1780:	cf 92       	push	r12
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1792:	d9 01       	movw	r26, r18
    1794:	c8 01       	movw	r24, r16
    1796:	b6 95       	lsr	r27
    1798:	a7 95       	ror	r26
    179a:	97 95       	ror	r25
    179c:	87 95       	ror	r24
    179e:	48 17       	cp	r20, r24
    17a0:	59 07       	cpc	r21, r25
    17a2:	6a 07       	cpc	r22, r26
    17a4:	7b 07       	cpc	r23, r27
    17a6:	70 f4       	brcc	.+28     	; 0x17c4 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    17a8:	6a 01       	movw	r12, r20
    17aa:	7b 01       	movw	r14, r22
    17ac:	cc 0c       	add	r12, r12
    17ae:	dd 1c       	adc	r13, r13
    17b0:	ee 1c       	adc	r14, r14
    17b2:	ff 1c       	adc	r15, r15
    17b4:	c9 01       	movw	r24, r18
    17b6:	b8 01       	movw	r22, r16
    17b8:	a7 01       	movw	r20, r14
    17ba:	96 01       	movw	r18, r12
    17bc:	09 d6       	rcall	.+3090   	; 0x23d0 <__udivmodsi4>
    17be:	21 50       	subi	r18, 0x01	; 1
    17c0:	31 09       	sbc	r19, r1
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    17c8:	83 2f       	mov	r24, r19
    17ca:	8f 70       	andi	r24, 0x0F	; 15
    17cc:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    17ce:	2e 83       	std	Y+6, r18	; 0x06
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	08 95       	ret

000017e2 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	1f 92       	push	r1
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	7c 01       	movw	r14, r24
    17f8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	09 f4       	brne	.+2      	; 0x1800 <usart_init_spi+0x1e>
    17fe:	b2 c1       	rjmp	.+868    	; 0x1b64 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1800:	80 3c       	cpi	r24, 0xC0	; 192
    1802:	91 05       	cpc	r25, r1
    1804:	21 f4       	brne	.+8      	; 0x180e <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1806:	60 e1       	ldi	r22, 0x10	; 16
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	f7 d2       	rcall	.+1518   	; 0x1dfa <sysclk_enable_module>
    180c:	ab c1       	rjmp	.+854    	; 0x1b64 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    180e:	80 e8       	ldi	r24, 0x80	; 128
    1810:	e8 16       	cp	r14, r24
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	f8 06       	cpc	r15, r24
    1816:	21 f4       	brne	.+8      	; 0x1820 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	ee d2       	rcall	.+1500   	; 0x1dfa <sysclk_enable_module>
    181e:	a2 c1       	rjmp	.+836    	; 0x1b64 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1820:	e1 14       	cp	r14, r1
    1822:	e1 e0       	ldi	r30, 0x01	; 1
    1824:	fe 06       	cpc	r15, r30
    1826:	21 f4       	brne	.+8      	; 0x1830 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	e6 d2       	rcall	.+1484   	; 0x1dfa <sysclk_enable_module>
    182e:	9a c1       	rjmp	.+820    	; 0x1b64 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1830:	f0 e8       	ldi	r31, 0x80	; 128
    1832:	ef 16       	cp	r14, r31
    1834:	f3 e0       	ldi	r31, 0x03	; 3
    1836:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1838:	21 f4       	brne	.+8      	; 0x1842 <usart_init_spi+0x60>
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	dd d2       	rcall	.+1466   	; 0x1dfa <sysclk_enable_module>
    1840:	91 c1       	rjmp	.+802    	; 0x1b64 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1842:	30 e9       	ldi	r19, 0x90	; 144
    1844:	e3 16       	cp	r14, r19
    1846:	33 e0       	ldi	r19, 0x03	; 3
    1848:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    184a:	21 f4       	brne	.+8      	; 0x1854 <usart_init_spi+0x72>
    184c:	61 e0       	ldi	r22, 0x01	; 1
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	d4 d2       	rcall	.+1448   	; 0x1dfa <sysclk_enable_module>
    1852:	88 c1       	rjmp	.+784    	; 0x1b64 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1854:	e1 14       	cp	r14, r1
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    185a:	21 f4       	brne	.+8      	; 0x1864 <usart_init_spi+0x82>
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	cc d2       	rcall	.+1432   	; 0x1dfa <sysclk_enable_module>
    1862:	80 c1       	rjmp	.+768    	; 0x1b64 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1864:	e0 e4       	ldi	r30, 0x40	; 64
    1866:	ee 16       	cp	r14, r30
    1868:	e2 e0       	ldi	r30, 0x02	; 2
    186a:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    186c:	21 f4       	brne	.+8      	; 0x1876 <usart_init_spi+0x94>
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	82 e0       	ldi	r24, 0x02	; 2
    1872:	c3 d2       	rcall	.+1414   	; 0x1dfa <sysclk_enable_module>
    1874:	77 c1       	rjmp	.+750    	; 0x1b64 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1876:	f0 e2       	ldi	r31, 0x20	; 32
    1878:	ef 16       	cp	r14, r31
    187a:	f3 e0       	ldi	r31, 0x03	; 3
    187c:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    187e:	21 f4       	brne	.+8      	; 0x1888 <usart_init_spi+0xa6>
    1880:	64 e0       	ldi	r22, 0x04	; 4
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	ba d2       	rcall	.+1396   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1886:	6e c1       	rjmp	.+732    	; 0x1b64 <usart_init_spi+0x382>
    1888:	e1 14       	cp	r14, r1
    188a:	38 e0       	ldi	r19, 0x08	; 8
    188c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    188e:	21 f4       	brne	.+8      	; 0x1898 <usart_init_spi+0xb6>
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	b2 d2       	rcall	.+1380   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1896:	66 c1       	rjmp	.+716    	; 0x1b64 <usart_init_spi+0x382>
    1898:	e1 14       	cp	r14, r1
    189a:	89 e0       	ldi	r24, 0x09	; 9
    189c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    189e:	21 f4       	brne	.+8      	; 0x18a8 <usart_init_spi+0xc6>
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	84 e0       	ldi	r24, 0x04	; 4
    18a4:	aa d2       	rcall	.+1364   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    18a6:	5e c1       	rjmp	.+700    	; 0x1b64 <usart_init_spi+0x382>
    18a8:	e1 14       	cp	r14, r1
    18aa:	ea e0       	ldi	r30, 0x0A	; 10
    18ac:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    18ae:	21 f4       	brne	.+8      	; 0x18b8 <usart_init_spi+0xd6>
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	85 e0       	ldi	r24, 0x05	; 5
    18b4:	a2 d2       	rcall	.+1348   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    18b6:	56 c1       	rjmp	.+684    	; 0x1b64 <usart_init_spi+0x382>
    18b8:	e1 14       	cp	r14, r1
    18ba:	fb e0       	ldi	r31, 0x0B	; 11
    18bc:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    18be:	21 f4       	brne	.+8      	; 0x18c8 <usart_init_spi+0xe6>
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	9a d2       	rcall	.+1332   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    18c6:	4e c1       	rjmp	.+668    	; 0x1b64 <usart_init_spi+0x382>
    18c8:	30 e4       	ldi	r19, 0x40	; 64
    18ca:	e3 16       	cp	r14, r19
    18cc:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    18ce:	f3 06       	cpc	r15, r19
    18d0:	21 f4       	brne	.+8      	; 0x18da <usart_init_spi+0xf8>
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	91 d2       	rcall	.+1314   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    18d8:	45 c1       	rjmp	.+650    	; 0x1b64 <usart_init_spi+0x382>
    18da:	80 e4       	ldi	r24, 0x40	; 64
    18dc:	e8 16       	cp	r14, r24
    18de:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    18e0:	f8 06       	cpc	r15, r24
    18e2:	21 f4       	brne	.+8      	; 0x18ec <usart_init_spi+0x10a>
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	84 e0       	ldi	r24, 0x04	; 4
    18e8:	88 d2       	rcall	.+1296   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    18ea:	3c c1       	rjmp	.+632    	; 0x1b64 <usart_init_spi+0x382>
    18ec:	e0 e4       	ldi	r30, 0x40	; 64
    18ee:	ee 16       	cp	r14, r30
    18f0:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    18f2:	fe 06       	cpc	r15, r30
    18f4:	21 f4       	brne	.+8      	; 0x18fe <usart_init_spi+0x11c>
    18f6:	62 e0       	ldi	r22, 0x02	; 2
    18f8:	85 e0       	ldi	r24, 0x05	; 5
    18fa:	7f d2       	rcall	.+1278   	; 0x1dfa <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    18fc:	33 c1       	rjmp	.+614    	; 0x1b64 <usart_init_spi+0x382>
    18fe:	f0 e9       	ldi	r31, 0x90	; 144
    1900:	ef 16       	cp	r14, r31
    1902:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1904:	ff 06       	cpc	r15, r31
    1906:	21 f4       	brne	.+8      	; 0x1910 <usart_init_spi+0x12e>
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	83 e0       	ldi	r24, 0x03	; 3
    190c:	76 d2       	rcall	.+1260   	; 0x1dfa <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    190e:	2a c1       	rjmp	.+596    	; 0x1b64 <usart_init_spi+0x382>
    1910:	30 e9       	ldi	r19, 0x90	; 144
    1912:	e3 16       	cp	r14, r19
    1914:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1916:	f3 06       	cpc	r15, r19
    1918:	21 f4       	brne	.+8      	; 0x1922 <usart_init_spi+0x140>
    191a:	64 e0       	ldi	r22, 0x04	; 4
    191c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    191e:	6d d2       	rcall	.+1242   	; 0x1dfa <sysclk_enable_module>
    1920:	21 c1       	rjmp	.+578    	; 0x1b64 <usart_init_spi+0x382>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	e8 16       	cp	r14, r24
    1926:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1928:	f8 06       	cpc	r15, r24
    192a:	21 f4       	brne	.+8      	; 0x1934 <usart_init_spi+0x152>
    192c:	64 e0       	ldi	r22, 0x04	; 4
    192e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1930:	64 d2       	rcall	.+1224   	; 0x1dfa <sysclk_enable_module>
    1932:	18 c1       	rjmp	.+560    	; 0x1b64 <usart_init_spi+0x382>
    1934:	e0 e9       	ldi	r30, 0x90	; 144
    1936:	ee 16       	cp	r14, r30
    1938:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    193a:	fe 06       	cpc	r15, r30
    193c:	21 f4       	brne	.+8      	; 0x1946 <usart_init_spi+0x164>
    193e:	64 e0       	ldi	r22, 0x04	; 4
    1940:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1942:	5b d2       	rcall	.+1206   	; 0x1dfa <sysclk_enable_module>
    1944:	0f c1       	rjmp	.+542    	; 0x1b64 <usart_init_spi+0x382>
    1946:	f0 ec       	ldi	r31, 0xC0	; 192
    1948:	ef 16       	cp	r14, r31
    194a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    194c:	ff 06       	cpc	r15, r31
    194e:	21 f4       	brne	.+8      	; 0x1958 <usart_init_spi+0x176>
    1950:	68 e0       	ldi	r22, 0x08	; 8
    1952:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1954:	52 d2       	rcall	.+1188   	; 0x1dfa <sysclk_enable_module>
    1956:	06 c1       	rjmp	.+524    	; 0x1b64 <usart_init_spi+0x382>
    1958:	30 ec       	ldi	r19, 0xC0	; 192
    195a:	e3 16       	cp	r14, r19
    195c:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    195e:	f3 06       	cpc	r15, r19
    1960:	21 f4       	brne	.+8      	; 0x196a <usart_init_spi+0x188>
    1962:	68 e0       	ldi	r22, 0x08	; 8
    1964:	84 e0       	ldi	r24, 0x04	; 4
    1966:	49 d2       	rcall	.+1170   	; 0x1dfa <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1968:	fd c0       	rjmp	.+506    	; 0x1b64 <usart_init_spi+0x382>
    196a:	80 ea       	ldi	r24, 0xA0	; 160
    196c:	e8 16       	cp	r14, r24
    196e:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1970:	f8 06       	cpc	r15, r24
    1972:	61 f4       	brne	.+24     	; 0x198c <usart_init_spi+0x1aa>
    1974:	60 e1       	ldi	r22, 0x10	; 16
    1976:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1978:	40 d2       	rcall	.+1152   	; 0x1dfa <sysclk_enable_module>
    197a:	e0 ea       	ldi	r30, 0xA0	; 160
    197c:	f8 e0       	ldi	r31, 0x08	; 8
    197e:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1980:	8f 7e       	andi	r24, 0xEF	; 239
    1982:	84 83       	std	Z+4, r24	; 0x04
    1984:	f8 01       	movw	r30, r16
    1986:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1988:	22 50       	subi	r18, 0x02	; 2
    198a:	4c c0       	rjmp	.+152    	; 0x1a24 <usart_init_spi+0x242>
    198c:	f0 ea       	ldi	r31, 0xA0	; 160
    198e:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1990:	f9 e0       	ldi	r31, 0x09	; 9
    1992:	ff 06       	cpc	r15, r31
    1994:	21 f4       	brne	.+8      	; 0x199e <usart_init_spi+0x1bc>
    1996:	60 e1       	ldi	r22, 0x10	; 16
    1998:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    199a:	2f d2       	rcall	.+1118   	; 0x1dfa <sysclk_enable_module>
    199c:	e3 c0       	rjmp	.+454    	; 0x1b64 <usart_init_spi+0x382>
    199e:	30 ea       	ldi	r19, 0xA0	; 160
    19a0:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19a2:	3a e0       	ldi	r19, 0x0A	; 10
    19a4:	f3 06       	cpc	r15, r19
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <usart_init_spi+0x1ce>
    19a8:	60 e1       	ldi	r22, 0x10	; 16
    19aa:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    19ac:	26 d2       	rcall	.+1100   	; 0x1dfa <sysclk_enable_module>
    19ae:	da c0       	rjmp	.+436    	; 0x1b64 <usart_init_spi+0x382>
    19b0:	80 ea       	ldi	r24, 0xA0	; 160
    19b2:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    19b4:	8b e0       	ldi	r24, 0x0B	; 11
    19b6:	f8 06       	cpc	r15, r24
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <usart_init_spi+0x1e0>
    19ba:	60 e1       	ldi	r22, 0x10	; 16
    19bc:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    19be:	1d d2       	rcall	.+1082   	; 0x1dfa <sysclk_enable_module>
    19c0:	d1 c0       	rjmp	.+418    	; 0x1b64 <usart_init_spi+0x382>
    19c2:	e0 eb       	ldi	r30, 0xB0	; 176
    19c4:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    19c6:	e8 e0       	ldi	r30, 0x08	; 8
    19c8:	fe 06       	cpc	r15, r30
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <usart_init_spi+0x1f2>
    19cc:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	14 d2       	rcall	.+1064   	; 0x1dfa <sysclk_enable_module>
    19d2:	c8 c0       	rjmp	.+400    	; 0x1b64 <usart_init_spi+0x382>
    19d4:	f0 eb       	ldi	r31, 0xB0	; 176
    19d6:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    19d8:	f9 e0       	ldi	r31, 0x09	; 9
    19da:	ff 06       	cpc	r15, r31
    19dc:	21 f4       	brne	.+8      	; 0x19e6 <usart_init_spi+0x204>
    19de:	60 e2       	ldi	r22, 0x20	; 32
    19e0:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    19e2:	0b d2       	rcall	.+1046   	; 0x1dfa <sysclk_enable_module>
    19e4:	bf c0       	rjmp	.+382    	; 0x1b64 <usart_init_spi+0x382>
    19e6:	30 e8       	ldi	r19, 0x80	; 128
    19e8:	e3 16       	cp	r14, r19
    19ea:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    19ec:	f3 06       	cpc	r15, r19
    19ee:	21 f4       	brne	.+8      	; 0x19f8 <usart_init_spi+0x216>
    19f0:	60 e4       	ldi	r22, 0x40	; 64
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	02 d2       	rcall	.+1028   	; 0x1dfa <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    19f6:	b6 c0       	rjmp	.+364    	; 0x1b64 <usart_init_spi+0x382>
    19f8:	80 ea       	ldi	r24, 0xA0	; 160
    19fa:	e8 16       	cp	r14, r24
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a00:	21 f4       	brne	.+8      	; 0x1a0a <usart_init_spi+0x228>
    1a02:	60 e4       	ldi	r22, 0x40	; 64
    1a04:	85 e0       	ldi	r24, 0x05	; 5
    1a06:	f9 d1       	rcall	.+1010   	; 0x1dfa <sysclk_enable_module>
    1a08:	ad c0       	rjmp	.+346    	; 0x1b64 <usart_init_spi+0x382>
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	84 81       	ldd	r24, Z+4	; 0x04
    1a0e:	8f 7e       	andi	r24, 0xEF	; 239
    1a10:	84 83       	std	Z+4, r24	; 0x04
    1a12:	fb 01       	movw	r30, r22
    1a14:	24 81       	ldd	r18, Z+4	; 0x04
    1a16:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1a18:	c7 01       	movw	r24, r14
    1a1a:	f0 ea       	ldi	r31, 0xA0	; 160
    1a1c:	ef 16       	cp	r14, r31
    1a1e:	f8 e0       	ldi	r31, 0x08	; 8
    1a20:	ff 06       	cpc	r15, r31
    1a22:	49 f4       	brne	.+18     	; 0x1a36 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1a24:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
    1a28:	84 fd       	sbrc	r24, 4
    1a2a:	a5 c0       	rjmp	.+330    	; 0x1b76 <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1a2c:	0f 2e       	mov	r0, r31
    1a2e:	f1 e1       	ldi	r31, 0x11	; 17
    1a30:	df 2e       	mov	r13, r31
    1a32:	f0 2d       	mov	r31, r0
    1a34:	a4 c0       	rjmp	.+328    	; 0x1b7e <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1a36:	80 3b       	cpi	r24, 0xB0	; 176
    1a38:	38 e0       	ldi	r19, 0x08	; 8
    1a3a:	93 07       	cpc	r25, r19
    1a3c:	91 f0       	breq	.+36     	; 0x1a62 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1a3e:	80 3a       	cpi	r24, 0xA0	; 160
    1a40:	e9 e0       	ldi	r30, 0x09	; 9
    1a42:	9e 07       	cpc	r25, r30
    1a44:	49 f4       	brne	.+18     	; 0x1a58 <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1a46:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
    1a4a:	34 fd       	sbrc	r19, 4
    1a4c:	9b c0       	rjmp	.+310    	; 0x1b84 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1a4e:	0f 2e       	mov	r0, r31
    1a50:	f9 e1       	ldi	r31, 0x19	; 25
    1a52:	df 2e       	mov	r13, r31
    1a54:	f0 2d       	mov	r31, r0
    1a56:	16 c0       	rjmp	.+44     	; 0x1a84 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1a58:	80 3b       	cpi	r24, 0xB0	; 176
    1a5a:	f9 e0       	ldi	r31, 0x09	; 9
    1a5c:	9f 07       	cpc	r25, r31
    1a5e:	f1 f0       	breq	.+60     	; 0x1a9c <usart_init_spi+0x2ba>
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1a62:	0f 2e       	mov	r0, r31
    1a64:	f5 e1       	ldi	r31, 0x15	; 21
    1a66:	df 2e       	mov	r13, r31
    1a68:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1a6a:	80 3a       	cpi	r24, 0xA0	; 160
    1a6c:	3a e0       	ldi	r19, 0x0A	; 10
    1a6e:	93 07       	cpc	r25, r19
    1a70:	49 f4       	brne	.+18     	; 0x1a84 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1a72:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
    1a76:	84 fd       	sbrc	r24, 4
    1a78:	8a c0       	rjmp	.+276    	; 0x1b8e <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f1 e2       	ldi	r31, 0x21	; 33
    1a7e:	df 2e       	mov	r13, r31
    1a80:	f0 2d       	mov	r31, r0
    1a82:	15 c0       	rjmp	.+42     	; 0x1aae <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1a84:	80 3a       	cpi	r24, 0xA0	; 160
    1a86:	9b 40       	sbci	r25, 0x0B	; 11
    1a88:	91 f4       	brne	.+36     	; 0x1aae <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1a8a:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
    1a8e:	84 fd       	sbrc	r24, 4
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1a92:	0f 2e       	mov	r0, r31
    1a94:	f9 e2       	ldi	r31, 0x29	; 41
    1a96:	df 2e       	mov	r13, r31
    1a98:	f0 2d       	mov	r31, r0
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1a9c:	0f 2e       	mov	r0, r31
    1a9e:	fd e1       	ldi	r31, 0x1D	; 29
    1aa0:	df 2e       	mov	r13, r31
    1aa2:	f0 2d       	mov	r31, r0
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	fd e2       	ldi	r31, 0x2D	; 45
    1aaa:	df 2e       	mov	r13, r31
    1aac:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1aae:	ed 2d       	mov	r30, r13
    1ab0:	e6 95       	lsr	r30
    1ab2:	e6 95       	lsr	r30
    1ab4:	e6 95       	lsr	r30
    1ab6:	30 e2       	ldi	r19, 0x20	; 32
    1ab8:	e3 9f       	mul	r30, r19
    1aba:	f0 01       	movw	r30, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	fa 5f       	subi	r31, 0xFA	; 250
    1ac0:	3d 2d       	mov	r19, r13
    1ac2:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	03 2e       	mov	r0, r19
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <usart_init_spi+0x2ee>
    1acc:	88 0f       	add	r24, r24
    1ace:	99 1f       	adc	r25, r25
    1ad0:	0a 94       	dec	r0
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1ad4:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	10 f0       	brcs	.+4      	; 0x1ade <usart_init_spi+0x2fc>
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <usart_init_spi+0x2fe>
    1ade:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1ae0:	df 01       	movw	r26, r30
    1ae2:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1ae4:	a3 0f       	add	r26, r19
    1ae6:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1ae8:	9f b7       	in	r25, 0x3f	; 63
    1aea:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1aec:	f8 94       	cli
	return flags;
    1aee:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1af0:	2c 91       	ld	r18, X
    1af2:	27 70       	andi	r18, 0x07	; 7
    1af4:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1af6:	9c 91       	ld	r25, X
    1af8:	94 2b       	or	r25, r20
    1afa:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1afc:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1afe:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1b00:	f7 01       	movw	r30, r14
    1b02:	85 81       	ldd	r24, Z+5	; 0x05
    1b04:	80 6c       	ori	r24, 0xC0	; 192
    1b06:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1b08:	f8 01       	movw	r30, r16
    1b0a:	84 81       	ldd	r24, Z+4	; 0x04
    1b0c:	8d 7f       	andi	r24, 0xFD	; 253
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1b12:	f7 01       	movw	r30, r14
    1b14:	85 81       	ldd	r24, Z+5	; 0x05
    1b16:	82 60       	ori	r24, 0x02	; 2
    1b18:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <usart_init_spi+0x342>
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	85 81       	ldd	r24, Z+5	; 0x05
    1b20:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1b22:	85 83       	std	Z+5, r24	; 0x05
    1b24:	f8 01       	movw	r30, r16
    1b26:	85 81       	ldd	r24, Z+5	; 0x05
    1b28:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1b2a:	29 f0       	breq	.+10     	; 0x1b36 <usart_init_spi+0x354>
    1b2c:	f7 01       	movw	r30, r14
    1b2e:	85 81       	ldd	r24, Z+5	; 0x05
    1b30:	84 60       	ori	r24, 0x04	; 4
    1b32:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <usart_init_spi+0x35c>
    1b36:	f7 01       	movw	r30, r14
    1b38:	85 81       	ldd	r24, Z+5	; 0x05
    1b3a:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1b3c:	85 83       	std	Z+5, r24	; 0x05
    1b3e:	f8 01       	movw	r30, r16
    1b40:	40 81       	ld	r20, Z
    1b42:	51 81       	ldd	r21, Z+1	; 0x01
    1b44:	62 81       	ldd	r22, Z+2	; 0x02
    1b46:	73 81       	ldd	r23, Z+3	; 0x03
    1b48:	00 e8       	ldi	r16, 0x80	; 128
    1b4a:	14 e8       	ldi	r17, 0x84	; 132
    1b4c:	2e e1       	ldi	r18, 0x1E	; 30
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	c7 01       	movw	r24, r14
    1b52:	16 de       	rcall	.-980    	; 0x1780 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1b54:	f7 01       	movw	r30, r14
    1b56:	84 81       	ldd	r24, Z+4	; 0x04
    1b58:	88 60       	ori	r24, 0x08	; 8
    1b5a:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1b5c:	84 81       	ldd	r24, Z+4	; 0x04
    1b5e:	80 61       	ori	r24, 0x10	; 16
    1b60:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1b62:	1a c0       	rjmp	.+52     	; 0x1b98 <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1b64:	f7 01       	movw	r30, r14
    1b66:	84 81       	ldd	r24, Z+4	; 0x04
    1b68:	8f 7e       	andi	r24, 0xEF	; 239
    1b6a:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	24 81       	ldd	r18, Z+4	; 0x04
    1b70:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1b72:	c7 01       	movw	r24, r14
    1b74:	60 cf       	rjmp	.-320    	; 0x1a36 <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1b76:	0f 2e       	mov	r0, r31
    1b78:	f5 e1       	ldi	r31, 0x15	; 21
    1b7a:	df 2e       	mov	r13, r31
    1b7c:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1b7e:	80 ea       	ldi	r24, 0xA0	; 160
    1b80:	98 e0       	ldi	r25, 0x08	; 8
    1b82:	6a cf       	rjmp	.-300    	; 0x1a58 <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1b84:	0f 2e       	mov	r0, r31
    1b86:	fd e1       	ldi	r31, 0x1D	; 29
    1b88:	df 2e       	mov	r13, r31
    1b8a:	f0 2d       	mov	r31, r0
    1b8c:	7b cf       	rjmp	.-266    	; 0x1a84 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1b8e:	0f 2e       	mov	r0, r31
    1b90:	f5 e2       	ldi	r31, 0x25	; 37
    1b92:	df 2e       	mov	r13, r31
    1b94:	f0 2d       	mov	r31, r0
    1b96:	8b cf       	rjmp	.-234    	; 0x1aae <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1b98:	0f 90       	pop	r0
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	df 90       	pop	r13
    1ba8:	08 95       	ret

00001baa <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1baa:	80 3a       	cpi	r24, 0xA0	; 160
    1bac:	28 e0       	ldi	r18, 0x08	; 8
    1bae:	92 07       	cpc	r25, r18
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <usart_spi_init+0x10>
    1bb2:	60 e1       	ldi	r22, 0x10	; 16
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	21 c1       	rjmp	.+578    	; 0x1dfa <sysclk_enable_module>
    1bb8:	08 95       	ret
    1bba:	80 3b       	cpi	r24, 0xB0	; 176
    1bbc:	28 e0       	ldi	r18, 0x08	; 8
    1bbe:	92 07       	cpc	r25, r18
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <usart_spi_init+0x20>
    1bc2:	60 e2       	ldi	r22, 0x20	; 32
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	19 c1       	rjmp	.+562    	; 0x1dfa <sysclk_enable_module>
    1bc8:	08 95       	ret
    1bca:	80 3a       	cpi	r24, 0xA0	; 160
    1bcc:	29 e0       	ldi	r18, 0x09	; 9
    1bce:	92 07       	cpc	r25, r18
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <usart_spi_init+0x30>
    1bd2:	60 e1       	ldi	r22, 0x10	; 16
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	11 c1       	rjmp	.+546    	; 0x1dfa <sysclk_enable_module>
    1bd8:	08 95       	ret
    1bda:	80 3b       	cpi	r24, 0xB0	; 176
    1bdc:	29 e0       	ldi	r18, 0x09	; 9
    1bde:	92 07       	cpc	r25, r18
    1be0:	21 f4       	brne	.+8      	; 0x1bea <usart_spi_init+0x40>
    1be2:	60 e2       	ldi	r22, 0x20	; 32
    1be4:	84 e0       	ldi	r24, 0x04	; 4
    1be6:	09 c1       	rjmp	.+530    	; 0x1dfa <sysclk_enable_module>
    1be8:	08 95       	ret
    1bea:	80 3a       	cpi	r24, 0xA0	; 160
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	92 07       	cpc	r25, r18
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <usart_spi_init+0x50>
    1bf2:	60 e1       	ldi	r22, 0x10	; 16
    1bf4:	85 e0       	ldi	r24, 0x05	; 5
    1bf6:	01 c1       	rjmp	.+514    	; 0x1dfa <sysclk_enable_module>
    1bf8:	08 95       	ret
    1bfa:	80 3a       	cpi	r24, 0xA0	; 160
    1bfc:	9b 40       	sbci	r25, 0x0B	; 11
    1bfe:	19 f4       	brne	.+6      	; 0x1c06 <usart_spi_init+0x5c>
    1c00:	60 e1       	ldi	r22, 0x10	; 16
    1c02:	86 e0       	ldi	r24, 0x06	; 6
    1c04:	fa c0       	rjmp	.+500    	; 0x1dfa <sysclk_enable_module>
    1c06:	08 95       	ret

00001c08 <usart_spi_setup_device>:
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <usart_spi_setup_device+0xa>
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <usart_spi_setup_device+0xc>
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	09 83       	std	Y+1, r16	; 0x01
    1c1a:	1a 83       	std	Y+2, r17	; 0x02
    1c1c:	2b 83       	std	Y+3, r18	; 0x03
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	4d 83       	std	Y+5, r20	; 0x05
    1c22:	1e 82       	std	Y+6, r1	; 0x06
    1c24:	be 01       	movw	r22, r28
    1c26:	6f 5f       	subi	r22, 0xFF	; 255
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	db dd       	rcall	.-1098   	; 0x17e2 <usart_init_spi>
    1c2c:	26 96       	adiw	r28, 0x06	; 6
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1c3c:	fb 01       	movw	r30, r22
    1c3e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1c40:	e8 2f       	mov	r30, r24
    1c42:	e6 95       	lsr	r30
    1c44:	e6 95       	lsr	r30
    1c46:	e6 95       	lsr	r30
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	e4 9f       	mul	r30, r20
    1c4c:	f0 01       	movw	r30, r0
    1c4e:	11 24       	eor	r1, r1
    1c50:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1c52:	87 70       	andi	r24, 0x07	; 7
    1c54:	21 e0       	ldi	r18, 0x01	; 1
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <usart_spi_select_device+0x24>
    1c5c:	44 0f       	add	r20, r20
    1c5e:	55 1f       	adc	r21, r21
    1c60:	8a 95       	dec	r24
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1c64:	46 83       	std	Z+6, r20	; 0x06
    1c66:	08 95       	ret

00001c68 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1c68:	fb 01       	movw	r30, r22
    1c6a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1c6c:	e8 2f       	mov	r30, r24
    1c6e:	e6 95       	lsr	r30
    1c70:	e6 95       	lsr	r30
    1c72:	e6 95       	lsr	r30
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	e4 9f       	mul	r30, r20
    1c78:	f0 01       	movw	r30, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1c7e:	87 70       	andi	r24, 0x07	; 7
    1c80:	21 e0       	ldi	r18, 0x01	; 1
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	a9 01       	movw	r20, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <usart_spi_deselect_device+0x24>
    1c88:	44 0f       	add	r20, r20
    1c8a:	55 1f       	adc	r21, r21
    1c8c:	8a 95       	dec	r24
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c90:	45 83       	std	Z+5, r20	; 0x05
    1c92:	08 95       	ret

00001c94 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1c94:	80 93 b8 22 	sts	0x22B8, r24	; 0x8022b8 <fbpointer>
    1c98:	90 93 b9 22 	sts	0x22B9, r25	; 0x8022b9 <fbpointer+0x1>
    1c9c:	08 95       	ret

00001c9e <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1c9e:	20 91 b8 22 	lds	r18, 0x22B8	; 0x8022b8 <fbpointer>
    1ca2:	30 91 b9 22 	lds	r19, 0x22B9	; 0x8022b9 <fbpointer+0x1>
    1ca6:	90 e8       	ldi	r25, 0x80	; 128
    1ca8:	89 9f       	mul	r24, r25
    1caa:	20 0d       	add	r18, r0
    1cac:	31 1d       	adc	r19, r1
    1cae:	11 24       	eor	r1, r1
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	e6 0f       	add	r30, r22
    1cb4:	f1 1d       	adc	r31, r1
    1cb6:	40 83       	st	Z, r20
    1cb8:	08 95       	ret

00001cba <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1cba:	20 91 b8 22 	lds	r18, 0x22B8	; 0x8022b8 <fbpointer>
    1cbe:	30 91 b9 22 	lds	r19, 0x22B9	; 0x8022b9 <fbpointer+0x1>
    1cc2:	90 e8       	ldi	r25, 0x80	; 128
    1cc4:	89 9f       	mul	r24, r25
    1cc6:	20 0d       	add	r18, r0
    1cc8:	31 1d       	adc	r19, r1
    1cca:	11 24       	eor	r1, r1
    1ccc:	f9 01       	movw	r30, r18
    1cce:	e6 0f       	add	r30, r22
    1cd0:	f1 1d       	adc	r31, r1
}
    1cd2:	80 81       	ld	r24, Z
    1cd4:	08 95       	ret

00001cd6 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	e4 2f       	mov	r30, r20
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	e8 0f       	add	r30, r24
    1ce6:	f1 1d       	adc	r31, r1
    1ce8:	e1 38       	cpi	r30, 0x81	; 129
    1cea:	f1 05       	cpc	r31, r1
    1cec:	1c f0       	brlt	.+6      	; 0x1cf4 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1cee:	c0 e8       	ldi	r28, 0x80	; 128
    1cf0:	4c 2f       	mov	r20, r28
    1cf2:	48 1b       	sub	r20, r24
    1cf4:	44 23       	and	r20, r20
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <gfx_mono_generic_draw_horizontal_line+0x24>
    1cf8:	50 c0       	rjmp	.+160    	; 0x1d9a <gfx_mono_generic_draw_horizontal_line+0xc4>
    1cfa:	d6 2f       	mov	r29, r22
    1cfc:	d6 95       	lsr	r29
    1cfe:	d6 95       	lsr	r29
    1d00:	d6 95       	lsr	r29
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	98 e0       	ldi	r25, 0x08	; 8
    1d06:	d9 9f       	mul	r29, r25
    1d08:	60 19       	sub	r22, r0
    1d0a:	71 09       	sbc	r23, r1
    1d0c:	11 24       	eor	r1, r1
    1d0e:	e1 e0       	ldi	r30, 0x01	; 1
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	df 01       	movw	r26, r30
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <gfx_mono_generic_draw_horizontal_line+0x44>
    1d16:	aa 0f       	add	r26, r26
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	6a 95       	dec	r22
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <gfx_mono_generic_draw_horizontal_line+0x40>
    1d1e:	fa 2e       	mov	r15, r26
    1d20:	21 30       	cpi	r18, 0x01	; 1
    1d22:	21 f0       	breq	.+8      	; 0x1d2c <gfx_mono_generic_draw_horizontal_line+0x56>
    1d24:	a8 f0       	brcs	.+42     	; 0x1d50 <gfx_mono_generic_draw_horizontal_line+0x7a>
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	39 f1       	breq	.+78     	; 0x1d78 <gfx_mono_generic_draw_horizontal_line+0xa2>
    1d2a:	37 c0       	rjmp	.+110    	; 0x1d9a <gfx_mono_generic_draw_horizontal_line+0xc4>
    1d2c:	c4 2f       	mov	r28, r20
    1d2e:	1f ef       	ldi	r17, 0xFF	; 255
    1d30:	18 0f       	add	r17, r24
    1d32:	01 2f       	mov	r16, r17
    1d34:	0c 0f       	add	r16, r28
    1d36:	60 2f       	mov	r22, r16
    1d38:	8d 2f       	mov	r24, r29
    1d3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_st7565r_get_byte>
    1d3e:	4f 2d       	mov	r20, r15
    1d40:	48 2b       	or	r20, r24
    1d42:	60 2f       	mov	r22, r16
    1d44:	8d 2f       	mov	r24, r29
    1d46:	0e 94 20 05 	call	0xa40	; 0xa40 <gfx_mono_st7565r_put_byte>
    1d4a:	c1 50       	subi	r28, 0x01	; 1
    1d4c:	91 f7       	brne	.-28     	; 0x1d32 <gfx_mono_generic_draw_horizontal_line+0x5c>
    1d4e:	25 c0       	rjmp	.+74     	; 0x1d9a <gfx_mono_generic_draw_horizontal_line+0xc4>
    1d50:	c4 2f       	mov	r28, r20
    1d52:	1f ef       	ldi	r17, 0xFF	; 255
    1d54:	18 0f       	add	r17, r24
    1d56:	fa 2e       	mov	r15, r26
    1d58:	f0 94       	com	r15
    1d5a:	01 2f       	mov	r16, r17
    1d5c:	0c 0f       	add	r16, r28
    1d5e:	60 2f       	mov	r22, r16
    1d60:	8d 2f       	mov	r24, r29
    1d62:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_st7565r_get_byte>
    1d66:	4f 2d       	mov	r20, r15
    1d68:	48 23       	and	r20, r24
    1d6a:	60 2f       	mov	r22, r16
    1d6c:	8d 2f       	mov	r24, r29
    1d6e:	0e 94 20 05 	call	0xa40	; 0xa40 <gfx_mono_st7565r_put_byte>
    1d72:	c1 50       	subi	r28, 0x01	; 1
    1d74:	91 f7       	brne	.-28     	; 0x1d5a <gfx_mono_generic_draw_horizontal_line+0x84>
    1d76:	11 c0       	rjmp	.+34     	; 0x1d9a <gfx_mono_generic_draw_horizontal_line+0xc4>
    1d78:	c4 2f       	mov	r28, r20
    1d7a:	1f ef       	ldi	r17, 0xFF	; 255
    1d7c:	18 0f       	add	r17, r24
    1d7e:	01 2f       	mov	r16, r17
    1d80:	0c 0f       	add	r16, r28
    1d82:	60 2f       	mov	r22, r16
    1d84:	8d 2f       	mov	r24, r29
    1d86:	0e 94 4c 06 	call	0xc98	; 0xc98 <gfx_mono_st7565r_get_byte>
    1d8a:	4f 2d       	mov	r20, r15
    1d8c:	48 27       	eor	r20, r24
    1d8e:	60 2f       	mov	r22, r16
    1d90:	8d 2f       	mov	r24, r29
    1d92:	0e 94 20 05 	call	0xa40	; 0xa40 <gfx_mono_st7565r_put_byte>
    1d96:	c1 50       	subi	r28, 0x01	; 1
    1d98:	91 f7       	brne	.-28     	; 0x1d7e <gfx_mono_generic_draw_horizontal_line+0xa8>
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	08 95       	ret

00001da6 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
	if (height == 0) {
    1db0:	22 23       	and	r18, r18
    1db2:	69 f0       	breq	.+26     	; 0x1dce <gfx_mono_generic_draw_filled_rect+0x28>
    1db4:	f4 2e       	mov	r15, r20
    1db6:	18 2f       	mov	r17, r24
    1db8:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1dba:	df ef       	ldi	r29, 0xFF	; 255
    1dbc:	d6 0f       	add	r29, r22
    1dbe:	6d 2f       	mov	r22, r29
    1dc0:	6c 0f       	add	r22, r28
    1dc2:	20 2f       	mov	r18, r16
    1dc4:	4f 2d       	mov	r20, r15
    1dc6:	81 2f       	mov	r24, r17
    1dc8:	86 df       	rcall	.-244    	; 0x1cd6 <gfx_mono_generic_draw_horizontal_line>
    1dca:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1dcc:	c1 f7       	brne	.-16     	; 0x1dbe <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	08 95       	ret

00001dda <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    1de0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    1de4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1de8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    1dec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    1df0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    1df4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1df8:	08 95       	ret

00001dfa <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	1f 92       	push	r1
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e04:	9f b7       	in	r25, 0x3f	; 63
    1e06:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1e08:	f8 94       	cli
	return flags;
    1e0a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1e0c:	e8 2f       	mov	r30, r24
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	e0 59       	subi	r30, 0x90	; 144
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	60 95       	com	r22
    1e16:	80 81       	ld	r24, Z
    1e18:	68 23       	and	r22, r24
    1e1a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e1c:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1e1e:	0f 90       	pop	r0
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	1f 92       	push	r1
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1e30:	9f b7       	in	r25, 0x3f	; 63
    1e32:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1e34:	f8 94       	cli
	return flags;
    1e36:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1e38:	e8 2f       	mov	r30, r24
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	e0 59       	subi	r30, 0x90	; 144
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	68 2b       	or	r22, r24
    1e44:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e46:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1e48:	0f 90       	pop	r0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1e50:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1e54:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1e56:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1e58:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1e5c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1e5e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1e62:	08 95       	ret

00001e64 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	c8 2f       	mov	r28, r24
    1e7a:	e6 2e       	mov	r14, r22
    1e7c:	b4 2e       	mov	r11, r20
    1e7e:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1e80:	00 e0       	ldi	r16, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	24 81       	ldd	r18, Z+4	; 0x04
    1e86:	43 81       	ldd	r20, Z+3	; 0x03
    1e88:	6b 2d       	mov	r22, r11
    1e8a:	8e 2d       	mov	r24, r14
    1e8c:	8c df       	rcall	.-232    	; 0x1da6 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1e8e:	f6 01       	movw	r30, r12
    1e90:	80 81       	ld	r24, Z
    1e92:	81 11       	cpse	r24, r1
    1e94:	3a c0       	rjmp	.+116    	; 0x1f0a <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1e96:	83 81       	ldd	r24, Z+3	; 0x03
    1e98:	28 2f       	mov	r18, r24
    1e9a:	26 95       	lsr	r18
    1e9c:	26 95       	lsr	r18
    1e9e:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1ea0:	87 70       	andi	r24, 0x07	; 7
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1ea6:	f6 01       	movw	r30, r12
    1ea8:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1eaa:	8c 2f       	mov	r24, r28
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	35 81       	ldd	r19, Z+5	; 0x05
    1eb0:	83 1b       	sub	r24, r19
    1eb2:	91 09       	sbc	r25, r1
    1eb4:	2a 9d       	mul	r18, r10
    1eb6:	90 01       	movw	r18, r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	82 9f       	mul	r24, r18
    1ebc:	a0 01       	movw	r20, r0
    1ebe:	83 9f       	mul	r24, r19
    1ec0:	50 0d       	add	r21, r0
    1ec2:	92 9f       	mul	r25, r18
    1ec4:	50 0d       	add	r21, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	01 81       	ldd	r16, Z+1	; 0x01
    1eca:	12 81       	ldd	r17, Z+2	; 0x02
    1ecc:	04 0f       	add	r16, r20
    1ece:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1ed4:	ff 20       	and	r15, r15
    1ed6:	a9 f0       	breq	.+42     	; 0x1f02 <gfx_mono_draw_char+0x9e>
    1ed8:	d0 e0       	ldi	r29, 0x00	; 0
    1eda:	c0 e0       	ldi	r28, 0x00	; 0
    1edc:	8e 2d       	mov	r24, r14
    1ede:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1ee0:	9c 2f       	mov	r25, r28
    1ee2:	97 70       	andi	r25, 0x07	; 7
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	d4 91       	lpm	r29, Z
				glyph_data++;
    1eea:	0f 5f       	subi	r16, 0xFF	; 255
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1eee:	dd 23       	and	r29, r29
    1ef0:	24 f4       	brge	.+8      	; 0x1efa <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	6b 2d       	mov	r22, r11
    1ef6:	0e 94 15 06 	call	0xc2a	; 0xc2a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1efa:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1efc:	cf 5f       	subi	r28, 0xFF	; 255
    1efe:	fc 12       	cpse	r15, r28
    1f00:	ed cf       	rjmp	.-38     	; 0x1edc <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1f02:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    1f04:	aa 94       	dec	r10
	} while (rows_left > 0);
    1f06:	a1 10       	cpse	r10, r1
    1f08:	e3 cf       	rjmp	.-58     	; 0x1ed0 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	df 90       	pop	r13
    1f18:	cf 90       	pop	r12
    1f1a:	bf 90       	pop	r11
    1f1c:	af 90       	pop	r10
    1f1e:	08 95       	ret

00001f20 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1f20:	df 92       	push	r13
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	d6 2e       	mov	r13, r22
    1f30:	04 2f       	mov	r16, r20
    1f32:	79 01       	movw	r14, r18
    1f34:	ec 01       	movw	r28, r24
    1f36:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1f38:	89 91       	ld	r24, Y+
    1f3a:	8a 30       	cpi	r24, 0x0A	; 10
    1f3c:	31 f4       	brne	.+12     	; 0x1f4a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    1f3e:	f7 01       	movw	r30, r14
    1f40:	84 81       	ldd	r24, Z+4	; 0x04
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1f46:	1d 2d       	mov	r17, r13
    1f48:	09 c0       	rjmp	.+18     	; 0x1f5c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    1f4a:	8d 30       	cpi	r24, 0x0D	; 13
    1f4c:	39 f0       	breq	.+14     	; 0x1f5c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    1f4e:	97 01       	movw	r18, r14
    1f50:	40 2f       	mov	r20, r16
    1f52:	61 2f       	mov	r22, r17
    1f54:	87 df       	rcall	.-242    	; 0x1e64 <gfx_mono_draw_char>
			x += font->width;
    1f56:	f7 01       	movw	r30, r14
    1f58:	83 81       	ldd	r24, Z+3	; 0x03
    1f5a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    1f5c:	88 81       	ld	r24, Y
    1f5e:	81 11       	cpse	r24, r1
    1f60:	eb cf       	rjmp	.-42     	; 0x1f38 <gfx_mono_draw_string+0x18>
}
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	0f 91       	pop	r16
    1f6a:	ff 90       	pop	r15
    1f6c:	ef 90       	pop	r14
    1f6e:	df 90       	pop	r13
    1f70:	08 95       	ret

00001f72 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1f7c:	c6 2f       	mov	r28, r22
    1f7e:	d0 e0       	ldi	r29, 0x00	; 0
    1f80:	de 01       	movw	r26, r28
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <ioport_configure_port_pin+0x18>
    1f86:	b5 95       	asr	r27
    1f88:	a7 95       	ror	r26
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <ioport_configure_port_pin+0x14>
    1f8e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1f90:	50 8b       	std	Z+16, r21	; 0x10
    1f92:	2f 5f       	subi	r18, 0xFF	; 255
    1f94:	3f 4f       	sbci	r19, 0xFF	; 255
    1f96:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1f98:	28 30       	cpi	r18, 0x08	; 8
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	89 f7       	brne	.-30     	; 0x1f80 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1f9e:	40 ff       	sbrs	r20, 0
    1fa0:	0a c0       	rjmp	.+20     	; 0x1fb6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1fa2:	41 ff       	sbrs	r20, 1
    1fa4:	03 c0       	rjmp	.+6      	; 0x1fac <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	65 83       	std	Z+5, r22	; 0x05
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1fac:	fc 01       	movw	r30, r24
    1fae:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	61 83       	std	Z+1, r22	; 0x01
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	08 95       	ret

00001fc0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1fc0:	43 e0       	ldi	r20, 0x03	; 3
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	61 e0       	ldi	r22, 0x01	; 1
    1fc6:	80 ee       	ldi	r24, 0xE0	; 224
    1fc8:	97 e0       	ldi	r25, 0x07	; 7
    1fca:	d3 df       	rcall	.-90     	; 0x1f72 <ioport_configure_port_pin>
    1fcc:	43 e0       	ldi	r20, 0x03	; 3
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	80 ee       	ldi	r24, 0xE0	; 224
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	cd df       	rcall	.-102    	; 0x1f72 <ioport_configure_port_pin>
    1fd8:	43 e0       	ldi	r20, 0x03	; 3
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	60 e1       	ldi	r22, 0x10	; 16
    1fde:	80 e6       	ldi	r24, 0x60	; 96
    1fe0:	96 e0       	ldi	r25, 0x06	; 6
    1fe2:	c7 df       	rcall	.-114    	; 0x1f72 <ioport_configure_port_pin>
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	50 e4       	ldi	r21, 0x40	; 64
    1fe8:	60 e2       	ldi	r22, 0x20	; 32
    1fea:	80 e6       	ldi	r24, 0x60	; 96
    1fec:	96 e0       	ldi	r25, 0x06	; 6
    1fee:	c1 df       	rcall	.-126    	; 0x1f72 <ioport_configure_port_pin>
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	5b e1       	ldi	r21, 0x1B	; 27
    1ff4:	60 e2       	ldi	r22, 0x20	; 32
    1ff6:	80 e8       	ldi	r24, 0x80	; 128
    1ff8:	96 e0       	ldi	r25, 0x06	; 6
    1ffa:	bb df       	rcall	.-138    	; 0x1f72 <ioport_configure_port_pin>
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	5b e1       	ldi	r21, 0x1B	; 27
    2000:	62 e0       	ldi	r22, 0x02	; 2
    2002:	80 ea       	ldi	r24, 0xA0	; 160
    2004:	96 e0       	ldi	r25, 0x06	; 6
    2006:	b5 df       	rcall	.-150    	; 0x1f72 <ioport_configure_port_pin>
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	5b e1       	ldi	r21, 0x1B	; 27
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	80 ea       	ldi	r24, 0xA0	; 160
    2010:	96 e0       	ldi	r25, 0x06	; 6
    2012:	af df       	rcall	.-162    	; 0x1f72 <ioport_configure_port_pin>
    2014:	43 e0       	ldi	r20, 0x03	; 3
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	80 e6       	ldi	r24, 0x60	; 96
    201c:	96 e0       	ldi	r25, 0x06	; 6
    201e:	a9 df       	rcall	.-174    	; 0x1f72 <ioport_configure_port_pin>
    2020:	43 e0       	ldi	r20, 0x03	; 3
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	68 e0       	ldi	r22, 0x08	; 8
    2026:	80 e6       	ldi	r24, 0x60	; 96
    2028:	96 e0       	ldi	r25, 0x06	; 6
    202a:	a3 df       	rcall	.-186    	; 0x1f72 <ioport_configure_port_pin>
    202c:	43 e0       	ldi	r20, 0x03	; 3
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	68 e0       	ldi	r22, 0x08	; 8
    2032:	80 ea       	ldi	r24, 0xA0	; 160
    2034:	96 e0       	ldi	r25, 0x06	; 6
    2036:	9d df       	rcall	.-198    	; 0x1f72 <ioport_configure_port_pin>
    2038:	43 e0       	ldi	r20, 0x03	; 3
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	80 e6       	ldi	r24, 0x60	; 96
    2040:	96 e0       	ldi	r25, 0x06	; 6
    2042:	97 df       	rcall	.-210    	; 0x1f72 <ioport_configure_port_pin>
    2044:	43 e0       	ldi	r20, 0x03	; 3
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	68 e0       	ldi	r22, 0x08	; 8
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	96 e0       	ldi	r25, 0x06	; 6
    204e:	91 df       	rcall	.-222    	; 0x1f72 <ioport_configure_port_pin>
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	60 e1       	ldi	r22, 0x10	; 16
    2056:	80 e8       	ldi	r24, 0x80	; 128
    2058:	96 e0       	ldi	r25, 0x06	; 6
    205a:	8b df       	rcall	.-234    	; 0x1f72 <ioport_configure_port_pin>
    205c:	43 e0       	ldi	r20, 0x03	; 3
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	62 e0       	ldi	r22, 0x02	; 2
    2062:	80 e6       	ldi	r24, 0x60	; 96
    2064:	96 e0       	ldi	r25, 0x06	; 6
    2066:	85 df       	rcall	.-246    	; 0x1f72 <ioport_configure_port_pin>
    2068:	43 e0       	ldi	r20, 0x03	; 3
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	68 e0       	ldi	r22, 0x08	; 8
    206e:	80 e6       	ldi	r24, 0x60	; 96
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	7f df       	rcall	.-258    	; 0x1f72 <ioport_configure_port_pin>
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	64 e0       	ldi	r22, 0x04	; 4
    207a:	80 e6       	ldi	r24, 0x60	; 96
    207c:	96 e0       	ldi	r25, 0x06	; 6
    207e:	79 df       	rcall	.-270    	; 0x1f72 <ioport_configure_port_pin>
    2080:	43 e0       	ldi	r20, 0x03	; 3
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	60 e1       	ldi	r22, 0x10	; 16
    2086:	80 ea       	ldi	r24, 0xA0	; 160
    2088:	96 e0       	ldi	r25, 0x06	; 6
    208a:	73 df       	rcall	.-282    	; 0x1f72 <ioport_configure_port_pin>
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	96 e0       	ldi	r25, 0x06	; 6
    2096:	6d df       	rcall	.-294    	; 0x1f72 <ioport_configure_port_pin>
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	64 e0       	ldi	r22, 0x04	; 4
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	96 e0       	ldi	r25, 0x06	; 6
    20a2:	67 df       	rcall	.-306    	; 0x1f72 <ioport_configure_port_pin>
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	80 e2       	ldi	r24, 0x20	; 32
    20ac:	96 e0       	ldi	r25, 0x06	; 6
    20ae:	61 df       	rcall	.-318    	; 0x1f72 <ioport_configure_port_pin>
    20b0:	43 e0       	ldi	r20, 0x03	; 3
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	68 e0       	ldi	r22, 0x08	; 8
    20b6:	80 e4       	ldi	r24, 0x40	; 64
    20b8:	96 e0       	ldi	r25, 0x06	; 6
    20ba:	5b df       	rcall	.-330    	; 0x1f72 <ioport_configure_port_pin>
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	64 e0       	ldi	r22, 0x04	; 4
    20c2:	80 e4       	ldi	r24, 0x40	; 64
    20c4:	96 e0       	ldi	r25, 0x06	; 6
    20c6:	55 df       	rcall	.-342    	; 0x1f72 <ioport_configure_port_pin>
    20c8:	43 e0       	ldi	r20, 0x03	; 3
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	68 e0       	ldi	r22, 0x08	; 8
    20ce:	80 e6       	ldi	r24, 0x60	; 96
    20d0:	96 e0       	ldi	r25, 0x06	; 6
    20d2:	4f df       	rcall	.-354    	; 0x1f72 <ioport_configure_port_pin>
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	64 e0       	ldi	r22, 0x04	; 4
    20da:	80 e6       	ldi	r24, 0x60	; 96
    20dc:	96 e0       	ldi	r25, 0x06	; 6
    20de:	49 df       	rcall	.-366    	; 0x1f72 <ioport_configure_port_pin>
    20e0:	43 e0       	ldi	r20, 0x03	; 3
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	68 e0       	ldi	r22, 0x08	; 8
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	96 e0       	ldi	r25, 0x06	; 6
    20ea:	43 df       	rcall	.-378    	; 0x1f72 <ioport_configure_port_pin>
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	64 e0       	ldi	r22, 0x04	; 4
    20f2:	80 e8       	ldi	r24, 0x80	; 128
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	3d cf       	rjmp	.-390    	; 0x1f72 <ioport_configure_port_pin>
    20f8:	08 95       	ret

000020fa <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    20fc:	61 50       	subi	r22, 0x01	; 1
    20fe:	71 09       	sbc	r23, r1
    2100:	81 09       	sbc	r24, r1
    2102:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2104:	61 15       	cp	r22, r1
    2106:	71 05       	cpc	r23, r1
    2108:	81 05       	cpc	r24, r1
    210a:	91 05       	cpc	r25, r1
    210c:	b9 f7       	brne	.-18     	; 0x20fc <__portable_avr_delay_cycles+0x2>
    210e:	08 95       	ret

00002110 <setUpSerial>:
{
	// Baud rate selection
	// BSEL = (2000000 / (2^0 * 16*9600) -1 = 12.0208... ~ 12 -> BSCALE = 0
	// FBAUD = ( (2000000)/(2^0*16(12+1)) = 9615.384 -> mendekati lah ya
	
	USARTC0_BAUDCTRLB = 0; //memastikan BSCALE = 0
    2110:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7be8a7>
	USARTC0_BAUDCTRLA = 0x0C; // 12
    2114:	8c e0       	ldi	r24, 0x0C	; 12
    2116:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7be8a6>
	
	//USARTC0_BAUDCTRLB = 0; //Just to be sure that BSCALE is 0
	//USARTC0_BAUDCTRLA = 0xCF; // 207
	
	//Disable interrupts, just for safety
	USARTC0_CTRLA = 0;
    211a:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7be8a3>
	//8 data bits, no parity and 1 stop bit
	USARTC0_CTRLC = USART_CHSIZE_8BIT_gc;
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7be8a5>
	
	//Enable receive and transmit
	USARTC0_CTRLB = USART_TXEN_bm | USART_RXEN_bm;
    2124:	88 e1       	ldi	r24, 0x18	; 24
    2126:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7be8a4>
    212a:	08 95       	ret

0000212c <sendChar>:
}

void sendChar(char c) {
	while( !(USARTC0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
    212c:	e1 ea       	ldi	r30, 0xA1	; 161
    212e:	f8 e0       	ldi	r31, 0x08	; 8
    2130:	90 81       	ld	r25, Z
    2132:	95 ff       	sbrs	r25, 5
    2134:	fd cf       	rjmp	.-6      	; 0x2130 <sendChar+0x4>
	USARTC0_DATA = c;
    2136:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7be8a0>
    213a:	08 95       	ret

0000213c <sendString>:
}

void sendString(char *text) {
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
	while(*text) {
    2142:	88 81       	ld	r24, Y
    2144:	88 23       	and	r24, r24
    2146:	51 f0       	breq	.+20     	; 0x215c <sendString+0x20>
    2148:	21 96       	adiw	r28, 0x01	; 1
		sendChar(*text++);
    214a:	f0 df       	rcall	.-32     	; 0x212c <sendChar>
		//usart_putchar(USART_SERIAL_EXAMPLE, *text++);
		delay_ms(1);
    214c:	6e e4       	ldi	r22, 0x4E	; 78
    214e:	71 e0       	ldi	r23, 0x01	; 1
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	d2 df       	rcall	.-92     	; 0x20fa <__portable_avr_delay_cycles>
	while( !(USARTC0_STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
	USARTC0_DATA = c;
}

void sendString(char *text) {
	while(*text) {
    2156:	89 91       	ld	r24, Y+
    2158:	81 11       	cpse	r24, r1
    215a:	f7 cf       	rjmp	.-18     	; 0x214a <sendString+0xe>
		sendChar(*text++);
		//usart_putchar(USART_SERIAL_EXAMPLE, *text++);
		delay_ms(1);
	}
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <receiveChar>:

char receiveChar() {
	while (!(USARTC0_STATUS & USART_RXCIF_bm)); //Wait until receive finish
    2162:	e1 ea       	ldi	r30, 0xA1	; 161
    2164:	f8 e0       	ldi	r31, 0x08	; 8
    2166:	80 81       	ld	r24, Z
    2168:	88 23       	and	r24, r24
    216a:	ec f7       	brge	.-6      	; 0x2166 <receiveChar+0x4>
	return USARTC0_DATA;
    216c:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7be8a0>
}
    2170:	08 95       	ret

00002172 <receiveString>:

void receiveString() {
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	0a eb       	ldi	r16, 0xBA	; 186
    217c:	12 e2       	ldi	r17, 0x22	; 34
	int i = 0;
    217e:	c0 e0       	ldi	r28, 0x00	; 0
    2180:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		char inp = receiveChar();
    2182:	ef df       	rcall	.-34     	; 0x2162 <receiveChar>
		//char inp = usart_getchar(USART_SERIAL_EXAMPLE);
		if(inp=='\n') break;
    2184:	8a 30       	cpi	r24, 0x0A	; 10
    2186:	51 f0       	breq	.+20     	; 0x219c <receiveString+0x2a>
		else reads[i++] = inp;
    2188:	21 96       	adiw	r28, 0x01	; 1
    218a:	f8 01       	movw	r30, r16
    218c:	81 93       	st	Z+, r24
    218e:	8f 01       	movw	r16, r30
		delay_ms(1);
    2190:	6e e4       	ldi	r22, 0x4E	; 78
    2192:	71 e0       	ldi	r23, 0x01	; 1
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	b0 df       	rcall	.-160    	; 0x20fa <__portable_avr_delay_cycles>
	}
    219a:	f3 cf       	rjmp	.-26     	; 0x2182 <receiveString+0x10>
	reads[i] = '\0';
    219c:	c6 54       	subi	r28, 0x46	; 70
    219e:	dd 4d       	sbci	r29, 0xDD	; 221
    21a0:	18 82       	st	Y, r1
}
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <main>:

int main (void) {
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	1f 92       	push	r1
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
    21b6:	04 df       	rcall	.-504    	; 0x1fc0 <board_init>
	sysclk_init();
    21b8:	10 de       	rcall	.-992    	; 0x1dda <sysclk_init>
    21ba:	0e 94 d0 05 	call	0xba0	; 0xba0 <gfx_mono_st7565r_init>
	gfx_mono_init();
    21be:	0e 94 e7 02 	call	0x5ce	; 0x5ce <adc_sensors_init>
	adc_sensors_init();
    21c2:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    21c4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
    21c8:	78 94       	sei
	
	// Inisialisasi interrupt vector
	pmic_init();
	cpu_irq_enable();
    21ca:	80 e1       	ldi	r24, 0x10	; 16
    21cc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
    21d0:	81 e0       	ldi	r24, 0x01	; 1
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    21d2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
    21d6:	88 e0       	ldi	r24, 0x08	; 8
	
	gpio_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);
	
	PORTC_OUTSET = PIN3_bm; // PC3 as TX
    21d8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7be645>
    21dc:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	PORTC_DIRSET = PIN3_bm; //TX pin as output
    21e0:	84 e0       	ldi	r24, 0x04	; 4
	
	PORTC_OUTCLR = PIN2_bm; //PC2 as RX
    21e2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7be646>
    21e6:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x7be642>
	PORTC_DIRCLR = PIN2_bm; //RX pin as input
	
	setUpSerial();
    21ea:	92 df       	rcall	.-220    	; 0x2110 <setUpSerial>
    21ec:	67 e0       	ldi	r22, 0x07	; 7
		.charlength = USART_SERIAL_CHAR_LENGTH,
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    21ee:	70 e2       	ldi	r23, 0x20	; 32
    21f0:	80 ea       	ldi	r24, 0xA0	; 160
    21f2:	98 e0       	ldi	r25, 0x08	; 8
    21f4:	b4 d9       	rcall	.-3224   	; 0x155e <usart_init_rs232>
    21f6:	20 e0       	ldi	r18, 0x00	; 0
	
	gfx_mono_draw_string("loading ...", 0, 0, &sysfont);
    21f8:	30 e2       	ldi	r19, 0x20	; 32
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	8e e0       	ldi	r24, 0x0E	; 14
    2200:	90 e2       	ldi	r25, 0x20	; 32
    2202:	8e de       	rcall	.-740    	; 0x1f20 <gfx_mono_draw_string>
    2204:	20 e0       	ldi	r18, 0x00	; 0
	gfx_mono_draw_string(".       ",0, 8, &sysfont);
    2206:	30 e2       	ldi	r19, 0x20	; 32
    2208:	48 e0       	ldi	r20, 0x08	; 8
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	8a e1       	ldi	r24, 0x1A	; 26
    220e:	90 e2       	ldi	r25, 0x20	; 32
    2210:	87 de       	rcall	.-754    	; 0x1f20 <gfx_mono_draw_string>
	delay_ms(500);
    2212:	6b e0       	ldi	r22, 0x0B	; 11
    2214:	7b e8       	ldi	r23, 0x8B	; 139
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	6f df       	rcall	.-290    	; 0x20fa <__portable_avr_delay_cycles>
	gfx_mono_draw_string("..      ",0, 8, &sysfont);
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e2       	ldi	r19, 0x20	; 32
    2220:	48 e0       	ldi	r20, 0x08	; 8
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	83 e2       	ldi	r24, 0x23	; 35
    2226:	90 e2       	ldi	r25, 0x20	; 32
    2228:	7b de       	rcall	.-778    	; 0x1f20 <gfx_mono_draw_string>
	delay_ms(500);
    222a:	6b e0       	ldi	r22, 0x0B	; 11
    222c:	7b e8       	ldi	r23, 0x8B	; 139
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	63 df       	rcall	.-314    	; 0x20fa <__portable_avr_delay_cycles>
	gfx_mono_draw_string("...     ",0, 8, &sysfont);
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e2       	ldi	r19, 0x20	; 32
    2238:	48 e0       	ldi	r20, 0x08	; 8
    223a:	60 e0       	ldi	r22, 0x00	; 0
    223c:	8c e2       	ldi	r24, 0x2C	; 44
    223e:	90 e2       	ldi	r25, 0x20	; 32
	delay_s(2);
    2240:	6f de       	rcall	.-802    	; 0x1f20 <gfx_mono_draw_string>
    2242:	6b e2       	ldi	r22, 0x2B	; 43
    2244:	7c e2       	ldi	r23, 0x2C	; 44
    2246:	8a e0       	ldi	r24, 0x0A	; 10
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	57 df       	rcall	.-338    	; 0x20fa <__portable_avr_delay_cycles>
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
	uint8_t iterations = 0;
	#define LIGHTSENSOR_NUM_SAMPLES 20
	sendString("1");
    224c:	85 e3       	ldi	r24, 0x35	; 53
    224e:	90 e2       	ldi	r25, 0x20	; 32
    2250:	75 df       	rcall	.-278    	; 0x213c <sendString>
    2252:	71 2c       	mov	r7, r1
	//toggle flag 1=low, 0=high
	int flagLed0=1;
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
	uint8_t iterations = 0;
    2254:	81 2c       	mov	r8, r1
	
	//toggle flag 1=low, 0=high
	int flagLed0=1;
	
	// Variable untuk sampling light sensor
	uint32_t intensity = 0;
    2256:	91 2c       	mov	r9, r1
    2258:	54 01       	movw	r10, r8
    225a:	0f 2e       	mov	r0, r31
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    225c:	f0 e4       	ldi	r31, 0x40	; 64
    225e:	ef 2e       	mov	r14, r31
    2260:	f6 e0       	ldi	r31, 0x06	; 6
    2262:	ff 2e       	mov	r15, r31
    2264:	f0 2d       	mov	r31, r0
    2266:	66 24       	eor	r6, r6
    2268:	63 94       	inc	r6
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    226a:	00 e0       	ldi	r16, 0x00	; 0
    226c:	12 e0       	ldi	r17, 0x02	; 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    226e:	0f 2e       	mov	r0, r31
    2270:	f0 ee       	ldi	r31, 0xE0	; 224
    2272:	cf 2e       	mov	r12, r31
    2274:	f7 e0       	ldi	r31, 0x07	; 7
    2276:	df 2e       	mov	r13, r31
	#define LIGHTSENSOR_NUM_SAMPLES 20
	sendString("1");

	while (1) {
		
		receiveString();
    2278:	f0 2d       	mov	r31, r0
		gfx_mono_draw_string("Automatic Plant Care", 0, 0, &sysfont);
    227a:	7b df       	rcall	.-266    	; 0x2172 <receiveString>
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e2       	ldi	r19, 0x20	; 32
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	87 e3       	ldi	r24, 0x37	; 55
    2286:	90 e2       	ldi	r25, 0x20	; 32
    2288:	4b de       	rcall	.-874    	; 0x1f20 <gfx_mono_draw_string>
		
		// check code sent from arduino
		if (strcmp("1",reads)==0){
    228a:	6a eb       	ldi	r22, 0xBA	; 186
    228c:	72 e2       	ldi	r23, 0x22	; 34
    228e:	85 e3       	ldi	r24, 0x35	; 53
    2290:	90 e2       	ldi	r25, 0x20	; 32
    2292:	c0 d0       	rcall	.+384    	; 0x2414 <strcmp>
    2294:	89 2b       	or	r24, r25
    2296:	89 f4       	brne	.+34     	; 0x22ba <main+0x10e>
    2298:	f7 01       	movw	r30, r14
			//toogle buzzer only low water
			ioport_set_pin_level(J1_PIN0, 1); //set high
			gfx_mono_draw_string("                 ",0, 8, &sysfont);
    229a:	65 82       	std	Z+5, r6	; 0x05
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e2       	ldi	r19, 0x20	; 32
    22a0:	48 e0       	ldi	r20, 0x08	; 8
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	8c e4       	ldi	r24, 0x4C	; 76
    22a6:	90 e2       	ldi	r25, 0x20	; 32
			gfx_mono_draw_string("> low water",0, 8, &sysfont);
    22a8:	3b de       	rcall	.-906    	; 0x1f20 <gfx_mono_draw_string>
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e2       	ldi	r19, 0x20	; 32
    22ae:	48 e0       	ldi	r20, 0x08	; 8
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	8e e5       	ldi	r24, 0x5E	; 94
    22b4:	90 e2       	ldi	r25, 0x20	; 32
    22b6:	34 de       	rcall	.-920    	; 0x1f20 <gfx_mono_draw_string>
		}
		else if (strcmp("2",reads)==0){
    22b8:	47 c0       	rjmp	.+142    	; 0x2348 <main+0x19c>
    22ba:	6a eb       	ldi	r22, 0xBA	; 186
    22bc:	72 e2       	ldi	r23, 0x22	; 34
    22be:	8a e6       	ldi	r24, 0x6A	; 106
    22c0:	90 e2       	ldi	r25, 0x20	; 32
    22c2:	a8 d0       	rcall	.+336    	; 0x2414 <strcmp>
    22c4:	89 2b       	or	r24, r25
    22c6:	89 f4       	brne	.+34     	; 0x22ea <main+0x13e>
    22c8:	f7 01       	movw	r30, r14
			//toogle buzzer & print hot
			ioport_set_pin_level(J1_PIN0, 1); //set high
			gfx_mono_draw_string("                 ",0, 8, &sysfont);
    22ca:	65 82       	std	Z+5, r6	; 0x05
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e2       	ldi	r19, 0x20	; 32
    22d0:	48 e0       	ldi	r20, 0x08	; 8
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	8c e4       	ldi	r24, 0x4C	; 76
    22d6:	90 e2       	ldi	r25, 0x20	; 32
			gfx_mono_draw_string("> low water & hot",0, 8, &sysfont);
    22d8:	23 de       	rcall	.-954    	; 0x1f20 <gfx_mono_draw_string>
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e2       	ldi	r19, 0x20	; 32
    22de:	48 e0       	ldi	r20, 0x08	; 8
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	8c e6       	ldi	r24, 0x6C	; 108
    22e4:	90 e2       	ldi	r25, 0x20	; 32
    22e6:	1c de       	rcall	.-968    	; 0x1f20 <gfx_mono_draw_string>
		}
		else if (strcmp("3",reads)==0) {
    22e8:	2f c0       	rjmp	.+94     	; 0x2348 <main+0x19c>
    22ea:	6a eb       	ldi	r22, 0xBA	; 186
    22ec:	72 e2       	ldi	r23, 0x22	; 34
    22ee:	8e e7       	ldi	r24, 0x7E	; 126
    22f0:	90 e2       	ldi	r25, 0x20	; 32
    22f2:	90 d0       	rcall	.+288    	; 0x2414 <strcmp>
    22f4:	89 2b       	or	r24, r25
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    22f6:	89 f4       	brne	.+34     	; 0x231a <main+0x16e>
			//off buzzer
			ioport_set_pin_level(J1_PIN0, 0); //set low
			gfx_mono_draw_string("                 ",0, 8, &sysfont);
    22f8:	f7 01       	movw	r30, r14
    22fa:	66 82       	std	Z+6, r6	; 0x06
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e2       	ldi	r19, 0x20	; 32
    2300:	48 e0       	ldi	r20, 0x08	; 8
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	8c e4       	ldi	r24, 0x4C	; 76
    2306:	90 e2       	ldi	r25, 0x20	; 32
			gfx_mono_draw_string("> hot",0, 8, &sysfont);
    2308:	0b de       	rcall	.-1002   	; 0x1f20 <gfx_mono_draw_string>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e2       	ldi	r19, 0x20	; 32
    230e:	48 e0       	ldi	r20, 0x08	; 8
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	80 e8       	ldi	r24, 0x80	; 128
    2314:	90 e2       	ldi	r25, 0x20	; 32
    2316:	04 de       	rcall	.-1016   	; 0x1f20 <gfx_mono_draw_string>
		}
		else if (strcmp("0",reads)==0) {
    2318:	17 c0       	rjmp	.+46     	; 0x2348 <main+0x19c>
    231a:	6a eb       	ldi	r22, 0xBA	; 186
    231c:	72 e2       	ldi	r23, 0x22	; 34
    231e:	86 e8       	ldi	r24, 0x86	; 134
    2320:	90 e2       	ldi	r25, 0x20	; 32
    2322:	78 d0       	rcall	.+240    	; 0x2414 <strcmp>
    2324:	89 2b       	or	r24, r25
    2326:	81 f4       	brne	.+32     	; 0x2348 <main+0x19c>
    2328:	f7 01       	movw	r30, r14
    232a:	66 82       	std	Z+6, r6	; 0x06
			//off buzzer
			ioport_set_pin_level(J1_PIN0, 0); //set low
			gfx_mono_draw_string("                 ",0, 8, &sysfont);
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e2       	ldi	r19, 0x20	; 32
    2330:	48 e0       	ldi	r20, 0x08	; 8
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	8c e4       	ldi	r24, 0x4C	; 76
    2336:	90 e2       	ldi	r25, 0x20	; 32
    2338:	f3 dd       	rcall	.-1050   	; 0x1f20 <gfx_mono_draw_string>
    233a:	20 e0       	ldi	r18, 0x00	; 0
			gfx_mono_draw_string("> good",0, 8, &sysfont);
    233c:	30 e2       	ldi	r19, 0x20	; 32
    233e:	48 e0       	ldi	r20, 0x08	; 8
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	88 e8       	ldi	r24, 0x88	; 136
    2344:	90 e2       	ldi	r25, 0x20	; 32
    2346:	ec dd       	rcall	.-1064   	; 0x1f20 <gfx_mono_draw_string>
    2348:	8f b7       	in	r24, 0x3f	; 63
    234a:	89 83       	std	Y+1, r24	; 0x01

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    234c:	f8 94       	cli
    234e:	99 81       	ldd	r25, Y+1	; 0x01
	cpu_irq_disable();
    2350:	f8 01       	movw	r30, r16
	return flags;
    2352:	80 81       	ld	r24, Z
    2354:	84 60       	ori	r24, 0x04	; 4
    2356:	80 83       	st	Z, r24
    2358:	9f bf       	out	0x3f, r25	; 63
    235a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lightsensor_data_is_ready>
		}
		
		// code used from lab 2
		lightsensor_measure();									// Mengambil data dari pengukuran intensitas oleh light sensor
		while(!lightsensor_data_is_ready());					// Menunggu data sampai siap untuk ditampilkan
    235e:	88 23       	and	r24, r24
    2360:	e1 f3       	breq	.-8      	; 0x235a <main+0x1ae>
    2362:	0e 94 34 03 	call	0x668	; 0x668 <lightsensor_get_raw_value>
		intensity += lightsensor_get_raw_value();				// Mengambil hasil olah data dalam raw ADC value
    2366:	09 2e       	mov	r0, r25
    2368:	00 0c       	add	r0, r0
    236a:	aa 0b       	sbc	r26, r26
    236c:	bb 0b       	sbc	r27, r27
    236e:	88 0e       	add	r8, r24
    2370:	99 1e       	adc	r9, r25
    2372:	aa 1e       	adc	r10, r26
    2374:	bb 1e       	adc	r11, r27
    2376:	f3 e1       	ldi	r31, 0x13	; 19

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
    2378:	f7 15       	cp	r31, r7
    237a:	10 f0       	brcs	.+4      	; 0x2380 <main+0x1d4>
    237c:	73 94       	inc	r7
    237e:	22 c0       	rjmp	.+68     	; 0x23c4 <main+0x218>
    2380:	80 eb       	ldi	r24, 0xB0	; 176
			iterations = 0;
			intensity /= LIGHTSENSOR_NUM_SAMPLES;
			
			if (intensity < 60){
    2382:	88 16       	cp	r8, r24
    2384:	84 e0       	ldi	r24, 0x04	; 4
    2386:	98 06       	cpc	r9, r24
    2388:	a1 04       	cpc	r10, r1
    238a:	b1 04       	cpc	r11, r1
    238c:	70 f4       	brcc	.+28     	; 0x23aa <main+0x1fe>
				flagLed0 = 0;
				gfx_mono_draw_string("low light     ",0, 16, &sysfont);
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e2       	ldi	r19, 0x20	; 32
    2392:	40 e1       	ldi	r20, 0x10	; 16
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	8f e8       	ldi	r24, 0x8F	; 143
    2398:	90 e2       	ldi	r25, 0x20	; 32
    239a:	c2 dd       	rcall	.-1148   	; 0x1f20 <gfx_mono_draw_string>
    239c:	f6 01       	movw	r30, r12
    239e:	66 82       	std	Z+6, r6	; 0x06
		while(!lightsensor_data_is_ready());					// Menunggu data sampai siap untuk ditampilkan
		intensity += lightsensor_get_raw_value();				// Mengambil hasil olah data dalam raw ADC value

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
			iterations = 0;
    23a0:	71 2c       	mov	r7, r1
				flagLed0 = 1;
				gfx_mono_draw_string("lighting good ",0, 16, &sysfont);
			}
			
			ioport_set_pin_level(LED0_GPIO,flagLed0);
			intensity = 0;
    23a2:	81 2c       	mov	r8, r1
    23a4:	91 2c       	mov	r9, r1
    23a6:	54 01       	movw	r10, r8
    23a8:	0d c0       	rjmp	.+26     	; 0x23c4 <main+0x218>
				flagLed0 = 0;
				gfx_mono_draw_string("low light     ",0, 16, &sysfont);
			}
			else {
				flagLed0 = 1;
				gfx_mono_draw_string("lighting good ",0, 16, &sysfont);
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e2       	ldi	r19, 0x20	; 32
    23ae:	40 e1       	ldi	r20, 0x10	; 16
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	8e e9       	ldi	r24, 0x9E	; 158
    23b4:	90 e2       	ldi	r25, 0x20	; 32
    23b6:	b4 dd       	rcall	.-1176   	; 0x1f20 <gfx_mono_draw_string>
    23b8:	f6 01       	movw	r30, r12
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    23ba:	65 82       	std	Z+5, r6	; 0x05
    23bc:	71 2c       	mov	r7, r1
		while(!lightsensor_data_is_ready());					// Menunggu data sampai siap untuk ditampilkan
		intensity += lightsensor_get_raw_value();				// Mengambil hasil olah data dalam raw ADC value

		// Dikarenakan hasil yang diperoleh merupakan data raw diperlukan sampling agar mendapatkan hasil yang baik
		if(iterations++ >= LIGHTSENSOR_NUM_SAMPLES) {
			iterations = 0;
    23be:	81 2c       	mov	r8, r1
				flagLed0 = 1;
				gfx_mono_draw_string("lighting good ",0, 16, &sysfont);
			}
			
			ioport_set_pin_level(LED0_GPIO,flagLed0);
			intensity = 0;
    23c0:	91 2c       	mov	r9, r1
    23c2:	54 01       	movw	r10, r8
    23c4:	6b e0       	ldi	r22, 0x0B	; 11
		}
		
		delay_ms(500);
    23c6:	7b e8       	ldi	r23, 0x8B	; 139
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	96 de       	rcall	.-724    	; 0x20fa <__portable_avr_delay_cycles>
    23ce:	55 cf       	rjmp	.-342    	; 0x227a <main+0xce>

000023d0 <__udivmodsi4>:
    23d0:	a1 e2       	ldi	r26, 0x21	; 33
		
		
	}
    23d2:	1a 2e       	mov	r1, r26
    23d4:	aa 1b       	sub	r26, r26
    23d6:	bb 1b       	sub	r27, r27
    23d8:	fd 01       	movw	r30, r26
    23da:	0d c0       	rjmp	.+26     	; 0x23f6 <__udivmodsi4_ep>

000023dc <__udivmodsi4_loop>:
    23dc:	aa 1f       	adc	r26, r26
    23de:	bb 1f       	adc	r27, r27
    23e0:	ee 1f       	adc	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	a2 17       	cp	r26, r18
    23e6:	b3 07       	cpc	r27, r19
    23e8:	e4 07       	cpc	r30, r20
    23ea:	f5 07       	cpc	r31, r21
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <__udivmodsi4_ep>
    23ee:	a2 1b       	sub	r26, r18
    23f0:	b3 0b       	sbc	r27, r19
    23f2:	e4 0b       	sbc	r30, r20
    23f4:	f5 0b       	sbc	r31, r21

000023f6 <__udivmodsi4_ep>:
    23f6:	66 1f       	adc	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	1a 94       	dec	r1
    2400:	69 f7       	brne	.-38     	; 0x23dc <__udivmodsi4_loop>
    2402:	60 95       	com	r22
    2404:	70 95       	com	r23
    2406:	80 95       	com	r24
    2408:	90 95       	com	r25
    240a:	9b 01       	movw	r18, r22
    240c:	ac 01       	movw	r20, r24
    240e:	bd 01       	movw	r22, r26
    2410:	cf 01       	movw	r24, r30
    2412:	08 95       	ret

00002414 <strcmp>:
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	8d 91       	ld	r24, X+
    241a:	01 90       	ld	r0, Z+
    241c:	80 19       	sub	r24, r0
    241e:	01 10       	cpse	r0, r1
    2420:	d9 f3       	breq	.-10     	; 0x2418 <strcmp+0x4>
    2422:	99 0b       	sbc	r25, r25
    2424:	08 95       	ret

00002426 <_exit>:
    2426:	f8 94       	cli

00002428 <__stop_program>:
    2428:	ff cf       	rjmp	.-2      	; 0x2428 <__stop_program>
